<?R 
	source("conf.R") 
	c_header();
	source("lib/feq.R")
	source("lib/boundary.R")
?>

/*
09.04.19 - d3q27 model for particle coupling.
	     
	Consolidated isothermal portion of J. McCullough's thermal LBM-DEM model with D. Wang's TRT collision operator and modified weighting function for the PSM (based on LBM-DEM coupling of Noble & Torczynski, 1998).

	Compile options include:
		- BGK or TRT collision (BGK is default, for TRT compile with _TRT)
		- non-equilibirium-bounce-back (_NEBB) or superposition (_SUP) solid collision operators

	Maintainer: Nathan Di Vaira di_vaira@hotmail.com
		
Code updates:
	06.11.19 - Moving walls added
	11.12.19 - PSM coverage and modified weighting functions corrected, now correct 2nd order convergence & improved viscosity dependence
	10.01.20 - TotalFluidVelocity globals added
	25.02.20 - Manual periodicity and FullParticleIterator removed to align with TCLB particle update
	
*/

#define SQRT_3 1.732050807568877

<?R
	f = PV(DensityAll$name[DensityAll$group=="f"])
	h = PV(DensityAll$name[DensityAll$group=="h"])

	U = as.matrix(DensityAll[DensityAll$group=="f",c("dx","dy","dz")])
	u = PV(paste("u[",1:3-1,"]",sep=""))
	
	uf = PV("uf")
	d = PV("d")
	usq = PV("usq")
	omegaF = PV("omegaF")
        omegaP = PV("omegaP")
	uf1 = uf;
        uf2 = uf;
        uf3 = uf;
#	omega = 1.0

	fh = PV(DensityAll$name[1:27+27])


	rho =  PV("rho")
	J = PV("J",c("x","y","z"))
	tmp = PV("tmp")

# Calculating equlibrium density set

	EQ = MRT_eq(U, rho, J, ortogonal=FALSE);
	
	t1 = 8/27
	t2 = 2/27
	t3 = 1/54
	t4 = 1/216
	c_squ = 1/3

	tn = diag(c(t1,t2,t2,t2,t2,t2,t2,t3,t3,t3,t3,t3,t3,t3,t3,t3,t3,t3,t3,t4,t4,t4,t4,t4,t4,t4,t4))
	bounce = c(0,2,1,4,3,6,5,10,9,8,7,14,13,12,11,18,17,16,15,26,25,24,23,22,21,20,19)
	right =  c(0, 4, 3, 1, 2, 2, 1, 9, 7, 10, 8, 12, 14, 11, 13, 17, 15, 18, 16,  9,  7, 10,  8,  8, 10,  7,  9)
	front = c(0, 5, 5, 5, 5, 3, 3, 5, 5,  5, 5,  3,  3,  3,  3,  1,  1,  1,  1, 22, 21, 20, 19, 26, 25, 24, 23)

?>

//real_t const d3q27_cx[27] = {0, 1,-1, 0, 0, 0, 0, 1,-1, 1,-1, 1,-1, 1,-1, 0, 0, 0, 0, 1,-1, 1,-1, 1,-1, 1,-1};
//real_t const d3q27_cy[27] = {0, 0, 0, 1,-1, 0, 0, 1, 1,-1,-1, 0, 0, 0, 0, 1,-1, 1,-1, 1, 1,-1,-1, 1, 1,-1,-1};
//real_t const d3q27_cz[27] = {0, 0, 0, 0, 0, 1,-1, 0, 0, 0, 0, 1, 1,-1,-1, 1, 1,-1,-1, 1, 1, 1, 1,-1,-1,-1,-1};

CudaDeviceFunction real_t getRho(){
	return <?R C(sum(f)) ?> ;
}

CudaDeviceFunction real_t getSolid(){
	return sol;
}
 
CudaDeviceFunction vector_t getU(){
	real_t d = <?R C(sum(f)) ?>;
	vector_t u;
<?R C(PV(c("u.x","u.y","u.z")), f %*% U) ?>
	u.x /= d;
	u.y /= d;
	u.z /= d;
	
	if (((NodeType & NODE_BOUNDARY) == NODE_NVelocity) || ((NodeType & NODE_BOUNDARY) == NODE_SVelocity) || ((NodeType & NODE_BOUNDARY) == NODE_EVelocity)|| ((NodeType & NODE_BOUNDARY) == NODE_WVelocity) || ((NodeType & NODE_BOUNDARY) == NODE_FVelocity)|| ((NodeType & NODE_BOUNDARY) == NODE_BVelocity))
	{ 
	   u.x = VelocityX;
	   u.y = VelocityY;
	   u.z = VelocityZ;
	}
	
	return u;
}

CudaDeviceFunction void Init() {
	real_t d = Density;
	SetEquilibrum(d,InitVelocityX,InitVelocityY,InitVelocityZ);
        sol = 0;
        sol = CalcSolid();
}

CudaDeviceFunction void Run() {
    //sol = 0;
    //sol = CalcSolid();
    AddToTotalSVF(sol);

    switch (NodeType & NODE_BOUNDARY) {
		
        case NODE_Solid:

        case NODE_Wall:
	    BounceBack();
	    break;

        case NODE_NPressure:
            PressureExitN();
	    break;

        case NODE_SPressure:
            PressureExitS();
	    break;

        case NODE_EPressure:
            PressureExitE();
	    break;
	   
        case NODE_WPressure:
            PressureExitW();
	    break;
   
        case NODE_FPressure:
            PressureExitF();
	    break;

        case NODE_BPressure:
            PressureExitB();
	    break;
           
	case NODE_NVelocity:
	    NonEquilibriumExtrapolationN();
	    // NVelocity();
	    break;

	case NODE_SVelocity:
	    NonEquilibriumExtrapolationS();
	    // SVelocity();
	    break;

	case NODE_EVelocity:
	    NonEquilibriumExtrapolationE();
	    // EVelocity();
	    break;

	case NODE_WVelocity:
	    NonEquilibriumExtrapolationW();
	    // WVelocity();
	    break;

	case NODE_FVelocity:
	    NonEquilibriumExtrapolationF();
	    // FVelocity();
	    break;

	case NODE_BVelocity:
	    NonEquilibriumExtrapolationB();
 	    // BVelocity();
	    break;
	
	case NODE_MovingWall_N:
        	MovingNWall();
        	break;
        
	case NODE_MovingWall_S:
        	MovingSWall();
                break;

	}	   
  
    switch (NodeType & NODE_COLLISION) {
        
	case NODE_BGK:
	    #ifdef OPTIONS_TRT
                CollisionTRT_PSM();
	    #else
		CollisionBGK_PSM();
	    #endif
	    break;

	case NODE_MRT:
            CollisionMRT();
            break;
	}

 	sol = 0;
	uPx = 0;
	uPy = 0;
	uPz = 0;
}

CudaDeviceFunction void BounceBack()
{
     real_t uf, uT;
     #define dump 1
<?R
  uT = PV("uT")
  V = cbind(1:27, bounce+1)
  sel = V[,1] > V[,2]
  V = V[sel,]
  for (i in 1:nrow(V))
  {
	   C( uf , f[V[i,1]])
      C( f[V[i,1]] , f[V[i,2]])
      C( f[V[i,2]] , uf)
      #C( uT , h[V[i,1]])
      #C( h[V[i,1]] , h[V[i,2]])
      #C( h[V[i,2]] , uT)
   
   }
?>

}

// 0 1 2 3 4 5 6 7 8
// 1 5 2 6 3 7 4 8 0

CudaDeviceFunction void NonEquilibriumExtrapolationN()
{
    real_t u[3], d, eq_local[27], eq_neigh[27], usq;
    const int adjY = -1; 
    
    <?R 
    fpop = PV(paste("f",1:27-1,"(0,adjY,0)",sep=""))
    d=PV("d") 
    C(d, sum(fpop)) 
    ?>
    
    // pu* = pu + rG
    u[0] = VelocityX;
    u[1] = VelocityY;
    u[2] = VelocityZ;
    
    <?R  
      eq_local = PV(paste("eq_local[",1:27-1,"]",sep=""))
      
      C(usq, sum(u*u)*(1/c_squ))

      for (i in 1:27) {
         C( eq_local[i], d * ((u %*% t(U) * (1/c_squ))[i] + ((u %*% t(U) * (1/c_squ))[i]*(u %*% t(U) * (1/c_squ))[i]+usq*(-1))*0.5 + 1) * tn[i,i])
      }
    ?>
    
    u[0] = (<?R C(fpop%*%U[,1]) ?>)/d;
    u[1] = (<?R C(fpop%*%U[,2]) ?>)/d;
    u[2] = (<?R C(fpop%*%U[,3]) ?>)/d;
    
    <?R  
      eq_neigh = PV(paste("eq_neigh[",1:27-1,"]",sep=""))
      
      C(usq, sum(u*u)*(1/c_squ))

      for (i in 1:27) {
         C( eq_neigh[i], d * ((u %*% t(U) * (1/c_squ))[i] + ((u %*% t(U) * (1/c_squ))[i]*(u %*% t(U) * (1/c_squ))[i]+usq*(-1))*0.5 + 1) * tn[i,i])
      }
      
      for (i in 1:27){  
         C(f[i], eq_local[i] - eq_neigh[i] + PV(paste("f",i-1,"(0,adjY,0)",sep=""))) }
    ?>

}

CudaDeviceFunction void NonEquilibriumExtrapolationS()
{
    real_t u[3], d, eq_local[27], eq_neigh[27], usq;
    const int adjY = 1; 
    
    <?R 
    fpop = PV(paste("f",1:27-1,"(0,adjY,0)",sep=""))
    d=PV("d") 
    C(d, sum(fpop)) 
    ?>
    
    // pu* = pu + rG
    u[0] = VelocityX;
    u[1] = VelocityY;
    u[2] = VelocityZ;
    
    <?R  
      eq_local = PV(paste("eq_local[",1:27-1,"]",sep=""))
      
      C(usq, sum(u*u)*(1/c_squ))

      for (i in 1:27) {
         C( eq_local[i], d * ((u %*% t(U) * (1/c_squ))[i] + ((u %*% t(U) * (1/c_squ))[i]*(u %*% t(U) * (1/c_squ))[i]+usq*(-1))*0.5 + 1) * tn[i,i])
      }
    ?>
    
    u[0] = (<?R C(fpop%*%U[,1]) ?>)/d;
    u[1] = (<?R C(fpop%*%U[,2]) ?>)/d;
    u[2] = (<?R C(fpop%*%U[,3]) ?>)/d;
    
    <?R  
      eq_neigh = PV(paste("eq_neigh[",1:27-1,"]",sep=""))
      
      C(usq, sum(u*u)*(1/c_squ))

      for (i in 1:27) {
         C( eq_neigh[i], d * ((u %*% t(U) * (1/c_squ))[i] + ((u %*% t(U) * (1/c_squ))[i]*(u %*% t(U) * (1/c_squ))[i]+usq*(-1))*0.5 + 1) * tn[i,i])
      }
      
      for (i in 1:27){  
         C(f[i], eq_local[i] - eq_neigh[i] + PV(paste("f",i-1,"(0,adjY,0)",sep=""))) }
    ?>
}

CudaDeviceFunction void NonEquilibriumExtrapolationE()
{
    real_t u[3], d, eq_local[27], eq_neigh[27], usq;
    const int adjX = -1; 
    
    <?R 
    fpop = PV(paste("f",1:27-1,"(adjX,0,0)",sep=""))
    d=PV("d") 
    C(d, sum(fpop)) 
    ?>
    
    // pu* = pu + rG
    u[0] = VelocityX;
    u[1] = VelocityY;
    u[2] = VelocityZ;
    
    <?R  
      eq_local = PV(paste("eq_local[",1:27-1,"]",sep=""))
      
      C(usq, sum(u*u)*(1/c_squ))

      for (i in 1:27) {
         C( eq_local[i], d * ((u %*% t(U) * (1/c_squ))[i] + ((u %*% t(U) * (1/c_squ))[i]*(u %*% t(U) * (1/c_squ))[i]+usq*(-1))*0.5 + 1) * tn[i,i])
      }
    ?>
    
    u[0] = (<?R C(fpop%*%U[,1]) ?>)/d;
    u[1] = (<?R C(fpop%*%U[,2]) ?>)/d;
    u[2] = (<?R C(fpop%*%U[,3]) ?>)/d;
    
    <?R  
      eq_neigh = PV(paste("eq_neigh[",1:27-1,"]",sep=""))
      
      C(usq, sum(u*u)*(1/c_squ))

      for (i in 1:27) {
         C( eq_neigh[i], d * ((u %*% t(U) * (1/c_squ))[i] + ((u %*% t(U) * (1/c_squ))[i]*(u %*% t(U) * (1/c_squ))[i]+usq*(-1))*0.5 + 1) * tn[i,i])
      }
      
      for (i in 1:27){  
         C(f[i], eq_local[i] - eq_neigh[i] + PV(paste("f",i-1,"(adjX,0,0)",sep=""))) }
    ?>
}

CudaDeviceFunction void NonEquilibriumExtrapolationW()
{
    real_t u[3], d, eq_local[27], eq_neigh[27], usq;
    const int adjX = 1; 
    
    <?R 
    fpop = PV(paste("f",1:27-1,"(adjX,0,0)",sep=""))
    d=PV("d") 
    C(d, sum(fpop)) 
    ?>
    
    // pu* = pu + rG
    u[0] = VelocityX;
    u[1] = VelocityY;
    u[2] = VelocityZ;
    
    <?R  
      eq_local = PV(paste("eq_local[",1:27-1,"]",sep=""))
      
      C(usq, sum(u*u)*(1/c_squ))

      for (i in 1:27) {
         C( eq_local[i], d * ((u %*% t(U) * (1/c_squ))[i] + ((u %*% t(U) * (1/c_squ))[i]*(u %*% t(U) * (1/c_squ))[i]+usq*(-1))*0.5 + 1) * tn[i,i])
      }
    ?>
    
    u[0] = (<?R C(fpop%*%U[,1]) ?>)/d;
    u[1] = (<?R C(fpop%*%U[,2]) ?>)/d;
    u[2] = (<?R C(fpop%*%U[,3]) ?>)/d;
    
    <?R  
      eq_neigh = PV(paste("eq_neigh[",1:27-1,"]",sep=""))
      
      C(usq, sum(u*u)*(1/c_squ))

      for (i in 1:27) {
         C( eq_neigh[i], d * ((u %*% t(U) * (1/c_squ))[i] + ((u %*% t(U) * (1/c_squ))[i]*(u %*% t(U) * (1/c_squ))[i]+usq*(-1))*0.5 + 1) * tn[i,i])
      }
      
      for (i in 1:27){  
         C(f[i], eq_local[i] - eq_neigh[i] + PV(paste("f",i-1,"(adjX,0,0)",sep=""))) }
    ?>
}

CudaDeviceFunction void NonEquilibriumExtrapolationF()
{
    real_t u[3], d, eq_local[27], eq_neigh[27], usq;
    const int adjZ = -1; 
    
    <?R 
    fpop = PV(paste("f",1:27-1,"(0,0,adjZ)",sep=""))
    d=PV("d") 
    C(d, sum(fpop)) 
    ?>
    
    // pu* = pu + rG
    u[0] = VelocityX;
    u[1] = VelocityY;
    u[2] = VelocityZ;
    
    <?R  
      eq_local = PV(paste("eq_local[",1:27-1,"]",sep=""))
      
      C(usq, sum(u*u)*(1/c_squ))

      for (i in 1:27) {
         C( eq_local[i], d * ((u %*% t(U) * (1/c_squ))[i] + ((u %*% t(U) * (1/c_squ))[i]*(u %*% t(U) * (1/c_squ))[i]+usq*(-1))*0.5 + 1) * tn[i,i])
      }
    ?>
    
    u[0] = (<?R C(fpop%*%U[,1]) ?>)/d;
    u[1] = (<?R C(fpop%*%U[,2]) ?>)/d;
    u[2] = (<?R C(fpop%*%U[,3]) ?>)/d;
    
    <?R  
      eq_neigh = PV(paste("eq_neigh[",1:27-1,"]",sep=""))
      
      C(usq, sum(u*u)*(1/c_squ))

      for (i in 1:27) {
         C( eq_neigh[i], d * ((u %*% t(U) * (1/c_squ))[i] + ((u %*% t(U) * (1/c_squ))[i]*(u %*% t(U) * (1/c_squ))[i]+usq*(-1))*0.5 + 1) * tn[i,i])
      }
      
      for (i in 1:27){  
         C(f[i], eq_local[i] - eq_neigh[i] + PV(paste("f",i-1,"(0,0,adjZ)",sep=""))) }
    ?>
}

CudaDeviceFunction void NonEquilibriumExtrapolationB()
{
    real_t u[3], d, eq_local[27], eq_neigh[27], usq;
    const int adjZ = 1; 
    
    <?R 
    fpop = PV(paste("f",1:27-1,"(0,0,adjZ)",sep=""))
    d=PV("d") 
    C(d, sum(fpop)) 
    ?>
    
    // pu* = pu + rG
    u[0] = VelocityX;
    u[1] = VelocityY;
    u[2] = VelocityZ;
    
    <?R  
      eq_local = PV(paste("eq_local[",1:27-1,"]",sep=""))
      
      C(usq, sum(u*u)*(1/c_squ))

      for (i in 1:27) {
         C( eq_local[i], d * ((u %*% t(U) * (1/c_squ))[i] + ((u %*% t(U) * (1/c_squ))[i]*(u %*% t(U) * (1/c_squ))[i]+usq*(-1))*0.5 + 1) * tn[i,i])
      }
    ?>
    
    u[0] = (<?R C(fpop%*%U[,1]) ?>)/d;
    u[1] = (<?R C(fpop%*%U[,2]) ?>)/d;
    u[2] = (<?R C(fpop%*%U[,3]) ?>)/d;
    
    <?R  
      eq_neigh = PV(paste("eq_neigh[",1:27-1,"]",sep=""))
      
      C(usq, sum(u*u)*(1/c_squ))

      for (i in 1:27) {
         C( eq_neigh[i], d * ((u %*% t(U) * (1/c_squ))[i] + ((u %*% t(U) * (1/c_squ))[i]*(u %*% t(U) * (1/c_squ))[i]+usq*(-1))*0.5 + 1) * tn[i,i])
      }
      
      for (i in 1:27){  
         C(f[i], eq_local[i] - eq_neigh[i] + PV(paste("f",i-1,"(0,0,adjZ)",sep=""))) }
    ?>
}


CudaDeviceFunction void NVelocity()
{
    <?R ZouHe(EQ, 2, -1, "velocity") ?>
}

CudaDeviceFunction void SVelocity()
{
    <?R ZouHe(EQ, 2, 1, "velocity") ?>
}

CudaDeviceFunction void EVelocity()
{
    <?R ZouHe(EQ, 1, -1, "velocity") ?>
}

CudaDeviceFunction void WVelocity()
{
    <?R ZouHe(EQ, 1, 1, "velocity") ?>
}

CudaDeviceFunction void FVelocity()
{
    <?R ZouHe(EQ, 3, -1, "velocity") ?>
}

CudaDeviceFunction void BVelocity()
{
    <?R ZouHe(EQ, 3, 1, "velocity") ?>
}


CudaDeviceFunction void PressureExitN()
{
    real_t u[3], d, eq_local[27], eq_neigh[27], usq;
    const int adjY = -1; 
    
    <?R 
    fpop = PV(paste("f",1:27-1,"(0,adjY,0)",sep=""))
    d=PV("d") 
    C(d, sum(fpop)) 
    

    ZouHe(EQ,2,-1,"pressure")

    ?>
}

CudaDeviceFunction void PressureExitS()
{
    real_t u[3], d, eq_local[27], eq_neigh[27], usq;
    const int adjY = 1; 
    
    <?R 
    fpop = PV(paste("f",1:27-1,"(0,adjY,0)",sep=""))
    d=PV("d") 
    C(d, sum(fpop)) 
    

    ZouHe(EQ,2,1,"pressure")

    ?>
}

CudaDeviceFunction void PressureExitE()
{
    real_t u[3], d, eq_local[27], eq_neigh[27], usq;
    const int adjX = -1; 
    
    <?R 
    fpop = PV(paste("f",1:27-1,"(adjX,0,0)",sep=""))
    d=PV("d") 
    C(d, sum(fpop)) 
    

    ZouHe(EQ,1,-1,"pressure")

    ?>
}

CudaDeviceFunction void PressureExitW()
{
    real_t u[3], d, eq_local[27], eq_neigh[27], usq;
    const int adjX = 1; 
    
    <?R 
    fpop = PV(paste("f",1:27-1,"(adjX,0,0)",sep=""))
    d=PV("d") 
    C(d, sum(fpop)) 
    

    ZouHe(EQ,1,1,"pressure")

    ?>
}

CudaDeviceFunction void PressureExitF()
{
    real_t u[3], d, eq_local[27], eq_neigh[27], usq;
    const int adjZ = -1; 
    
    <?R 
    fpop = PV(paste("f",1:27-1,"(0,0,adjZ)",sep=""))
    d=PV("d") 
    C(d, sum(fpop)) 
    

    ZouHe(EQ,3,-1,"pressure")

    ?>
}

CudaDeviceFunction void PressureExitB()
{
    real_t u[3], d, eq_local[27], eq_neigh[27], usq;
    const int adjZ = 1; 
    
    <?R 
    fpop = PV(paste("f",1:27-1,"(0,0,adjZ)",sep=""))
    d=PV("d") 
    C(d, sum(fpop)) 
    

    ZouHe(EQ,3,1,"pressure")

    ?>
}

CudaDeviceFunction void MovingNWall()
{
        f[1]  = f[3];
        f[16] = f[17];
        f[18] = f[15];

        f[21]  = f[24] + VelocityX/36.0;
        f[25] = f[20]  + VelocityX/36.0;
        f[9] = f[8] + VelocityX/9.0;

        f[22] = f[23] - VelocityX/36.0;
        f[26]= f[19]  - VelocityX/36.0;
        f[10] = f[7] - VelocityX/9.0;
}

CudaDeviceFunction void MovingSWall(){
        f[3]  = f[4];
        f[17] = f[16];
        f[15] = f[18];

        f[24] = f[21]  - VelocityX/36.0;
        f[20]  = f[25] - VelocityX/36.0;
        f[8] = f[9] - VelocityX/9.0;

        f[23] = f[22] + VelocityX/36.0;
        f[19]  = f[26] + VelocityX/36.0;
        f[7] = f[10] + VelocityX/9.0;
}


CudaDeviceFunction void SetEquilibrum(real_t rho, real_t Jx, real_t Jy, real_t Jz)
{
	<?R
		C(f, EQ$Req %*% solve(EQ$mat));
	?>
}

CudaDeviceFunction real_t CalcSolid(){
        real_t coverage = 0, ret = 0;

        for (ParticleIterator p(X,Y,Z); p; ++p) if ((p.dist - p.rad)<1.5) {
                if ((p.dist - p.rad) < - 1){
                        coverage = 1.0;
                } else{
                        coverage = (p.rad -  0.084/p.rad + 0.5 - p.dist);
                }

                if (coverage > 1.0){ coverage =  1.0;}
                if (coverage < 0.0){ coverage =  0.0;}

                ret += coverage;

        }

        if (ret > 1.0){ ret =  1.0;}
        if (ret < 0.0){ ret = 0.0;}

        return ret;
}

CudaDeviceFunction void CalcF() {
	 real_t numP = 0;
	
	    real_t omegaS[27], feqP[27], feq[27], u[3], uP[3];
	    real_t d, usq, uPsq;
	    
	    uP[0] = 0.0;
	    uP[1] = 0.0;
	    uP[2] = 0.0;

	    d=getRho();
	    u[0] = ((<?R C(f %*% U[,1]) ?> )/d + 0.5*(AccelX + GravitationX) );
	    u[1] = ((<?R C(f %*% U[,2]) ?> )/d + 0.5*(AccelY + GravitationY) );
	    u[2] = ((<?R C(f %*% U[,3]) ?> )/d + 0.5*(AccelZ + GravitationZ) );

                <?R
                         u = PV(paste("u[",1:3-1,"]",sep=""))
                         uP = PV(paste("uP[",1:3-1,"]",sep=""))
                         d = PV("d")
                         usq = PV ("usq")
                         uPsq = PV ("uPsq")
                         feq = PV(paste("feq[",1:27-1,"]",sep=""))
                         feqP = PV(paste("feqP[",1:27-1,"]",sep=""))
                         omegaS = PV(paste("omegaS[",1:27-1,"]",sep=""))
                         omegaF = PV("omegaF")

                      C(usq, sum(u*u)*(1/c_squ))
                      for (i in 1:27){
                         C( feq[i],  (((u %*% t(U) * (1/c_squ))[i]) + (((u %*% t(U) * (1/c_squ))[i])*((u %*% t(U) * (1/c_squ))[i])+usq*(-1))*0.5 + 1) * d *tn[i,i])
                      }
	 ?>

         for (ParticleIterator p(X,Y,Z); p; ++p) {
                
		    real_t dx = p.diff.x;
		    real_t dy = p.diff.y;
		    real_t dz = p.diff.z;

		    real_t dist = sqrt(dx*dx + dy*dy + dz*dz);
                    
		    if ((dist - p.rad)<SQRT_3) {
			numP += 1;
			uPx = ((numP - 1.0)*uPx + p.cvel.x)/numP;
			uPy = ((numP - 1.0)*uPy + p.cvel.y)/numP;
			uPz = ((numP - 1.0)*uPz + p.cvel.z)/numP;

                    real_t localCoverage = 0.0;

                    if ((dist - p.rad) < -1.0){
                        localCoverage = 1.0;
                    } else{
                        localCoverage = (p.rad -  0.084/p.rad + 0.5 - dist);
                    }

                    if (localCoverage > 1.0){ localCoverage =  1.0;}
                    if (localCoverage < 0.0){ localCoverage =  0.0;}

		   
		    sol += localCoverage;

                 }
             
        }

                    if (sol > 1.0){ sol =  1.0;}
                    if (sol < 0.0){ sol =  0.0;}

		    localOmegaF = omegaF;
		    sol = sol*(1/localOmegaF - 0.5) / ((1 - sol) + (1/localOmegaF - 0.5));
		    //sol = sol*((1/localOmegaF - 0.5) + 2*(1/localOmegaF - 0.5)*(1/localOmegaF - 0.5) + 3*(1/localOmegaF - 0.5)*(1/localOmegaF - 0.5)*(1/localOmegaF - 0.5) + 4*(1/localOmegaF - 0.5)*(1/localOmegaF - 0.5)*(1/localOmegaF - 0.5)*(1/localOmegaF - 0.5)) / ((1 - sol) + ((1/localOmegaF - 0.5) + 2*(1/localOmegaF - 0.5)*(1/localOmegaF - 0.5) + 3*(1/localOmegaF - 0.5)*(1/localOmegaF - 0.5)*(1/localOmegaF - 0.5) + 4*(1/localOmegaF - 0.5)*(1/localOmegaF - 0.5)*(1/localOmegaF - 0.5)*(1/localOmegaF - 0.5)));

         for (SyncParticleIterator p(X,Y,Z); p; ++p) {
                if ((NodeType & NODE_BOUNDARY)==0){
		    real_t dx = p.diff.x;
		    real_t dy = p.diff.y;
		    real_t dz = p.diff.z;

		    real_t dist = sqrt(dx*dx + dy*dy + dz*dz);
                    
		    if ((dist - p.rad)<SQRT_3) {
                        uP[0] = uPx;
                        uP[1] = uPy;
                        uP[2] = uPz;

                <?R

                    C(uPsq, sum(uP*uP)*(1/c_squ))

                    for (i in 1:27){
                        C(feqP[i], (((uP %*% t(U) *(1/c_squ))[i]) + (((uP %*% t(U) * (1/c_squ))[i])*((uP %*% t(U) * (1/c_squ))[i]) + uPsq*(-1))*0.5 + 1)*d*tn[i,i])
                    }
                    for (i in 1:27){

			if(Options$NEBB) {
				C(omegaS[i],  f[bounce[i]+1] - f[i] + feqP[i] - feq[bounce[i] + 1]) #Non-eq bounceback operator
			}
			if(Options$SUP){
				C(omegaS[i],  feqP[i] - f[i] + (1.0 - omegaF)*(f[i] - feq[i])) #Superposition operator
			}
               	    }
                ?>

                    vector_t force;
                    force.x=0.0; force.y=0.0; force.z=0.0;

                    force.x = -sol * ( <?R C(t(U[,1] %*% omegaS)) ?> );
                    force.y = -sol * ( <?R C(t(U[,2] %*% omegaS)) ?> );
                    force.z = -sol * ( <?R C(t(U[,3] %*% omegaS)) ?> );

                    p.applyForce(force);
                 }
             }
        }

}

CudaDeviceFunction void CollisionBGK_PSM() {
    real_t u[3],uf, d, feq[27], F[27], delf[27];
    real_t uP[3], omegaS[27], feqP[27], coverage=0, numP=0;
    real_t usq, uPsq;

    // Assume Gravity in y-direction
    real_t localGravitationY = GravitationY;
    
    d = getRho();
    // pu* = pu + 0.5pa
    u[0] = ((<?R C(f %*% U[,1]) ?>)/d + 0.5*(AccelX + GravitationX) );
    u[1] = ((<?R C(f %*% U[,2]) ?>)/d + 0.5*(AccelY + localGravitationY) );
    u[2] = ((<?R C(f %*% U[,3]) ?>)/d + 0.5*(AccelZ + GravitationZ) );

    uP[0] = uPx;
    uP[1] = uPy;
    uP[2] = uPz;

    AddToTotalFluidVelocityX(u[0]);
    AddToTotalFluidVelocityY(u[1]);
    AddToTotalFluidVelocityZ(u[2]); 

    <?R

      a = PV(c("(AccelX + GravitationX)", "(AccelY + localGravitationY)", "(AccelZ + GravitationZ)"))
      F = PV(paste("F[",1:27-1,"]",sep=""))
      feq = PV(paste("feq[",1:27-1,"]",sep=""))
      delf = PV(paste("delf[",1:27-1,"]",sep=""))

      feqP = PV(paste("feqP[",1:27-1,"]",sep=""))	      
      omegaS = PV(paste("omegaS[",1:27-1,"]",sep=""))
      sol = PV("sol")
      uP = PV(paste("uP[",1:3-1,"]",sep=""))
      uPl = PV(paste("uPl[",1:3-1,"]",sep=""))
      uPsq = PV("uPsq")
      uPlsq = PV("uPlsq")

      C(usq, sum(u*u)*(1/c_squ))
      for (i in 1:27){
         C( feq[i],  (((u %*% t(U) * (1/c_squ))[i]) + (((u %*% t(U) * (1/c_squ))[i])*((u %*% t(U) * (1/c_squ))[i])+usq*(-1))*0.5 + 1) * d *tn[i,i])
      }

           for (i in 1:27) {
         C(F[i], ((a %*% t(U))[i] + (1/c_squ)*(a %*% t(U))[i]*(u %*% t(U))[i] - (u %*% a)) * tn[i,i]*(1/c_squ)*d)
      }

      for (i in 1:27){
         C(delf[i], f[i] - feq[i])
      }
      ?>

      localOmegaF = omegaF;

      <?R
	localOmegaF = PV(c("localOmegaF")) 
	C(uPsq, sum(uP*uP)*(1/c_squ))
	for (i in 1:27){
		C(feqP[i], (((uP %*% t(U) *(1/c_squ))[i]) + (((uP %*% t(U) * (1/c_squ))[i])*((uP %*% t(U) * (1/c_squ))[i]) + uPsq*(-1))*0.5 + 1)*d*tn[i,i])
	}
	for (i in 1:27){

		if(Options$NEBB) {
                        C(omegaS[i],  f[bounce[i]+1] - f[i] + feqP[i] - feq[bounce[i] + 1]) #Non-eq bounceback operator
		}
		if(Options$SUP){
                        C(omegaS[i],  feqP[i] - f[i] + (1.0 - omegaF)*(f[i] - feq[i])) #Superposition operator
                }
	}

	for (i in 1:27){
		C(f[i], f[i] + (1.0-sol)*(localOmegaF*(feq[i] - f[i]) + (1.0-0.5*localOmegaF)*F[i]) + sol*omegaS[i])
	}
     ?>
}

CudaDeviceFunction void CollisionTRT_PSM() {
    real_t u[3], d, feq[27], F[27];
    real_t uP[3], omegaS[27], feqP[27], coverage=0, numP=0;
    real_t usq, uPsq;
    real_t feven[27], fodd[27], feqeven[27], feqodd[27];

<?R

      a = PV(c("(AccelX + GravitationX)", "(AccelY + GravitationY)", "(AccelZ + GravitationZ)"))

      F = PV(paste("F[",1:27-1,"]",sep=""))
      feq = PV(paste("feq[",1:27-1,"]",sep=""))
      feqP = PV(paste("feqP[",1:27-1,"]",sep=""))

      feven = PV(paste("feven[",1:27-1,"]",sep=""))
      fodd = PV(paste("fodd[",1:27-1,"]",sep=""))
      feqeven = PV(paste("feqeven[",1:27-1,"]",sep=""))
      feqodd = PV(paste("feqodd[",1:27-1,"]",sep=""))


      omegaS = PV(paste("omegaS[",1:27-1,"]",sep=""))
      sol = PV("sol")
      uP = PV(paste("uP[",1:3-1,"]",sep=""))

      uPsq = PV("uPsq")


?>

    d = getRho();
    // pu* = pu + 0.5pa
    u[0] = ((<?R C(f %*% U[,1]) ?>)/d + 0.5*(AccelX + GravitationX) );
    u[1] = ((<?R C(f %*% U[,2]) ?>)/d + 0.5*(AccelY + GravitationY) );
    u[2] = ((<?R C(f %*% U[,3]) ?>)/d + 0.5*(AccelZ + GravitationZ) );

    uP[0] = uPx;
    uP[1] = uPy;
    uP[2] = uPz;

    localOmegaF = omegaF;

<?R
       localOmegaF = PV(c("localOmegaF"))
       C(usq, sum(u*u)*(1/c_squ))

       for (i in 1:27) {
          C( feq[i],  (((u %*% t(U) * (1/c_squ))[i]) + (((u %*% t(U) * (1/c_squ))[i])*((u %*% t(U) * (1/c_squ))[i])+usq*(-1))*0.5 + 1) * d *tn[i,i])
       }

       for (i in 1:27) {
          C(feven[i], 0.5*(f[i] + f[bounce[i]+1]))
       }

       for (i in 1:27) {
          C(fodd[i], 0.5*(f[i] - f[bounce[i]+1]))
       }

       for (i in 1:27) {
          C(feqeven[i], 0.5*(feq[i] + feq[bounce[i]+1]))
       }

       for (i in 1:27) {
          C(feqodd[i], 0.5*(feq[i] - feq[bounce[i]+1]))
       }

       for (i in 1:27) {
         C(F[i], ((a %*% t(U))[i] + (1/c_squ)*(a %*% t(U))[i]*(u %*% t(U))[i] - (u %*% a)) * tn[i,i]*(1/c_squ)*d)
       }

       for (i in 1:27) {
                C(feqP[i], (((uP %*% t(U) *(1/c_squ))[i]) + (((uP %*% t(U) * (1/c_squ))[i])*((uP %*% t(U) * (1/c_squ))[i]) + uPsq*(-1))*0.5 + 1)*d*tn[i,i])
       }

       for (i in 1:27) {
                
		if(Options$NEBB) {
                        C(omegaS[i],  f[bounce[i]+1] - f[i] + feqP[i] - feq[bounce[i] + 1]) #Non-eq bounceback operator
                }
                if(Options$SUP){
                        C(omegaS[i],  feqP[i] - f[i] + (1.0 - omegaF)*(f[i] - feq[i])) #Superposition operator
                }
       }

       for (i in 1:27) {
            C(f[i], f[i] + (1.0-sol)*(localOmegaF*(feqeven[i] - feven[i]) + omegaP*(feqodd[i] - fodd[i]) + (1.0-0.5*localOmegaF)*F[i]) + sol*omegaS[i])
       }
     ?>
}

CudaDeviceFunction void CollisionMRT() {
}

CudaDeviceFunction float2 Color() {
        float2 ret;
//        vector_t u = getU();
//        ret.x = sqrt(u.x*u.x + u.y*u.y);

	ret.x = (<?R C(sum(f)) ?>);
	ret.x = ret.x/111;
//	ret.x = wb;
	if (NodeType == NODE_Solid) ret.y = 0; else ret.y= 1;
        return ret;
}

