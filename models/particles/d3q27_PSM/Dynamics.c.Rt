<?R 
	source("conf.R") 
	c_header();
	source("lib/feq.R")
	source("lib/boundary.R")
?>

/*
09.04.19 - d3q27 model for particle coupling.
	     
	Consolidated isothermal portion of J. McCullough's thermal LBM-DEM model with D. Wang's TRT collision operator and modified weighting function for the PSM (based on LBM-DEM coupling of Noble & Torczynski, 1998).

	Compile options include:
		- BGK or TRT collision (BGK is default, for TRT compile with _TRT)
		- non-equilibirium-bounce-back (_NEBB) or superposition (_SUP) solid collision operators

	Maintainers: Nathan Di Vaira di_vaira@hotmail.com / Lukasz Laniewski-Wollk l.laniewskiwollk@uq.edu.au
		
Code updates:
	06.11.19 - Moving walls added
	11.12.19 - PSM coverage and modified weighting functions corrected, now correct 2nd order convergence & improved viscosity dependence
	10.01.20 - TotalFluidVelocity globals added
	25.02.20 - Manual periodicity and FullParticleIterator removed to align with TCLB particle update
    20.05.20 - LLW: Modified to moment-based implementation; consolidated to single collision function with TRT option; corrected CalcF
    14.03.22 - omegaP removed as setting, replaced with Lambda (TRT magic parameter)
    28.11.22 - Kuang-Luo rheology added as a compile option
	
*/

#define SQRT_3 1.732050807568877
#define PI 3.141592653589793

<?R
	f = PV(DensityAll$name[DensityAll$group=="f"])
	h = PV(DensityAll$name[DensityAll$group=="h"])

	U = as.matrix(DensityAll[DensityAll$group=="f",c("dx","dy","dz")])
	u = PV(paste("u[",1:3-1,"]",sep=""))
	
	uf = PV("uf")
	d = PV("d")
	uf1 = uf;
    uf2 = uf;
    uf3 = uf;

	fh = PV(DensityAll$name[1:27+27])

	rho =  PV("rho")
	J = PV("J",c("x","y","z"))

# Calculating equlibrium density set

	EQ = MRT_eq(U, rho, J, ortogonal=FALSE);
	
	t1 = 8/27
	t2 = 2/27
	t3 = 1/54
	t4 = 1/216
	c_squ = 1/3

	tn = diag(c(t1,t2,t2,t2,t2,t2,t2,t3,t3,t3,t3,t3,t3,t3,t3,t3,t3,t3,t3,t4,t4,t4,t4,t4,t4,t4,t4))
	bounce = c(0,2,1,4,3,6,5,10,9,8,7,14,13,12,11,18,17,16,15,26,25,24,23,22,21,20,19)
	right =  c(0, 4, 3, 1, 2, 2, 1, 9, 7, 10, 8, 12, 14, 11, 13, 17, 15, 18, 16,  9,  7, 10,  8,  8, 10,  7,  9)
	front = c(0, 5, 5, 5, 5, 3, 3, 5, 5,  5, 5,  3,  3,  3,  3,  1,  1,  1,  1, 22, 21, 20, 19, 26, 25, 24, 23)
?>

CudaDeviceFunction real_t getRho(){
	return <?R C(sum(f)) ?> ;
}

CudaDeviceFunction vector_t getU(){
	real_t d = <?R C(sum(f)) ?>;
	vector_t u;
<?R C(PV(c("u.x","u.y","u.z")), f %*% U) ?>
	u.x /= d;
	u.y /= d;
	u.z /= d;
	
	if (((NodeType & NODE_BOUNDARY) == NODE_NVelocity) || ((NodeType & NODE_BOUNDARY) == NODE_SVelocity) || ((NodeType & NODE_BOUNDARY) == NODE_EVelocity)|| ((NodeType & NODE_BOUNDARY) == NODE_WVelocity) || ((NodeType & NODE_BOUNDARY) == NODE_FVelocity)|| ((NodeType & NODE_BOUNDARY) == NODE_BVelocity))
	{ 
	   u.x = VelocityX;
	   u.y = VelocityY;
	   u.z = VelocityZ;
	}
	
	return u;
}

<?R if (Options$particles) { ?>
CudaDeviceFunction real_t getSolid(){
	return sol;
}
<?R } ?>

CudaDeviceFunction void Init() {
	real_t d = 1.0+3.0*Pressure;
	real_t u[3];
	u[0] = VelocityX; u[1] = VelocityY; u[2] = VelocityZ;
	CalcEquilibrium(f, d, u);

<?R if (Options$KL) { ?>
    nu_app = (omegaF-0.5)/3.0;
    gamma_dot = 0.0;
<?R } ?>
}

CudaDeviceFunction void Run() {
<?R if (Options$singlekernel) { ?>
	CalcF();
<?R } ?>

    switch (NodeType & NODE_BOUNDARY) {

        case NODE_Solid:
        case NODE_Wall:
	    BounceBack();
	    break;

        case NODE_NPressure:
            PressureExitN();
	    break;

        case NODE_SPressure:
            PressureExitS();
	    break;

        case NODE_EPressure:
            PressureExitE();
	    break;
	   
        case NODE_WPressure:
            PressureExitW();
	    break;
   
        case NODE_FPressure:
            PressureExitF();
	    break;

        case NODE_BPressure:
            PressureExitB();
	    break;
           
	case NODE_NVelocity:
	    NonEquilibriumExtrapolationN();
	    // NVelocity();
	    break;

	case NODE_SVelocity:
	    NonEquilibriumExtrapolationS();
	    // SVelocity();
	    break;

	case NODE_EVelocity:
	    NonEquilibriumExtrapolationE();
	    // EVelocity();
	    break;

	case NODE_WVelocity:
	    NonEquilibriumExtrapolationW();
	    // WVelocity();
	    break;

	case NODE_FVelocity:
	    NonEquilibriumExtrapolationF();
	    // FVelocity();
	    break;

	case NODE_BVelocity:
	    NonEquilibriumExtrapolationB();
 	    // BVelocity();
	    break;
	
	case NODE_MovingWall_N:
        	MovingNWall();
        	break;
        
	case NODE_MovingWall_S:
        	MovingSWall();
                break;

	}	   
  
	switch (NodeType & NODE_COLLISION) {
        
	case NODE_BGK:
            Collision_PSM();
	    break;
	}

}

CudaDeviceFunction void BounceBack() {
    real_t uf, uT;
    #define dump 1
<?R
    uT = PV("uT")
    V = cbind(1:27, bounce+1)
    sel = V[,1] > V[,2]
    V = V[sel,]
    for (i in 1:nrow(V)) {
	    C( uf , f[V[i,1]])
        C( f[V[i,1]] , f[V[i,2]])
        C( f[V[i,2]] , uf)
    }
?>

}

// 0 1 2 3 4 5 6 7 8
// 1 5 2 6 3 7 4 8 0

<?R
u_prescribed = PV(c("VelocityX","VelocityY","VelocityZ"))

NonEquilibriumExtrapolation = function(adjx,adjy,adjz) {
?>
	real_t u[3], d, f_neigh[27], eq_local[27], eq_neigh[27];
<?R
	f_neigh_pop = PV(paste("f",1:27-1,"(",adjx,",",adjy,",",adjz,")",sep=""))
	f_neigh = PV("f_neigh[",1:27-1,"]")

	C(f_neigh, f_neigh_pop);
	d = PV("d")
	u = PV("u[",1:3-1,"]")
	C(d, sum(f_neigh))
	C(u, u_prescribed)
?>
	CalcEquilibrium(eq_local, d, u);
<?R	C(u, f_neigh %*% U * d^{-1}) ?>
	CalcEquilibrium(eq_neigh, d, u);
	for (int i=0;i<27;i++) f[i] = eq_local[i] - eq_neigh[i] + f_neigh[i];
<?R
}
?>	

CudaDeviceFunction void NonEquilibriumExtrapolationN()
{
<?R	NonEquilibriumExtrapolation(0,-1,0) ?>
}

CudaDeviceFunction void NonEquilibriumExtrapolationS()
{
<?R	NonEquilibriumExtrapolation(0,1,0) ?>
}

CudaDeviceFunction void NonEquilibriumExtrapolationE()
{
<?R	NonEquilibriumExtrapolation(-1,0,0) ?>
}

CudaDeviceFunction void NonEquilibriumExtrapolationW()
{
<?R	NonEquilibriumExtrapolation(1,0,0) ?>
}

CudaDeviceFunction void NonEquilibriumExtrapolationF()
{
<?R	NonEquilibriumExtrapolation(0,0,-1) ?>
}

CudaDeviceFunction void NonEquilibriumExtrapolationB()
{
<?R	NonEquilibriumExtrapolation(0,0,1) ?>
}


CudaDeviceFunction void NVelocity()
{
    <?R ZouHe(EQ, 2, -1, "velocity", V=u_prescribed[2]) ?>
}

CudaDeviceFunction void SVelocity()
{
    <?R ZouHe(EQ, 2, 1, "velocity", V=u_prescribed[2]) ?>
}

CudaDeviceFunction void EVelocity()
{
    <?R ZouHe(EQ, 1, -1, "velocity", V=u_prescribed[1]) ?>
}

CudaDeviceFunction void WVelocity()
{
    <?R ZouHe(EQ, 1, 1, "velocity", V=u_prescribed[1]) ?>
}

CudaDeviceFunction void FVelocity()
{
    <?R ZouHe(EQ, 3, -1, "velocity", V=u_prescribed[3]) ?>
}

CudaDeviceFunction void BVelocity()
{
    <?R ZouHe(EQ, 3, 1, "velocity", V=u_prescribed[3]) ?>
}


CudaDeviceFunction void PressureExitN()
{
    real_t u[3], d, eq_local[27], eq_neigh[27], usq;
    const int adjY = -1; 
    
    <?R 
    fpop = PV(paste("f",1:27-1,"(0,adjY,0)",sep=""))
    d=PV("d") 
    C(d, sum(fpop)) 
    

    ZouHe(EQ,2,-1,"pressure")

    ?>
}

CudaDeviceFunction void PressureExitS()
{
    real_t u[3], d, eq_local[27], eq_neigh[27], usq;
    const int adjY = 1; 
    
    <?R 
    fpop = PV(paste("f",1:27-1,"(0,adjY,0)",sep=""))
    d=PV("d") 
    C(d, sum(fpop)) 
    

    ZouHe(EQ,2,1,"pressure")

    ?>
}

CudaDeviceFunction void PressureExitE()
{
    real_t u[3], d, eq_local[27], eq_neigh[27], usq;
    const int adjX = -1; 
    
    <?R 
    fpop = PV(paste("f",1:27-1,"(adjX,0,0)",sep=""))
    d=PV("d") 
    C(d, sum(fpop)) 
    

    ZouHe(EQ,1,-1,"pressure")

    ?>
}

CudaDeviceFunction void PressureExitW()
{
    real_t u[3], d, eq_local[27], eq_neigh[27], usq;
    const int adjX = 1; 
    
    <?R 
    fpop = PV(paste("f",1:27-1,"(adjX,0,0)",sep=""))
    d=PV("d") 
    C(d, sum(fpop)) 
    

    ZouHe(EQ,1,1,"pressure")

    ?>
}

CudaDeviceFunction void PressureExitF()
{
    real_t u[3], d, eq_local[27], eq_neigh[27], usq;
    const int adjZ = -1; 
    
    <?R 
    fpop = PV(paste("f",1:27-1,"(0,0,adjZ)",sep=""))
    d=PV("d") 
    C(d, sum(fpop)) 
    

    ZouHe(EQ,3,-1,"pressure")

    ?>
}

CudaDeviceFunction void PressureExitB()
{
    real_t u[3], d, eq_local[27], eq_neigh[27], usq;
    const int adjZ = 1; 
    
    <?R 
    fpop = PV(paste("f",1:27-1,"(0,0,adjZ)",sep=""))
    d=PV("d") 
    C(d, sum(fpop)) 
    

    ZouHe(EQ,3,1,"pressure")

    ?>
}

CudaDeviceFunction void MovingNWall()
{
        f[1]  = f[3];
        f[16] = f[17];
        f[18] = f[15];

        f[21]  = f[24] + VelocityX/36.0;
        f[25] = f[20]  + VelocityX/36.0;
        f[9] = f[8] + VelocityX/9.0;

        f[22] = f[23] - VelocityX/36.0;
        f[26]= f[19]  - VelocityX/36.0;
        f[10] = f[7] - VelocityX/9.0;
}

CudaDeviceFunction void MovingSWall(){
        f[3]  = f[4];
        f[17] = f[16];
        f[15] = f[18];

        f[24] = f[21]  - VelocityX/36.0;
        f[20]  = f[25] - VelocityX/36.0;
        f[8] = f[9] - VelocityX/9.0;

        f[23] = f[22] + VelocityX/36.0;
        f[19]  = f[26] + VelocityX/36.0;
        f[7] = f[10] + VelocityX/9.0;
}


CudaDeviceFunction void CalcEquilibrium(real_t f_tab[27], real_t d, real_t u[3])
{
<?R
    EQ = MRT_eq(U, d, d*u, ortogonal=FALSE);
	f_tmp = PV("f_tab[",1:27-1,"]")
	C(f_tmp, EQ$Req %*% solve(EQ$mat));
?>
}

<?R if (Options$particles) { ?>

CudaDeviceFunction void CalcF() {
    real_t u[3], d;
   
    real_t AccelX = aX_mean + aX_amp*sin(Time*2*PI*aX_freq);

<?R
	d = PV("d")
	u = PV("u[",1:3-1,"]")
	uP = PV("uP",c("x","y","z"))
	a = PV("Accel", c("X", "Y", "Z"))
	f = PV("f[",1:27-1,"]")
	sol = PV("sol")

	C( d, sum(f) )
	C( u, f %*% U * d^{-1} + a*0.5 )
	C( uP, 0)
	C( sol, 0)
?>
	for (auto p : SyncParticleIterator(X,Y,Z)) {

        real_t dist = sqrt(p.diff.x*p.diff.x + p.diff.y*p.diff.y + p.diff.z*p.diff.z);
                    
        if ((dist - p.rad)<SQRT_3) {

            real_t localCoverage = 0.0;

            if ((dist - p.rad) < -1.0){
                localCoverage = 1.0;
            } else{
                localCoverage = (p.rad -  0.084/p.rad + 0.5 - dist);
            }

            if (localCoverage > 1.0){ localCoverage =  1.0;}
            if (localCoverage < 0.0){ localCoverage =  0.0;}

            <?R if (Options$KL) { ?>
            
                real_t omegaF_tmp = 1.0/(3.0*nu_app+0.5); //From previous timestep
                localCoverage = localCoverage*(1.0/omegaF_tmp - 0.5) / ((1 - localCoverage) + 1.0/omegaF_tmp - 0.5);
            
            <?R } else { ?>

                localCoverage = localCoverage*(1.0/omegaF - 0.5) / ((1 - localCoverage) + 1.0/omegaF - 0.5); 

            <?R } ?>

            vector_t force;
<?R
            uparticle = PV("p.cvel.",c("x","y","z"))
            force = PV("force.",c("x","y","z"))
            localCoverage = PV("localCoverage")
            C( force, d*localCoverage*(u - uparticle) )
?>
            p.applyForce(force);
<?R
            C( sol, sol + localCoverage )
            C( uP, uP + localCoverage*uparticle )
?>
        }
             
    }

	if (sol > 1.0) { sol =  1.0; }
	if (sol > 1.0e-8) {
<?R C( uP, uP*sol^{-1} ) ?>
	} else {
<?R
	C(uP, 0)
	C(sol, 0)
?>
	}
}
<?R } ?>

CudaDeviceFunction void Collision_PSM() {
	real_t u[3], d, R[27];

    real_t AccelX = aX_mean + aX_amp*sin(Time*2*PI*aX_freq);

<?R
	d = PV("d")
    u = PV("u[",1:3-1,"]")
    uP = PV("uP",c("x","y","z"))
    a = PV("Accel", c("X", "Y", "Z"))
	R = PV("R[",1:27-1,"]")

	M = MRT_polyMatrix(U)$mat

	RL = R
	R[1] = d
	R[2:4] = (u-a*0.5)*d
	EQ   = MRT_eq(U, d, u*d, ortogonal=FALSE, mat=M);
	EQ_P = MRT_eq(U, d, uP*d, ortogonal=FALSE, mat=M)
	
    F = ((a %*% t(U)) + (1/c_squ)*(a %*% t(U))*(u %*% t(U)) - (u %*% a)) * diag(tn)*(1/c_squ)*d
    feq = EQ$Req %*% solve(EQ$mat)
    feqP = EQ_P$Req %*% solve(EQ_P$mat)

	B = solve(EQ$mat, EQ$mat[bounce+1,]) # Bounce-back matrix

	omegaF1 = PV(c("omegaF1"))
	omegaP1 = PV(c("omegaP1"))
	omegaF_tmp = PV(c("omegaF_tmp"))
	
    omegaF_tmp = 1.0 - omegaF1;
	
    C( RL, f %*% EQ$mat)
	C( d, RL[1])
	C( u, RL[2:4]*d^{-1} + a*0.5)
?>
    AddToTotalFluidMomentumX(d*u[0]);
    AddToTotalFluidMomentumY(d*u[1]);
    AddToTotalFluidMomentumZ(d*u[2]); 
    AddToTotalFluidMass(d); 
    AddToTotalFluidVolume(1);

<?R if (Options$KL) { ?>

    real_t deq[27], fneq[27];
<?R
    deq = PV(paste("deq[",1:27-1,"]",sep=""))
    fneq = PV(paste("fneq[",1:27-1,"]",sep=""))

    for (i in 1:27) {
        C(deq[i],f[i])
    }
?>
    CalcEquilibrium(deq, d, u); // calculates non-forced equilibrium and stores in deq
<?R
    for (i in 1:27) {
        C(fneq[i], f[i]-deq[i])
    }
?>
    real_t Dxx = <?R C((U[,1] * U[,1]) %*% fneq)?> ;
    real_t Dyy = <?R C((U[,2] * U[,2]) %*% fneq)?> ;
    real_t Dzz = <?R C((U[,3] * U[,3]) %*% fneq)?> ;
    real_t Dxy = <?R C((U[,1] * U[,2]) %*% fneq)?> ;
    real_t Dyz = <?R C((U[,2] * U[,3]) %*% fneq)?> ;
    real_t Dzx = <?R C((U[,3] * U[,1]) %*% fneq)?> ;

    // Traceless part for deformation strain

    if (Strain_Dim == 3) {
        Dxx = Dxx - (Dxx+Dyy+Dzz)/3.;
        Dyy = Dyy - (Dxx+Dyy+Dzz)/3.;
        Dzz = Dzz - (Dxx+Dyy+Dzz)/3.;
    } else if (Strain_Dim == 2) {
        Dxx = Dxx - (Dxx+Dyy)/2.;
        Dyy = Dyy - (Dxx+Dyy)/2.;
    }

    real_t sqrtSS = sqrt(2.0* (Dxx*Dxx + Dyy*Dyy + Dzz*Dzz + 2.0*(Dxy*Dxy + Dyz*Dyz + Dzx*Dzx)) ); // Second Invariant of deformation strain tensor; sqrt(2(S:S))

    real_t omegaF_tmp = 1.0/(3.0*nu_app+0.5); //From previous timestep
    real_t nu_cutoff = eta1 + (sigmaY/sLim + eta2*(pow(sLim,(n-1))))*(1.0 - exp(-m*sLim)); //KL
    real_t nu_inf = eta1 + sigmaY * m; // Same for both Bingham and KL

    real_t gamma_dot_old;
    gamma_dot = (1.5 * omegaF_tmp / d) * sqrtSS;

    real_t Iter = 0;
    do {                //Iterate nu_app(gamma_dot) and gamma_dot(nu_app) until convergence
        gamma_dot_old = gamma_dot;

        if (gamma_dot <= sLim) {
            nu_app = nu_inf*(1-gamma_dot/sLim) + nu_cutoff*gamma_dot/sLim;
        } else {
            nu_app = eta1 + (eta2*(pow(gamma_dot,(n-1))) + sigmaY/gamma_dot) * (1.0 - exp(-m*gamma_dot)); // KL
        }
        omegaF_tmp = 1.0/(3.0*nu_app+0.5);
        gamma_dot = (1.5 * omegaF_tmp / d) * sqrtSS;
        Iter += 1;
    } while ( Iter < MaxIter && abs((gamma_dot - gamma_dot_old)/gamma_dot_old) > 1e-7 );

<?R } else { ?>
    
    real_t omegaF_tmp = omegaF;

<?R } ?>

	real_t omegaF1 = 1.0-omegaF_tmp;

    <?R
        if (Options$TRT) {
    ?>
            real_t omegaP = 1.0/(Lambda/(1.0/omegaF_tmp-0.5)+0.5);
            real_t omegaP1 = 1.0-omegaP;
    <?R
            omegaP = 1.0 - omegaP1;
            omega = V(omegaF_tmp,omegaP)[EQ$order %% 2 + 1]
        } else {
            omega = omegaF_tmp
        }

    if (Options$NEBB) {
        RomegaS =  R %*% B - R + EQ_P$Req - EQ$Req %*% B #Non-eq bounceback operator
        sol = PV("sol")
    } else if (Options$SUP){
        RomegaS =  EQ_P$Req - R + (1.0 - omegaF_tmp)*(R - EQ$Req) #Superposition operator
        sol = PV("sol")
    } else {
        RomegaS = 0
        sol = 0
    }

	C( RL, R + (1.0-sol)*(omega*(EQ$Req - R) + (1.0 - omega*0.5)*(F %*% EQ$mat)) + sol*RomegaS)
	C( f, RL %*% solve(EQ$mat))
?>
    switch (NodeType & NODE_ADDITIONALS) {
        case NODE_RegionMeasureX:
            AddToFlowRateX(u[0]);
        case NODE_RegionMeasureY:
            AddToFlowRateY(u[1]);
        case NODE_RegionMeasureZ:
            AddToFlowRateZ(u[2]);
        case NODE_PressureMeasure:
            AddToPressureGauge(getRho());
    }
}

CudaDeviceFunction float2 Color() {
        float2 ret;
        vector_t u = getU();
        ret.x = sqrt(u.x*u.x + u.y*u.y);
	if (NodeType == NODE_Wall) ret.y = 0; else ret.y= 1;
        return ret;
}

<?R if (Options$KL) { ?>
    
    CudaDeviceFunction real_t getNu_app() {
        return nu_app;
    }

    CudaDeviceFunction real_t getShear() {
        return gamma_dot;
    }

    CudaDeviceFunction real_t getStress() {
        return gamma_dot * nu_app;
    }

    CudaDeviceFunction real_t getYieldStatus() {
        if (NodeType == NODE_Wall) {
            return 0.0;
        } else  if ((gamma_dot*nu_app <= sigmaY)) {
            if (gamma_dot <= sLim) {
                return -0.8;
            } else {
                return -1.0;
            }
        } else if (abs(sigmaY - gamma_dot*nu_app)/sigmaY < 0.001) {
            return 0.8;
        } else {
            return 1.0;
        }
    }
<?R } ?>
