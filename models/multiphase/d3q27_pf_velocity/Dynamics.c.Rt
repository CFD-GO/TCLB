<?R
    source("conf.R")
    c_header();
    source("lib/feq.R")
    source("lib/boundary.R")
	source("model.R")
?>
// 04/02/2017 - Model Developed: A. Fakhari, T. Mitchell
//    Extension to 3D from:
// """" A roust phase-field lattice Boltzmann model
//		for immiscible fluids at high density ratios """"
//
// Maintainer: Travis-Mitchell @TravisMitchell

// Major code updates:
//		01/04/2017: Initial implementation 
//			    Plan is d3q27 for hydrodynamics
//			    and d3q15 for interface dynamics
//		08/04/2017: Verification and validation 
//				- Layered Poiseuille flow
//				- Rayleigh Taylor up to water-air like properties and Re=3000
//				- Validated with air Taylor bubble rising through olive oil
//				  experiment by Bugg et al. (2002)
//		14/08/2017: Look to improve readability by incorporating more R code
//				- e.g. for MRT operations etc.
//		12/12/2017: Model updated for inclusion in v6.2
//				- MRT collision updated to moment space
//				- Symmetry bounds removed, autosym added to options
//				- BGK made option
//		21/03/2018: Fix of solid contact
//				- Previous issue with bulk solid regions i.e. solid cells
//				  surrounded by all solid nodes
//				- Check added for these cases to stop nan appearances
//		28/04/2020: Added thermocapillary effects option
//		07/04/2021: Code clean up
//				- thermocapillary moved to the bottom of the file to separate
//				- forces broken up into individual functions, set up so that additional
//				  physics can be added simply if only a force needs to be altered
// 				- edge case for wall phase calculation in which normal direction points
//				  towards a solid node was found. Temporary fix by setting this to a 
//				  reasonable value (1) has been made - this is not ideal... 
//		xx/xx/2022: Extension of phase field to d3q27 option to move away from crappy q15 lattice.
//		xx/xx/2022: Development of geometric wetting B.C. option as well as existing surface energy.
//		xx/xx/2023: Code extension for wetting on curved boundaries. 

#include <math.h>
#define PI 3.14159265
#define cs2 0.33333333
#ifdef OPTIONS_q27
#define hPops 27 
#else
#define hPops 15
#endif

<?R
###################################################
# Get functions to define outputs indicated in .R #
###################################################
?>
CudaDeviceFunction real_t getRho(){
	if ( IamWall || IamSolid) {
		return 0.0;
	} else {
		real_t current_phase = getPhaseField();
		return Density_l + (Density_h-Density_l) * (current_phase - PhaseField_l)/(PhaseField_h - PhaseField_l);
	}
}

CudaDeviceFunction real_t getPhaseField(){
	return PhaseF(0,0,0);
}

CudaDeviceFunction vector_t getU(){
	vector_t u;
	if ( IamWall || IamSolid ) {
		u.x = 0.0; u.y = 0.0; u.z = 0.0;
	} else {
		u.x = U; u.y = V; u.z = W;
	}
	return u;
}

CudaDeviceFunction real_t getPstar(){
	return <?R C(sum(g)) ?>;
}

CudaDeviceFunction real_t getP(){
	real_t d = getRho();
	real_t pstar = getPstar();
	return pstar*d*cs2;
}

CudaDeviceFunction vector_t getNormal(){
	vector_t n = {nw_x, nw_y, nw_z};
	return n;
}

<?R
###################################################
# Miscellaneous helper functions used in the code #
###################################################
?>
/*
	This function uses isotropic gradient stencils to return
	the gradient of the phase field variable \phi.
*/
CudaDeviceFunction vector_t calcGradPhi()
{
	vector_t gradPhi = {0.0,0.0,0.0};
	#ifdef OPTIONS_OutFlow
		if ((NodeType & NODE_BOUNDARY) == NODE_ENeumann || (NodeType & NODE_BOUNDARY) == NODE_EConvect) {
			gradPhi.x = 0.0;
			gradPhi.y = 16.00 * (PhaseF(0,1,0) - PhaseF(0,-1,0))
						+ 2.0*(PhaseF(-1,1,1) - PhaseF(-1,-1,1)
						+ PhaseF(-1,1,-1)- PhaseF(-1,-1,-1))
						+  4.00 * (2.0*( PhaseF(-1,1,0) - PhaseF(-1,-1,0))
							+  PhaseF(0,1,1) - PhaseF(0,-1,1) + PhaseF(0,1,-1) - PhaseF(0,-1,-1));
			gradPhi.z = 16.00 * (PhaseF(0,0,1) - PhaseF(0,0,-1))
						+ 2.0*( PhaseF(-1,1,1) + PhaseF(-1,-1,1)
						-  PhaseF(-1,1,-1)- PhaseF(-1,-1,-1))
						+  4.00 * (2.0*( PhaseF(-1,0,1) - PhaseF(-1,0,-1))
							+  PhaseF(0,1,1) + PhaseF(0,-1,1) - PhaseF(0,1,-1) - PhaseF(0,-1,-1));
		} else if ((NodeType & NODE_BOUNDARY) == NODE_WNeumann || (NodeType & NODE_BOUNDARY) == NODE_WConvect) {
			gradPhi.x = 0.0;
			gradPhi.y = 16.00 * (PhaseF(0,1,0) - PhaseF(0,-1,0))
						+ 2.0*(PhaseF(1,1,1) - PhaseF(1,-1,1)
						+ PhaseF(1,1,-1)- PhaseF(1,-1,-1))
						+  4.00 * (2.0*( PhaseF(1,1,0) - PhaseF(1,-1,0))
							+  PhaseF(0,1,1) - PhaseF(0,-1,1) + PhaseF(0,1,-1) - PhaseF(0,-1,-1));
			gradPhi.z = 16.00 * (PhaseF(0,0,1) - PhaseF(0,0,-1))
						+ 2.0*( PhaseF(1,1,1) + PhaseF(1,-1,1)
						-  PhaseF(1,1,-1)- PhaseF(1,-1,-1))
						+  4.00 * (2.0*( PhaseF(1,0,1) - PhaseF(1,0,-1))
							+  PhaseF(0,1,1) + PhaseF(0,-1,1) - PhaseF(0,1,-1) - PhaseF(0,-1,-1));
		} else if ((NodeType & NODE_BOUNDARY)) {
			gradPhi.x = 0.0;gradPhi.y = 0.0;gradPhi.z = 0.0;
		} else {	
			<?R
				IsotropicGrad('gradPhi', 'PhaseF')
			?>
		}
	#else
		    <?R
			IsotropicGrad('gradPhi', 'PhaseF')
		    ?>
	#endif	
	return gradPhi;
}

/*
	This function is run as the second stage of each action and fills
	the iteration buffer with updated values of PhaseF.
*/
CudaDeviceFunction void calcPhaseF()
{
	updateBoundary();
	// NOTE: On the wall we want to take the previous value of the phase field, because
	// it might be needed for calculation of the gradient
	if (!( IamWall || IamSolid )) {
		PhaseF = <?R C(sum(h))?>;
	} else {
		PhaseF = PhaseF(0,0,0);
	}
}

/*
	Calculate the chemical potential, mu
	Eqn. 5 in: Improved locality of the phase-field lattice-Boltzmann model 
	for immiscible fluids at high density ratios
*/
CudaDeviceFunction real_t calcMu(real_t C)
{
	real_t pfavg, lpPhi, mu;
	pfavg = 0.5*(PhaseField_l+PhaseField_h);
	#ifdef OPTIONS_OutFlow
		if ((NodeType & NODE_BOUNDARY) == NODE_ENeumann || (NodeType & NODE_BOUNDARY) == NODE_EConvect) { 
			lpPhi = 16.0 *( 2.0* PhaseF(-1,0,0)
						+ (PhaseF(0,1,0)) + (PhaseF(0,-1,0))
						+ (PhaseF(0,0,1)) + (PhaseF(0,0,-1)))
					+ 1.0 *(  2.0*(PhaseF(-1,1,1)
						+ (PhaseF(-1,-1,1))
							+ (PhaseF(-1,1,-1))
							+ (PhaseF(-1,-1,-1))))
					+ 4.0 *(2.0*( (PhaseF(-1,1,0))
						+ (PhaseF(-1,-1,0))
						+ (PhaseF(-1,0,1))
						+ (PhaseF(-1,0,-1)))
						+ (PhaseF(0,1,1)) + (PhaseF(0,-1,1))
						+ (PhaseF(0,1,-1))+ (PhaseF(0,-1,-1)))
				- 152.0 * PhaseF(0,0,0);
		} else if ((NodeType & NODE_BOUNDARY) == NODE_WNeumann || (NodeType & NODE_BOUNDARY) == NODE_WConvect) { 
			lpPhi = 16.0 *( 2.0* PhaseF(1,0,0)
						+ (PhaseF(0,1,0)) + (PhaseF(0,-1,0))
						+ (PhaseF(0,0,1)) + (PhaseF(0,0,-1)))
					+ 1.0 *(  2.0*(PhaseF(1,1,1)
						+ (PhaseF(1,-1,1))
							+ (PhaseF(1,1,-1))
							+ (PhaseF(1,-1,-1))))
					+ 4.0 *(2.0*( (PhaseF(1,1,0))
						+ (PhaseF(1,-1,0))
						+ (PhaseF(1,0,1))
						+ (PhaseF(1,0,-1)))
						+ (PhaseF(0,1,1)) + (PhaseF(0,-1,1))
						+ (PhaseF(0,1,-1))+ (PhaseF(0,-1,-1)))
				- 152.0 * PhaseF(0,0,0);
		} else if ((NodeType & NODE_BOUNDARY)) {
			// If single phase inlet/outlet, dont want periodic bounds
			// to interfere - can cause waves/instabilities
			lpPhi = 0.0;
		} else {
			<?R
				myLaplace('lpPhi', 'PhaseF')
			?>
		}
	#else
			<?R
				myLaplace('lpPhi', 'PhaseF')
			?>
	#endif
	#ifdef OPTIONS_thermo
		mu = 4.0*(12.0*SurfaceTension(0,0,0)/IntWidth)*(C-PhaseField_l)*(C-PhaseField_h)*(C-pfavg)
			- (1.5 *SurfaceTension(0,0,0)*IntWidth) * lpPhi;
	#else
		mu = 4.0*(12.0*sigma/IntWidth)*(C-PhaseField_l)*(C-PhaseField_h)*(C-pfavg)
			- (1.5 *sigma*IntWidth) * lpPhi;
	#endif
	return mu;
}

/*
	Eqn. 10 in: Improved locality of the phase-field lattice-Boltzmann model 
	for immiscible fluids at high density ratios
*/
CudaDeviceFunction real_t calcGamma(int i, real_t u, real_t v, real_t w, real_t u2mag)
{
	real_t gamma, tmp;
	tmp = (d3q27_ex[i]*u+d3q27_ey[i]*v+d3q27_ez[i]*w);

	gamma = wg[i] * (1 + 3.0*(tmp) + 4.5*(tmp*tmp) - 1.5*(u2mag)) ;
	return gamma;
}

/*
	Eqn. 7 in: Improved locality of the phase-field lattice-Boltzmann model 
	for immiscible fluids at high density ratios
*/
CudaDeviceFunction real_t calcF_phi(int i, real_t tmp1, real_t nx, real_t ny, real_t nz)
{
	real_t f_phi;
	#ifdef OPTIONS_q27
		f_phi = wg[i] * tmp1 * (d3q27_ex[i]*nx + d3q27_ey[i]*ny + d3q27_ez[i]*nz);
	#else
		f_phi = wh[i] * tmp1 * (d3q27_ex[i]*nx + d3q27_ey[i]*ny + d3q27_ez[i]*nz);
	#endif
	return f_phi;
}

/*	INITIALISATION:	*/
CudaDeviceFunction void Init() 
{
	PhaseF = PhaseField;
	specialCases_Init();
	if ( IamWall || IamSolid ) PhaseF = -999;

	if (developedFlow > 0.1) {
		U = 6.0 * Uavg * Y*(HEIGHT - Y)/(HEIGHT*HEIGHT);
		V = 0.0;
		W = 0.0;
	} else if ( developedPipeFlow_X > 0.1 ){
		U = 2.0 * Uavg * (1 - pow( (sqrt(pow((Y-pipeCentre_Y),2) + pow((Z-pipeCentre_Z),2)) / pipeRadius),2));
		V = 0.0;
		W = 0.0;
	} else {
		U = VelocityX;	V = VelocityY;	W = VelocityZ;
	}

	pnorm = 0.0; // initialise as zero and fill in later stage
}

CudaDeviceFunction void InitFromFieldsStage()
{
	PhaseF = Init_PhaseField_External;
	U = Init_UX_External;
	V = Init_UY_External;
	W = Init_UZ_External;
	if ( IamWall || IamSolid ) PhaseF = -999;
	pnorm = 0.0; // initialise as zero and fill in later stage
}

CudaDeviceFunction void specialCases_Init()
{
	#ifdef OPTIONS_thermo
		Temp   = T_init;
		if (fabs(dT) > 0){
			Temp = T_init + dT*Y;
		}
		if (fabs(dTx) > 0){
			Temp = T_init + dTx*X;
		}
		#ifdef OPTIONS_planarBenchmark
			if ( (NodeType & NODE_ADDITIONALS) == NODE_BWall) { //bottom wall
				real_t x, omega;
				x = (X-0.5) - myL;
				omega = 3.1415926535897 / myL;
				Temp = T_h + T_0 * cos(omega * x);
				printf("y,x=%.4lf,%.4lf\n", Y,x);
			} else if ( (NodeType & NODE_ADDITIONALS) == NODE_TWall) {
				Temp = T_c;
				printf("y,x=%.4lf,%.4lf\n", Y, X);
			}
			PhaseF = 0.5 + PLUSMINUS * (0.5) * tanh( (Y - MIDPOINT)/(IntWidth/2) );
		#endif
		if (surfPower > 1) {
			SurfaceTension = sigma + sigma_TT*pow((Temp(0,0,0) - T_ref),surfPower) * (1.0/surfPower);
		} else {
			SurfaceTension = sigma + sigma_T*(Temp(0,0,0) - T_ref);
		}
		Cond = interp(PhaseF, k_h, k_l);
	#endif											
	// Pre-defined Initialisation patterns:
	// Diffuse interface sphere
	   // BubbleType = -1 refers to light fluid bubble.
        if ( Radius > 0 ){ 
                real_t Ri;
                Ri = sqrt( (X - CenterX)*(X - CenterX) + (Y - CenterY)*(Y - CenterY) + (Z - CenterZ)*(Z - CenterZ) );
                PhaseF = 0.5*(PhaseField_h + PhaseField_l)
                       - 0.5*(PhaseField_h - PhaseField_l) * BubbleType * tanh(2 * (Ri - Radius)/IntWidth);
        }	
 	// Rayleigh-Taylor Instability
	    // Initialises with a sharp interface
	if (RTI_Characteristic_Length > 0){
		real_t d = RTI_Characteristic_Length;
		real_t ycutoff;
        if (pseudo2D > 0.5){
			ycutoff = 2.0*d + 0.1*d*(cos(2.0*PI*X/d));
        } else {
			ycutoff = 2.0*d + 0.05*d*(cos(2.0*PI*X/d) + cos(2.0*PI*Z/d));
		}
		if (Y < ycutoff) {PhaseF = 0.0; }
		else             {PhaseF = 1.0;	}
	}
    // Annular Taylor bubble set up
	if ( DonutTime > 0){
		real_t intLocation = Donut_D * 
					sqrt( pow(Donut_h,2) 
					    - pow( DonutTime - sqrt(pow(Y-CenterY,2) + pow(Z-CenterZ,2)), 2) );
		real_t shifter = atan2( (Z-CenterZ), (Y-CenterY));
		if (shifter < 0) shifter = shifter + 2*PI;
		if (  (X < Donut_x0 + intLocation*sin(shifter/2)) && (X > Donut_x0 - intLocation) )
		{
			PhaseF = 0.0;
		} else {
			PhaseF = 1.0;
		}
	}
    // Washburn Law test setup
    if ((Washburn_start > 0) && (Washburn_end > 0) ) {
		PhaseF = 1 - 0.5 *  ( tanh( 2.0 * ( X - Washburn_start ) / IntWidth ) -
						   tanh( 2.0 * ( X - Washburn_end  )  / IntWidth ));
	}
}

CudaDeviceFunction void Init_distributions()
{
	// Initialise phase variables:
	int i;
	real_t C0 = 0.5*(PhaseField_h - PhaseField_l);
	PhaseF = PhaseF(0,0,0);
	real_t d = Density_l + (Density_h-Density_l) * (PhaseF - PhaseField_l)/(PhaseField_h - PhaseField_l);
    pnorm = Pressure / (d*cs2);

	// Gradients and phasefield normals:
	real_t nx, ny, nz, magnPhi;
	vector_t gradPhi = calcGradPhi();
	magnPhi = sqrt(gradPhi.x*gradPhi.x + gradPhi.y*gradPhi.y + gradPhi.z*gradPhi.z);

	#ifdef OPTIONS_geometric
		gradPhiVal_x = gradPhi.x;
		gradPhiVal_y = gradPhi.y;
		gradPhiVal_z = gradPhi.z;
	#endif
	if (magnPhi < minGradient){
		nx=0.0; ny=0.0; nz=0.0;
	} else {
		nx = gradPhi.x/magnPhi;
		ny = gradPhi.y/magnPhi;
		nz = gradPhi.z/magnPhi;
	}

	U = U(0,0,0);
	V = V(0,0,0);
	W = W(0,0,0);

	real_t mag = U*U + V*V + W*W;
	real_t Gamma[27];
	// ##### heq
	real_t F_phi[hPops]; 
	real_t tmp1 = (1.0 - 4.0*(PhaseF - C0)*(PhaseF - C0))/IntWidth;
	for (i=0; i< 27; i++){
		Gamma[i] = calcGamma(i, U, V, W, mag);
		if (i < hPops) F_phi[i] = calcF_phi(i, tmp1, nx, ny, nz);
	}

	<?R
    if (Options$q27){
	#	C(h, w_h * phase * gammah - 0.5 * Fphi)
		C(h, phase * gammah )
    } else {
		C(h, w_h * phase * gammah )
    }
	?>
		
	// ##### geq
	<?R
		w_g = PV(c(paste("wg[",1:27-1,"]",sep="")))
		press = PV("pnorm")
		C(g, press*w_g + (gammag-w_g) )
	?>
        pnorm  = <?R C(sum(g)) ?>;
		PhaseF = <?R C(sum(h)) ?>;
	#ifdef OPTIONS_thermo
		Temp   = Temp(0,0,0);
		Cond   = interp(PhaseF, k_h, k_l);
	#endif
	#ifdef OPTIONS_OutFlow
			if ((NodeType & NODE_BOUNDARY) == NODE_EConvect){
					<?R if (Options$OutFlow){
							C(g_old, g)
							C(h_old, h)     }       ?>
			}
	#endif
}

CudaDeviceFunction void UpdateGlobalMarkers()
{
	if (IsSpecialBoundaryPoint) {
		AddToNumSpecialPoints(1);
	}

	if ( IamWall || IamSolid ) {
		real_t a, h, pf_f;

		h = 0.5 * sqrt(nw_x*nw_x + nw_y*nw_y + nw_z*nw_z);

        real_t am_i_surrounded = h < 0.001;

        if (! am_i_surrounded) {
          AddToNumWallBoundaryPoints(1);
        }

        AddToNumBoundaryPoints(1);
    }

    if (IamCOLLISION){
      AddToNumFluidCells(1);
    }
}

/*	ITERATION:	*/
CudaDeviceFunction void Run() 
{
	IsBoundary = IsBoundary(0,0,0); // propagate it into the next iteration
	UpdateGlobalMarkers();

    if ((NodeType & NODE_ADDITIONALS) == NODE_Smoothing) {
		// If desired, incorporate a smoothing stage, in this we simply let diffusion occur
		Init_distributions();
    } else {
        updateBoundary();	
		#ifdef OPTIONS_BGK
			if (NodeType & NODE_BGK) {
				CollisionBGK();
		}
		#else
			if (NodeType & NODE_MRT)
			{
				CollisionMRT();
			} 
		#endif
	}
        pnorm  = <?R C(sum(g)) ?>;
}

CudaDeviceFunction real_t calcTau(real_t pf)
{
	real_t tau;
	if ( pf < PhaseField_l){
		tau = tau_l + 0.5;
	} else if (pf > PhaseField_h) {
		tau = tau_h + 0.5;
	} else {
	    if (tauUpdate == 1) { // Linear update:
            tau = 0.5 + tau_l + (pf-PhaseField_l)*(tau_h - tau_l)/(PhaseField_h - PhaseField_l);
        } else if (tauUpdate == 2){ // Inverse update:
		    tau = (pf - PhaseField_l)/(PhaseField_h - PhaseField_l) * (1.0/tau_h - 1.0/tau_l) + 1.0/tau_l;
		    tau = 1.0/tau + 0.5;
			// NOTE: For some reason Viscosity_h and Viscosity_l are set to zero. Deduce it from tau here
			// instead for tauUpdate 3 and tauUpdate 4
        } else if (tauUpdate == 3){	// Viscosity update:
		    real_t DynVisc = Density_l*tau_l / 3.0 + pf * (tau_h*Density_h/3.0 - Density_l*tau_l/3.0);
            real_t rho = getRho();
		    tau = 3.0 * DynVisc / rho + 0.5;
        } else if (tauUpdate == 4) { // update from Zu-He 2013
			real_t mu_l = Density_l * tau_l / 3.0;
			real_t mu_h = Density_h * tau_h / 3.0;
		    real_t DynVisc = mu_l * mu_h * (PhaseField_h - PhaseField_l) / ((pf - PhaseField_l)*mu_l  + (PhaseField_h - pf)*mu_h);
            real_t rho = getRho();
			tau = 3.0 * DynVisc / rho + 0.5;
		} else { // default to linear...
            tau = 0.5 + tau_l + (pf-PhaseField_l)*(tau_h - tau_l)/(PhaseField_h - PhaseField_l);
        }
	}
	return tau;
}

CudaDeviceFunction void calc_Fp(real_t *fx, real_t *fy, real_t *fz, real_t pressure, vector_t gPhi){
	*fx = (-1.0/3.0) * pressure * (Density_h-Density_l) * gPhi.x;
	*fy = (-1.0/3.0) * pressure * (Density_h-Density_l) * gPhi.y;
	*fz = (-1.0/3.0) * pressure * (Density_h-Density_l) * gPhi.z;
}

CudaDeviceFunction void calc_Fb(real_t *fx, real_t *fy, real_t *fz, real_t rho){
    *fx = (Density_h-rho)*BuoyancyX + rho*GravitationX;
	*fy = (Density_h-rho)*BuoyancyY + rho*GravitationY;
	*fz = (Density_h-rho)*BuoyancyZ + rho*GravitationZ;
}

CudaDeviceFunction void calc_Fs(real_t *fx, real_t *fy, real_t *fz, real_t mu, vector_t gPhi){
	#ifdef OPTIONS_thermo
		Temp = Temp(0,0,0);
		SurfaceTension = SurfaceTension(0,0,0);
		Cond = Cond(0,0,0);
		real_t tmpSig, delta_s, dotTMP, magnPhi, magnPhi2;
		magnPhi = sqrt(gPhi.x*gPhi.x + gPhi.y*gPhi.y + gPhi.z*gPhi.z);
		magnPhi2 = magnPhi*magnPhi;
		vector_t gradT;
		<?R
			IsotropicGrad('gradT','Temp')
		?>
		dotTMP = dotProduct(gradT,gPhi);
		if (surfPower < 2) {
			delta_s = 1.5*IntWidth*sigma_T;
			*fx = mu * gPhi.x + delta_s*( magnPhi2*gradT.x - dotTMP*gPhi.x );
			*fy = mu * gPhi.y + delta_s*( magnPhi2*gradT.y - dotTMP*gPhi.y );
			*fz = mu * gPhi.z + delta_s*( magnPhi2*gradT.z - dotTMP*gPhi.z );
		} else {
			vector_t gradSig;
			<?R
				IsotropicGrad('gradSig','SurfaceTension')
			?>
			delta_s = 1.5*IntWidth;
			*fx = mu * gPhi.x + delta_s*gradSig.x*( magnPhi2*gradT.x - dotTMP*gPhi.x );
			*fy = mu * gPhi.y + delta_s*gradSig.y*( magnPhi2*gradT.y - dotTMP*gPhi.y );
			*fz = mu * gPhi.z + delta_s*gradSig.z*( magnPhi2*gradT.z - dotTMP*gPhi.z );			
		}
	#else
		*fx = mu * gPhi.x;
		*fy = mu * gPhi.y;
		*fz = mu * gPhi.z;
	#endif
}

#ifndef OPTIONS_BGK
CudaDeviceFunction void CollisionMRT()
{
	PhaseF = PhaseF(0,0,0);
	int i, j;
	real_t C  = PhaseF;
    real_t mu = calcMu( C );
	real_t tau, DynVisc, rho, p;			// Macroscopic Properties
	vector_t n, gradPhi;					// Phase field gradients
	real_t magnPhi;							// Normals
	real_t F_pressure[3], F_body[3], F_mu[3], F_surf[3], F_total[3]; // Forces
	real_t tmp1, stress[6]={0.0,0.0,0.0,0.0,0.0,0.0};     // Stress tensor calculation
	real_t F_phi[hPops], heq[hPops];				// Phase field collision terms
	real_t F_i[27];							// Momentum distribution forcing term
	real_t m[27]; 							//MRT Details

	// Find Macroscopic Details
	rho = Density_l + (C - PhaseField_l)*(Density_h - Density_l)/(PhaseField_h - PhaseField_l);

	updateMyGlobals( C );
	
	real_t m0[27];
	<?R
		EQ = MRT_eq(U,PV(1),u,mat=t(M))
		selR = EQ$order < 10
		EQ$Req[1] = PV("p")
		EQ$feq = solve(M) %*% EQ$Req
		Omega = PV(rep(1,sum(selR)))
		Omega[5:9] = PV("tau")^(-1)
		Omega[1:4] = PV(1)
		m0 = PV("m0[",1:27-1,"]")
		C(m0[selR], (M %*% g)[selR])
		F_total = PV("F_total[",1:3-1,"]")
		rho = PV("rho")
		rho.inv = rho ^ (-1)
	?>
	p = m0[0];

	tau = calcTau( C );

	// GRADIENTS AND NORMALS
	gradPhi = calcGradPhi();
	magnPhi = sqrt(gradPhi.x*gradPhi.x + gradPhi.y*gradPhi.y + gradPhi.z*gradPhi.z);

	if (magnPhi < minGradient){
		n.x=0.0; n.y=0.0; n.z=0.0;
	} else {
		n.x = gradPhi.x/magnPhi;
		n.y = gradPhi.y/magnPhi;
		n.z = gradPhi.z/magnPhi;
	}
	//magnPhi = sqrt(gradPhi.x*gradPhi.x + gradPhi.y*gradPhi.y + gradPhi.z*gradPhi.z + 1e-2);
	//n.x = gradPhi.x/magnPhi;
	//n.y = gradPhi.y/magnPhi;
	//n.z = gradPhi.z/magnPhi;

	// CALCULATE FORCES:
    calc_Fp(&F_pressure[0], &F_pressure[1], &F_pressure[2], p, gradPhi);
	calc_Fb(&F_body[0], &F_body[1], &F_body[2], rho);
    calc_Fs(&F_surf[0], &F_surf[1], &F_surf[2], mu, gradPhi);
	//  Viscous Force:
	j = 0;
	do {	// do while loop is guaranteeing the loop will execute at least once
		j++;
	<?R
		C(m[selR], (m0 - EQ$Req)[selR] * Omega)

		stress = PV("stress[",1:6-1,"]");
		new_g = solve(M) %*% m
		C(stress[1], sum( U[,1]*U[,1] * new_g )); # XX
		C(stress[2], sum( U[,1]*U[,2] * new_g )); # XY
		C(stress[3], sum( U[,1]*U[,3] * new_g )); # XZ
		C(stress[4], sum( U[,2]*U[,2] * new_g )); # YY
		C(stress[5], sum( U[,2]*U[,3] * new_g )); # YZ
		C(stress[6], sum( U[,3]*U[,3] * new_g )); # ZZ
	?>
		F_mu[0] = (0.5-tau) * (Density_h-Density_l) * (stress[0]*gradPhi.x + stress[1]*gradPhi.y + stress[2]*gradPhi.z);
		F_mu[1] = (0.5-tau) * (Density_h-Density_l) * (stress[1]*gradPhi.x + stress[3]*gradPhi.y + stress[4]*gradPhi.z);
		F_mu[2] = (0.5-tau) * (Density_h-Density_l) * (stress[2]*gradPhi.x + stress[4]*gradPhi.y + stress[5]*gradPhi.z);
		F_total[0] = F_surf[0] + F_pressure[0] + F_body[0] + F_mu[0];
		F_total[1] = F_surf[1] + F_pressure[1] + F_body[1] + F_mu[1];
		F_total[2] = F_surf[2] + F_pressure[2] + F_body[2] + F_mu[2];

	<?R 	C( u, m0[2:4] + 0.5 * F_total * rho.inv) ?>
	} while (j<force_fixed_iterator);
	// PHASE FIELD POPULATION UPDATE:
	tmp1 = (1.0 - 4.0*(C - 0.5)*(C - 0.5))/IntWidth;
	<?R
		n = PV("n",c(".x",".y",".z"))
		EQ_h = MRT_eq(U[1:PF_velocities,],PV(1),u)
		C(heq, EQ_h$feq * PV("C"))
		EQ_h = MRT_eq(U[1:PF_velocities,],PV(1),PV(c(0,0,0)))
		if (Options$q27){
			wh = EQ_h$feq
		    EQ_h = MRT_eq(U[1:PF_velocities,],PV(1),u)
		} else {
			wh = c(rep(16/72,1),rep(8/72,6),rep(1/72,8))
        }
		C(Fphi, wh * PV("tmp1") * (U[1:PF_velocities,] %*% n))
    	C(h, h - omega * (h - heq + 0.5*Fphi) + Fphi)

		mF = PV(rep(0,27))
		mF[2:4] = F_total * rho.inv

		C(m, m0 - (m0 - EQ$Req + mF*0.5)[selR] * Omega + mF)
		C(g, invM %*% m)
	?>

    updateTrackers( C );
}
#endif

//######BOUNDARY CONDITIONS######//
<?RT models/multiphase/d3q27_pf_velocity/Boundary.c.Rt ?>
//############//

//######UPDATE FUNCTIONS#######//
CudaDeviceFunction void updateBoundary(){
    switch (NodeType & NODE_BOUNDARY) {
		case NODE_Solid:
		case NODE_Wall:
			BounceBack();
			break;
        <?R
        for (ii in 1:6){
        ?>
        case NODE_<?R C(my_velocity_boundaries[ii])?>:
			<?R C(my_velocity_boundaries[ii])?>();
			break;
		case NODE_<?R C(my_pressure_boundaries[ii])?>:
			<?R C(my_pressure_boundaries[ii])?>();
			break;
		<?R
        }
        ?>
		case NODE_MovingWall_N:
			MovingNWall();
			break;
		case NODE_MovingWall_S:
			MovingSWall();
			break;
		#ifdef OPTIONS_OutFlow
			case NODE_EConvect:
				EConvect();
				break;
			case NODE_WConvect:
				WConvect();
				break;
			case NODE_ENeumann:
				ENeumann();
				break;
			case NODE_WNeumann:
				WNeumann();
				break;
		#endif
	}
}

CudaDeviceFunction void updateMyGlobals(real_t pf){
	real_t tmpPF = 1 - pf;
	real_t rho = Density_l + ((pf) - PhaseField_l)*(Density_h - Density_l)/(PhaseField_h - PhaseField_l);
	real_t u2mag = (U*U+V*V+W*W);
	AddToTotalDensity( rho ); // Add globals of post-stream, pre-collide macroscopic globals.
	AddToKineticEnergy( rho * u2mag );

	if ( (pf) < 0.5 ) 
	{
	    AddToGasTotalVelocity( tmpPF*sqrt(u2mag));
	    AddToGasTotalVelocityX( tmpPF*U );
	    AddToGasTotalVelocityY( tmpPF*V );
	    AddToGasTotalVelocityZ( tmpPF*W );
	    AddToGasTotalPhase( tmpPF );
	    AddToXLocation( tmpPF*X );
	} else {
	    AddToLiqTotalVelocity( pf*sqrt(u2mag));
	    AddToLiqTotalVelocityX( U*pf );
	    AddToLiqTotalVelocityY( V*pf );
	    AddToLiqTotalVelocityZ( W*pf );
	    AddToLiqTotalPhase( pf );
	}

	if ((NodeType & NODE_ADDITIONALS) == NODE_flux_nodes) {
		AddToFluxNodeCount( 1 );
		AddToFluxX( U );
		AddToFluxY( V );
		AddToFluxZ( W );
	}
}

CudaDeviceFunction void updateTrackers(real_t C){
	real_t location;

	// track top of the interface in Y direction, only on actual nodes
	if ((NodeType & NODE_BGK) || (NodeType & NODE_MRT)) {
		if ( C < 0.5 && PhaseF(0, -1, 0) > 0.5) {
			location = Y - (C-0.5)/(C-PhaseF(0,-1,0));
			AddToInterfaceYTop(location);
		}
	}

	switch (NodeType & NODE_ADDITIONALS) {
		case NODE_Centerline:
		    if ( fabs(xyzTrack-1) < 1e-3 )
		    {  // track along X
                if (C < 0.5 && PhaseF(1,0,0) > 0.5)
                {
                    location = X + (C-0.5)/(C-PhaseF(1,0,0));
                    AddToInterfacePosition(location);
                    AddToVback(U);
                }
                if (C >0.5 && PhaseF(-1,0,0) < 0.5)
                {
                    AddToVfront(U);
                }
		    } else if ( fabs(xyzTrack-2) < 1e-3)
		    { // track along Y
                if (C < 0.5 && PhaseF(0,1,0) > 0.5)
                {
                    location = Y + (C-0.5)/(C-PhaseF(0,1,0));
                    AddToInterfacePosition(location);
                    AddToVback(V);
                }
                if (C >0.5 && PhaseF(0,-1,0) < 0.5)
                {
                    AddToVfront(V);
                }
		    } else if ( fabs(xyzTrack-3) < 1e-3)
		    { // track along Z
			if (C < 0.5 && PhaseF(0,0,1) > 0.5)
                {
                    location = Z + (C-0.5)/(C-PhaseF(0,0,1));
                    AddToInterfacePosition(location);
                    AddToVback(W);
                }
                if (C >0.5 && PhaseF(0,0,-1) < 0.5)
                {
                    AddToVfront(W);
                }
		    } else if ( fabs(xyzTrack-4) < 1e-3 )
		    {  // track reverse along X
                if (C < 0.5 && PhaseF(-1,0,0) > 0.5)
                {
                    location = X - (C-0.5)/(C-PhaseF(-1,0,0));
                    AddToInterfacePosition(location);
				    AddToVback(U);
			    }
            } else if ( fabs(xyzTrack-5) < 1e-3 )
		    {  // track reverse along Y (e.g. tracking north pole of the droplet
			   // as it is falling)
                if (C < 0.5 && PhaseF(0,-1,0) > 0.5)
                {
                    location = Y - (C-0.5)/(C-PhaseF(0,-1,0));
                    AddToInterfacePosition(location);
			    }
            }

		case NODE_Spiketrack:
			if (C < 0.5 && PhaseF(0,1,0) > 0.5)
			{
				location = Y + (C-0.5)/(C-PhaseF(0,1,0));
				AddToRTISpike(location);
			}
		case NODE_Saddletrack:
			if (C < 0.5 && PhaseF(0,1,0) > 0.5)
			{
				location = Y + (C-0.5)/(C-PhaseF(0,1,0));
				AddToRTISaddle(location);
			}
		case NODE_Bubbletrack:
			if (C < 0.5 && PhaseF(0,1,0) > 0.5)
			{
				location = Y + (C-0.5)/(C-PhaseF(0,1,0));
				AddToRTIBubble(location);
			}
	}
}
//#############//
//######THERMOCAPILLARY UPDATE######//
#ifdef OPTIONS_thermo
	<?RT models/multiphase/d3q27_pf_velocity/thermo.c.Rt ?>
#endif
//#############//


#ifdef OPTIONS_BGK
CudaDeviceFunction void CollisionBGK()
{
    PhaseF = PhaseF(0,0,0);
	int i, j;
	real_t C  = PhaseF; 
    real_t mu = calcMu( C );
	real_t tau, DynVisc, rho, p;			// Macroscopic Properties
	vector_t gradPhi;				// Phase field gradients
	real_t nx, ny, nz, magnPhi;			// Normals
	real_t Gamma[27], geq[27], mag;			// equilibrium, pressure equilibrium, velocity magnitude
	real_t F_surf[3], F_pressure[3], F_body[3], F_mu[3], F_total[3]; // Forces
	real_t tmp1, stress[6]={0.0,0.0,0.0,0.0,0.0,0.0};     // Stress tensor calculation
	real_t F_phi[hPops], heq[hPops];			// Phase field collision terms
	real_t F_i[27];					// Momentum distribution forcing term

	// Find Macroscopic Details
	rho = Density_l + (C - PhaseField_l)*(Density_h - Density_l)/(PhaseField_h - PhaseField_l);
	p = <?R C(sum(g)) ?>;
	tau = calcTau( C );

	updateMyGlobals( C );

	// GRADIENTS AND NORMALS
	gradPhi = calcGradPhi();
	magnPhi = sqrt(gradPhi.x*gradPhi.x + gradPhi.y*gradPhi.y + gradPhi.z*gradPhi.z + 1e-32);
	nx = gradPhi.x/magnPhi;
	ny = gradPhi.y/magnPhi;
	nz = gradPhi.z/magnPhi;

	// CALCULATE FORCES:
    calc_Fp(&F_pressure[0], &F_pressure[1], &F_pressure[2], p, gradPhi);
	calc_Fb(&F_body[0], &F_body[1], &F_body[2], rho);
    calc_Fs(&F_surf[0], &F_surf[1], &F_surf[2], mu, gradPhi);
    // VISCOUS FORCE:
    for (j=0;j<2;j++) {
    // GAMMA AND EQUILIBRIUM
        mag = U*U + V*V + W*W;
        for (i=0; i< 27; i++){
            Gamma[i] = calcGamma(i, U, V, W, mag);
            geq[i] = wg[i]*p + Gamma[i] - wg[i]; 
        }

    <?R 
        geq_bgk <- PV(paste0("geq[",1:27-1,"]")) 	
        C( geq_bgk, g - geq_bgk ) 
    ?>
            // Stress/strain Tensor
        for (i=0; i< 6 ; i++)
        {
            stress[i] = 0.0;
        }
        for (i=0; i< 27; i++){
            stress[0] += geq[i]*d3q27_ex[i]*d3q27_ex[i];
            stress[1] += geq[i]*d3q27_ex[i]*d3q27_ey[i];
            stress[2] += geq[i]*d3q27_ex[i]*d3q27_ez[i];
            stress[3] += geq[i]*d3q27_ey[i]*d3q27_ey[i];
            stress[4] += geq[i]*d3q27_ey[i]*d3q27_ez[i];
            stress[5] += geq[i]*d3q27_ez[i]*d3q27_ez[i];
        }

        F_mu[0] = (0.5-tau)/tau * (Density_h-Density_l) * (stress[0]*gradPhi.x + stress[1]*gradPhi.y + stress[2]*gradPhi.z);
        F_mu[1] = (0.5-tau)/tau * (Density_h-Density_l) * (stress[1]*gradPhi.x + stress[3]*gradPhi.y + stress[4]*gradPhi.z);
        F_mu[2] = (0.5-tau)/tau * (Density_h-Density_l) * (stress[2]*gradPhi.x + stress[4]*gradPhi.y + stress[5]*gradPhi.z);
        F_total[0] = F_surf[0] + F_pressure[0] + F_body[0] + F_mu[0];
        F_total[1] = F_surf[1] + F_pressure[1] + F_body[1] + F_mu[1];
        F_total[2] = F_surf[2] + F_pressure[2] + F_body[2] + F_mu[2];

    <?R C( u, g %*% U) ?>
        U = U + (0.5*F_total[0])/rho;
        V = V + (0.5*F_total[1])/rho;
        W = W + (0.5*F_total[2])/rho;
    }

	// PHASE FIELD POPULATION UPDATE:
	tmp1 = (1.0 - 4.0*(C - 0.5)*(C - 0.5))/IntWidth;
	for (i=0; i< hPops; i++){
		F_phi[i] = calcF_phi(i, tmp1, nx, ny, nz); 		// Forcing Terms
		heq[i] = C * Gamma[i];      	// heq
	}

	<?R	C(h, h - omega * ( h - w_h*heq + 0.5*Fphi) + Fphi) ?>

	// PRESSURE EVOLUTION UPDATE:
	for (i=0; i< 27; i++) {
		F_i[i] = 3.0*wg[i] * (F_total[0]*d3q27_ex[i] + F_total[1]*d3q27_ey[i] + F_total[2]*d3q27_ez[i])/rho;
	}
	real_t omega_g = 1.0/tau;
	<?R	
		om= PV("omega_g")
		C(g, g - (geq_bgk+0.5*Fi)*om + Fi)
	?>
    updateTrackers( C );
}
#endif

CudaDeviceFunction vector_t getA(){
	vector_t ret;
	return ret;
}
CudaDeviceFunction float2 Color() {
        float2 ret;
        vector_t u = getU();
        ret.x = PhaseF(0,0);
        if (NodeType == NODE_Solid){
                ret.y = 0;
        } else {
                ret.y = 1;
        }
        return ret;
}

/* MRT Matrix Check:
<?R
	options(width=200)
	print(M)

	printf <- function(...) cat(sprintf(...))

	myWeighting = c(8./27.,
					2./27., 2./27., 2./27., 2./27., 2./27., 2./27.,
					1./216., 1./216., 1./216., 1./216.,
					1./216., 1./216., 1./216., 1./216.,
					1./54.,  1./54.,  1./54.,  1./54.,
					1./54.,  1./54.,  1./54.,  1./54.,
					1./54.,  1./54.,  1./54.,  1./54.)
	printf("Orthogonality Check \n")
	for (i in 1:27) {
		printf("Moment %d: ", i-1)
		for (j in i:27) {
			tmp <- myWeighting %*% ( M[i,] * M[j,] )
			printf(" %.2f,", tmp)  
		}
		printf("\n")
	}
?>
*/
