CudaDeviceFunction real_t getT(){
    return Temp(0,0,0);
}
CudaDeviceFunction real_t getST(){
    real_t surfaceTen;
    if (surfPower > 1) {
        surfaceTen = sigma + sigma_TT*pow((Temp(0,0,0) - T_ref),surfPower) * (1.0/surfPower);
    } else {
        surfaceTen = sigma + sigma_T*(Temp(0,0,0) - T_ref);
    }
    return surfaceTen;
}
/* Save everything from buffer 1 to 2. */
CudaDeviceFunction void TempCopy(){
    g0  = g0(0,0,0);
    g1  = g1(0,0,0);
    g2  = g2(0,0,0);
    g3  = g3(0,0,0);
    g4  = g4(0,0,0);
    g5  = g5(0,0,0);
    g6  = g6(0,0,0);
    g7  = g7(0,0,0);
    g8  = g8(0,0,0);
    g9  = g9(0,0,0);
    g10 = g10(0,0,0);
    g11 = g11(0,0,0);
    g12 = g12(0,0,0);
    g13 = g13(0,0,0);
    g14 = g14(0,0,0);
    g15 = g15(0,0,0);
    g16 = g16(0,0,0);
    g17 = g17(0,0,0);
    g18 = g18(0,0,0);
    g19 = g19(0,0,0);
    g20 = g20(0,0,0);
    g21 = g21(0,0,0);
    g22 = g22(0,0,0);
    g23 = g23(0,0,0);
    g24 = g24(0,0,0);
    g25 = g25(0,0,0);
    g26 = g26(0,0,0);

    h0 = h0(0,0,0);
    h1 = h1(0,0,0);
    h2 = h2(0,0,0);
    h3 = h3(0,0,0);
    h4 = h3(0,0,0);
    h5 = h4(0,0,0);
    h6 = h5(0,0,0);
    h7 = h7(0,0,0);
    h8 = h8(0,0,0);
    h9 = h9(0,0,0);
    h10 = h10(0,0,0);
    h11 = h11(0,0,0);
    h12 = h12(0,0,0);
    h13 = h13(0,0,0);
    h14 = h14(0,0,0);

    U = U(0,0,0);
    V = V(0,0,0);
    W = W(0,0,0);

    nw_x = nw_x(0,0,0);
    nw_y = nw_y(0,0,0);
    nw_z = nw_z(0,0,0);

    PhaseF = PhaseF(0,0,0);

    Temp = Temp(0,0,0); 
    Cond = Cond(0,0,0); 
    SurfaceTension = SurfaceTension(0,0,0);
}

CudaDeviceFunction void ThermalCopy(){
    Temp = Temp(0,0,0); 
    Cond = Cond(0,0,0); 
    SurfaceTension = SurfaceTension(0,0,0);
}


CudaDeviceFunction void TempUpdate1(){
    PhaseF = PhaseF(0,0,0);
    if ( IamWall || IamSolid || ((NodeType & NODE_ADDITIONALS) == NODE_ConstantTemp) ) {
        RK1 = Temp(0,0,0);
    } else {
        real_t myCp, lapT, rho, tmpT, tmpK, UpdateT;
        int i;
        vector_t gradT = {0.0,0.0,0.0};
        vector_t gradK = {0.0,0.0,0.0}; 
        vector_t vel   = {U(0,0,0), V(0,0,0), W(0,0,0)};
        myCp = interp(PhaseF, cp_h, cp_l);
        rho  = interp(PhaseF, Density_h, Density_l);
        <?R
            IsotropicGrad('gradT', 'Temp')
            IsotropicGrad('gradK', 'Cond')
            myLaplace('lapT', 'Temp')
        ?>
        // RK1 = Tn + 0.5h1
        RK1 = Temp(0,0,0) + stabiliser*0.5*(-1.0*dotProduct(vel, gradT) + (1.0/(rho*myCp)) * (dotProduct(gradK,gradT) + Cond(0,0,0)*lapT));
    }
}

CudaDeviceFunction void TempUpdate2(){
    PhaseF = PhaseF(0,0,0);
    if ( IamWall || IamSolid || ((NodeType & NODE_ADDITIONALS) == NODE_ConstantTemp) ) {
        RK2 = Temp(0,0,0);
    } else {
        real_t myCp, lapT, rho, tmpT, tmpK, UpdateT;
        int i;
        vector_t gradT = {0.0,0.0,0.0};
        vector_t gradK = {0.0,0.0,0.0}; 
        vector_t vel   = {U(0,0,0), V(0,0,0), W(0,0,0)};
        myCp = interp(PhaseF, cp_h, cp_l);
        rho  = interp(PhaseF, Density_h, Density_l);

        <?R
            IsotropicGrad('gradT', 'RK1')
            IsotropicGrad('gradK', 'Cond')
            myLaplace('lapT', 'RK1')
        ?>      
        // RK2 = Tn + 0.5h2
        RK2 = Temp(0,0,0) + stabiliser*0.5*(-1.0*dotProduct(vel, gradT) + (1.0/(rho*myCp)) * (dotProduct(gradK,gradT) + Cond(0,0,0)*lapT));
    }
}

CudaDeviceFunction void TempUpdate3(){
    PhaseF = PhaseF(0,0,0);
    RK2 = RK2(0,0,0);
    if ( IamWall || IamSolid || ((NodeType & NODE_ADDITIONALS) == NODE_ConstantTemp) ) {
        RK3 = Temp(0,0,0);
    //	} else if ((NodeType & NODE_ADDITIONALS) == NODE_EAdiabatic) {
    //		RK3 = Temp(-1,0,0);
    } else {
        real_t myCp, lapT, rho, tmpT, tmpK, UpdateT;
        int i;
        vector_t gradT = {0.0,0.0,0.0};
        vector_t gradK = {0.0,0.0,0.0}; 
        vector_t vel   = {U(0,0,0), V(0,0,0), W(0,0,0)};
        myCp = interp(PhaseF, cp_h, cp_l);
        rho  = interp(PhaseF, Density_h, Density_l);

        <?R
            IsotropicGrad('gradT', 'RK2')
            IsotropicGrad('gradK', 'Cond')
            myLaplace('lapT', 'RK2')
        ?>  
        // RK3 = Tn + h3
        RK3 = Temp(0,0,0) + stabiliser*1.0*(-1.0*dotProduct(vel, gradT) + (1.0/(rho*myCp)) * (dotProduct(gradK,gradT) + Cond(0,0,0)*lapT));
    }
}

CudaDeviceFunction void TempUpdate4(){
    PhaseF = PhaseF(0,0,0);
    RK3 = RK3(0,0,0);
    if ( IamWall || IamSolid || ((NodeType & NODE_ADDITIONALS) == NODE_ConstantTemp) ) {
        Temp = Temp(0,0,0);
    //	} else if ((NodeType & NODE_ADDITIONALS) == NODE_EAdiabatic) {
    //		Temp = RK3(0,0,0);		
    } else {
        real_t myCp, lapT, rho, tmpT, tmpK, UpdateT;
        int i;
        vector_t gradT = {0.0,0.0,0.0};
        vector_t gradK = {0.0,0.0,0.0}; 
        vector_t vel   = {U(0,0,0), V(0,0,0), W(0,0,0)};
        myCp = interp(PhaseF, cp_h, cp_l);
        rho  = interp(PhaseF, Density_h, Density_l);

        <?R
            IsotropicGrad('gradT', 'RK3')
            IsotropicGrad('gradK', 'Cond')
            myLaplace('lapT', 'RK3')
        ?>  

        UpdateT = Temp(0,0,0);
        Temp = (1-4.0/3.0)*UpdateT + (2*RK1(0,0,0) + 4*RK2(0,0,0) + 2*RK3(0,0,0) - stabiliser*(1.0*dotProduct(vel, gradT) + (1.0/(rho*myCp)) * (dotProduct(gradK,gradT) + Cond(0,0,0)*lapT)))/6.0;
        AddToTempChange( (Temp-UpdateT)*(Temp-UpdateT)  );
    }
    if (surfPower > 1) {
        SurfaceTension = sigma + sigma_TT*pow((Temp(0,0,0) - T_ref),surfPower) * (1.0/surfPower);
    } else {
        SurfaceTension = sigma + sigma_T*(Temp(0,0,0) - T_ref);
    }
}

CudaDeviceFunction void BoundUpdate(){
    if ((NodeType & NODE_ADDITIONALS) == NODE_EAdiabatic) {
        Temp = Temp(-1,0,0);
    } else {
        Temp = Temp(0,0,0);
    }
    if (surfPower > 1) {
        SurfaceTension = sigma + sigma_TT*pow((Temp(0,0,0) - T_ref),surfPower) * (1.0/surfPower);
    } else {
        SurfaceTension = sigma + sigma_T*(Temp(0,0,0) - T_ref);
    }
}

CudaDeviceFunction real_t dotProduct( vector_t a, vector_t b) {
    return a.x*b.x + a.y*b.y + a.z*b.z;
}

CudaDeviceFunction real_t interp(real_t current, real_t upper, real_t lower){
    return lower + current*(upper - lower);
}
