
// 'Lattice Boltzmann model for simulating flows with multiple phases and components' by X. Shan and H. Chen, 1993
// 'Simulation of nonideal gases and liquid-gas phase transitions by the lattice Boltzmann equation' by X. Shan and H. Chen, 1994

// This type of models are also know as pseuodo-potential models.

<?R 
	source("conf.R")
	c_header();
	source("lib/feq.R")
    source("lib/boundary.R")
?>

CudaDeviceFunction void Init(){
    real_t u[2] = {VelocityX, VelocityY};
    real_t d = Density;
    SetEquilibrium(d,u);

    rho = calcRho(); //  calculate rho from equilibrium distributions.
    
    neighbour_type=0;

    if ((NodeType & NODE_BOUNDARY) == NODE_Wall) {
        neighbour_type=1;
    } 
}

CudaDeviceFunction float2 Color() {
    // used for graphics - can usually ignore function
    float2 ret;
    vector_t u = getU();
    ret.x = sqrt(u.x*u.x + u.y*u.y);
    ret.y = 1;
    return ret;
}
    
CudaDeviceFunction void SetEquilibrium(real_t d, real_t u[2]){
    f[0] = ( 2. + ( -u[1]*u[1] - u[0]*u[0] )*3. )*d*2./9.;
    f[1] = ( 2. + ( -u[1]*u[1] + ( 1 + u[0] )*u[0]*2. )*3. )*d/18.;
    f[2] = ( 2. + ( -u[0]*u[0] + ( 1 + u[1] )*u[1]*2. )*3. )*d/18.;
    f[3] = ( 2. + ( -u[1]*u[1] + ( -1 + u[0] )*u[0]*2. )*3. )*d/18.;
    f[4] = ( 2. + ( -u[0]*u[0] + ( -1 + u[1] )*u[1]*2. )*3. )*d/18.;
    f[5] = ( 1. + ( ( 1 + u[1] )*u[1] + ( 1 + u[0] + u[1]*3. )*u[0] )*3. )*d/36.;
    f[6] = ( 1. + ( ( 1 + u[1] )*u[1] + ( -1 + u[0] - u[1]*3. )*u[0] )*3. )*d/36.;
    f[7] = ( 1. + ( ( -1 + u[1] )*u[1] + ( -1 + u[0] + u[1]*3. )*u[0] )*3. )*d/36.;
    f[8] = ( 1. + ( ( -1 + u[1] )*u[1] + ( 1 + u[0] - u[1]*3. )*u[0] )*3. )*d/36.;
}

CudaDeviceFunction real_t calcRho() {
    // This function calculates and returns the value of macroscopic density at the current node.
    real_t d = f[8]+f[7]+f[6]+f[5]+f[4]+f[3]+f[2]+f[1]+f[0];
    return d;
} 

CudaDeviceFunction real_t getRho() {
    // This function returnes the stored value of macroscopic density at the current node.
    return rho;
}

CudaDeviceFunction void Run() {
    // This defines the dynamics that we run at each node in the domain.
    rho = calcRho();

    switch (NodeType & NODE_BOUNDARY) {
    case NODE_Solid:
    case NODE_Wall:
        BounceBack();
        break;
    }
    if (NodeType & NODE_MRT) 
    {
        CollisionBGK();
    }

    neighbour_type = neighbour_type(0,0);
}

CudaDeviceFunction void CollisionBGK() {
    // Here we perform a single relaxation time collision operation.
    // We save memory here by using a single dummy variable
    real_t u_eq[2], f_temp[9];
  
    real_t d = getRho();

    vector_t u_eq_vect = getUeq(d);
    u_eq[0] = u_eq_vect.x; 
    u_eq[1] = u_eq_vect.y;

    f_temp[0] = f[0];
    f_temp[1] = f[1];
    f_temp[2] = f[2];
    f_temp[3] = f[3];
    f_temp[4] = f[4];
    f_temp[5] = f[5];
    f_temp[6] = f[6];
    f_temp[7] = f[7];
    f_temp[8] = f[8];
    SetEquilibrium(d, u_eq); //stores equilibrium distribution in f[0]-f[8]
    f[0] = f_temp[0] - omega*(f_temp[0]-f[0]);	
    f[1] = f_temp[1] - omega*(f_temp[1]-f[1]);
    f[2] = f_temp[2] - omega*(f_temp[2]-f[2]);
    f[3] = f_temp[3] - omega*(f_temp[3]-f[3]);	
    f[4] = f_temp[4] - omega*(f_temp[4]-f[4]);
    f[5] = f_temp[5] - omega*(f_temp[5]-f[5]);
    f[6] = f_temp[6] - omega*(f_temp[6]-f[6]);	
    f[7] = f_temp[7] - omega*(f_temp[7]-f[7]);
    f[8] = f_temp[8] - omega*(f_temp[8]-f[8]);
}

CudaDeviceFunction void BounceBack() {
    // Method to reverse distribution functions along the bounding nodes.
    real_t uf;
    uf = f[3];
    f[3] = f[1];
    f[1] = uf;
    uf = f[4];
    f[4] = f[2];
    f[2] = uf;
    uf = f[7];
    f[7] = f[5];
    f[5] = uf;
    uf = f[8];
    f[8] = f[6];
    f[6] = uf;
}

CudaDeviceFunction vector_t getU() {
    // This function defines the macroscopic velocity at the current node.
    real_t d = getRho();
    vector_t u;

    vector_t F_ff = getF_ff();
    vector_t F_sf = getF_sf();

    u.x = ( f[8]-f[7]-f[6]+f[5]-f[3]+f[1] )/d + (GravitationX + F_ff.x + F_sf.x )*0.5 ;
    u.y = (-f[8]-f[7]+f[6]+f[5]-f[4]+f[2] )/d + (GravitationY + F_ff.y + F_sf.y )*0.5 ;
    u.z = 0;
    return u;
}

CudaDeviceFunction vector_t getUeq(real_t d) {
    // This function defines the equilibrium velocity at the current node.
    vector_t F_ff = getF_ff();
    vector_t F_sf = getF_sf();
    vector_t u_eq;

    u_eq.x = ( f[8]-f[7]-f[6]+f[5]-f[3]+f[1] )/d;
    u_eq.y = (-f[8]-f[7]+f[6]+f[5]-f[4]+f[2] )/d;

    u_eq.x += (GravitationX + (F_ff.x + F_sf.x)/d) / omega;
    u_eq.y += (GravitationY + (F_ff.y + F_sf.y)/d) / omega;
    u_eq.z = 0;

    return u_eq;
}


// ------------------------------ pseudo-potential related code --------------------------------------------- //

CudaDeviceFunction void calcPsi() {
    // Calculate psi at each point so that pseudopotential force can be found.
    
    real_t d = calcRho();
    psi = 1 - exp(-d);
}

CudaDeviceFunction real_t getPsi(){
	return psi(0,0);
}
CudaDeviceFunction real_t getNeighbour_type()
{
    return neighbour_type(0,0);
}

CudaDeviceFunction vector_t getF_ff() {
    // fluid - fluid interaction force 

    vector_t F_ff;
    F_ff.x = 0;
    F_ff.y = 0;
    F_ff.z = 0;
    
    F_ff.x =  ( psi(1,-1)-psi(-1,-1)+psi(1,1)-psi(-1,1))/9. + (psi(1,0)-psi(-1,0))/36.;
    F_ff.y =  (-psi(1,-1)-psi(-1,-1)+psi(1,1)+psi(-1,1))/9. + (psi(0,1)-psi(0,-1))/36.;
    
    F_ff.x *= -G_ff*psi(0,0); 
    F_ff.y *= -G_ff*psi(0,0);

    // alternative version with dynamic access to the 'psi' field.
    // for (int i=0; i< 9; i++){
    //     F_ff.x += wf[i] * psi_dyn(d2q9_ex[i], d2q9_ey[i])*d2q9_ex[i];
    //     F_ff.y += wf[i] * psi_dyn(d2q9_ex[i], d2q9_ey[i])*d2q9_ey[i];
    // }
   
    return F_ff;
}

CudaDeviceFunction vector_t getF_sf() {
    // solid - fluid interaction force 

    vector_t F_sf;
    F_sf.x = 0;
    F_sf.y = 0;
    F_sf.z = 0;

    for (int i=0; i< 9; i++){
        F_sf.x += wf[i] *d2q9_ex[i] * neighbour_type_dyn(d2q9_ex[i], d2q9_ey[i]);
        F_sf.y += wf[i] *d2q9_ey[i] * neighbour_type_dyn(d2q9_ex[i], d2q9_ey[i]);
    }

    F_sf.x *= -G_sf*psi(0,0); 
    F_sf.y *= -G_sf*psi(0,0); 
    
    return F_sf;
}
