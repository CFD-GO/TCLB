<?R  
	source("conf.R")
	c_header();
	source("lib/boundary.R")
	source("lib/feq.R")


	if (NumberOfDREs > 0){
		i = 1
		gname = paste("dre",i,sep="_")
		dre_gnames = c(gname)
		fs = list( PV(DensityAll$name[DensityAll$group==gname]) )	
		while (i < NumberOfDREs + 1 ) {
		# declaration of densities
			i = i + 1
			gname =  paste("dre",i,sep="_")
			dre_gnames = append(dre_gnames, gname)
			fs = append( fs, list(PV(DensityAll$name[DensityAll$group==gname]) ))
		}	
	}

	if (NumberOfODEs > 0){
		i = 1
		gname = paste("ode",i,sep="_")
		ode_gnames = c(gname)
		odes = list( PV(Fields$name[Fields$group==gname]) )	
		while (i < NumberOfODEs + 1) {
		# declaration of densities
			i = i + 1
			gname =  paste("ode",i,sep="_")
			ode_gnames = append(ode_gnames, gname)
			odes = append( odes, PV(Fields$name[Fields$group==gname]) )
		}	
	}

	f_tmp = c(PV(paste('f_tmp[',seq(0,8),']', sep='')))
	qs = c(PV(paste('q[',seq(0,NumberOfODEs + NumberOfDREs),']', sep='')))
?>



//this is object-wide variable
real_t f_tmp[9];
real_t q[<?%s NumberOfODEs + NumberOfDREs ?>];
real_t phi[<?%s NumberOfODEs + NumberOfDREs ?>];


CudaDeviceFunction float2 Color() {
  float2 ret;
  ret.x = 0;
  ret.y = <?R C(sum(fs[[1]])) ?>;
  return ret;
}

// ------------------------ PARAVIEW OUTPUT BLOCK ------------------------
// Use this functions is only for vtk output.

<?R
dre_loop( function(i) {
?>
CudaDeviceFunction real_t get<?%s DREs[i] ?>() {
	DispatchCalcPhi();
	return phi[<?%s i-1 ?>];
}
<?R
})
?>

<?R
ode_loop( function(i) {
?>
CudaDeviceFunction real_t get<?%s ODEs[i] ?>() {
	DispatchCalcPhi();
	return phi[<?%s NumberOfDREs+i-1 ?>];
}
<?R
})
?>



// ------------------------ END OF PARAVIEW OUTPUT BLOCK ------------------------

CudaDeviceFunction void Init() { 
	<?R


	dre_loop( function(i) {
		?>
		phi[<?%s i-1 ?>] = Init_<?%s DREs[i] ?>;
		<?R
	})

	ode_loop( function(i) {
		?>
		phi[<?%s NumberOfDREs+i-1 ?>] = Init_<?%s ODEs[i] ?>;
		<?R		
	})

	?>

	DispatchCalcQ();

	<?R


	dre_loop( function(i) {
		?>
		Init_eq(Init_<?%s DREs[i] ?> - 0.5*q[<?%s i-1 ?>]);
		<?R
		C(fs[[i]], f_tmp)
	})

	ode_loop( function(i) {	
		C(odes[[i]], PV(paste('Init', ODEs[i] , sep="_")) - 0.5*qs[NumberOfDREs+i] );
	})

	?>
	DispatchCalcPhi();

}

CudaDeviceFunction void InitFromExternal() { 
	<?R


	dre_loop( function(i) {
		?>
		phi[<?%s i-1 ?>] = Init_<?%s DREs[i] ?>_External(0,0);
		<?R
	})

	ode_loop( function(i) {
		?>
		phi[<?%s NumberOfDREs+i-1 ?>] = Init_<?%s ODEs[i] ?>_External(0,0);
		<?R		
	})

	?>

	DispatchCalcQ();

	<?R


	dre_loop( function(i) {
		?>
		Init_eq(Init_<?%s DREs[i] ?>_External(0,0) - 0.5*q[<?%s i-1 ?>]);
		<?R
		C(fs[[i]], f_tmp)
	})

	ode_loop( function(i) {
		C(odes[[i]], PV(paste('Init',ODEs[i],'External(0,0)',sep='_')) - 0.5*qs[NumberOfDREs+i] );
	})

	?>
	DispatchCalcPhi();

}


	
CudaDeviceFunction void Run() {
	DispatchCalcPhi();
	DispatchCalcQ();



    switch (NodeType & NODE_BOUNDARY) {
	case NODE_Wall:
		BounceBack();
		return;
		break;
	}

	switch (NodeType & NODE_COLLISION) {  
		case NODE_TRT_M:
			<?R
			dre_loop( function(i) {
				C(f_tmp,fs[[i]])
				?>
				relax_and_collide_TRT_M(Diffusivity_<?%s DREs[i] ?>, q[<?%s i-1 ?>]);
				<?R
				C(fs[[i]], f_tmp)
			})
			?>
			break;
		case NODE_SRT_DF:
    	default:
			<?R
			dre_loop( function(i) {
				C(f_tmp,fs[[i]])
				?>
				relax_and_collide_SRT_DF(Diffusivity_<?%s DREs[i] ?>, q[<?%s i-1 ?>]);
				<?R
				C(fs[[i]], f_tmp)
			})
			?>
			break;      
	}


	
	<?R
	ode_loop( function(i) {
		accessor = PV( paste('ode_', i, '(0,0)', sep=''))
		C(odes[[i]], accessor  + qs[NumberOfDREs+i] );
	})
	?>

 }



CudaDeviceFunction void BounceBack()
{
<?R FullBounceBack() ?>
}


 CudaDeviceFunction void Init_eq(real_t Init_Phi_Tilde) 
 {

	<?R
		Init_Phi_Tilde = PV('Init_Phi_Tilde')
		U = as.matrix(Density[Density$group=='dre_1',c("dx","dy")])
		feq = MRT_feq(U, Init_Phi_Tilde, c(0,0))
		C(f_tmp, feq)

	?>

 }

CudaDeviceFunction void relax_and_collide_SRT_DF(real_t diffusivity, const real_t q) 
{


	real_t omega_ade = 1.0/(3*diffusivity+0.5);
	real_t tilde_phi = <?%s  C(sum(f_tmp)) ?>;

	<?R
		omega = PV('omega_ade')
		tilde_phi = PV('tilde_phi')
		q = PV('q')

		U = as.matrix(Density[Density$group=='dre_1',c("dx","dy")])
		feq = MRT_feq(U, tilde_phi, c(0,0))
		qeq = MRT_feq(U, q, c(0,0))

		C(f_tmp, f_tmp - omega*(f_tmp-feq) + qeq)

	?>
}

CudaDeviceFunction void relax_and_collide_TRT_M(real_t diffusivity, real_t Q) 
{	

	// see eq. 7 from
	// "Optimal Stability of Advection-Diffusion Lattice Boltzmann Models 
	//  with Two Relaxation Times for Positive/Negative Equilibrium"
	// by I. Ginzburg, D. d’Humières, A. Kuzmin, 2010

	real_t omega_ade = 1.0/(3*diffusivity+0.5);
	real_t omega_even = 2.*(2.-omega_ade)/(omega_ade*(4.*magic_parameter-1.)+2.);
	// real_t omega_even = 1.;

	// **to match notations **
	vector_t u; // disable advection
	u.x = 0;
	u.y = 0;
	u.z = 0;
	real_t f000 = f_tmp[0];
	real_t f100 = f_tmp[1];
	real_t f200 = f_tmp[2];
	real_t f010 = f_tmp[3];
	real_t f110 = f_tmp[4];
	real_t f210 = f_tmp[5];
	real_t f020 = f_tmp[6];
	real_t f120 = f_tmp[7];
	real_t f220 = f_tmp[8];
	// end of **to match notations **

	//=== THIS IS AUTOMATICALLY GENERATED CODE ===
	real_t uxuy = u.x*u.y;
	real_t ux2 = u.x*u.x;
	real_t uy2 = u.y*u.y;
	real_t Sigma2 = 0.3333333333333333;
	
	real_t tilde_phi = f000 + f010 + f020 + f100 + f110 + f120 + f200 + f210 + f220;
	//raw moments from density-probability functions
	real_t m000 = f000 + f010 + f020 + f100 + f110 + f120 + f200 + f210 + f220;
	real_t m100 = f100 + f110 + f120 - f200 - f210 - f220;
	real_t m010 = f010 - f020 + f110 - f120 + f210 - f220;
	real_t m200 = f100 + f110 + f120 + f200 + f210 + f220;
	real_t m020 = f010 + f020 + f110 + f120 + f210 + f220;
	real_t m110 = f110 - f120 - f210 + f220;
	real_t m210 = f110 - f120 + f210 - f220;
	real_t m120 = f110 + f120 - f210 - f220;
	real_t m220 = f110 + f120 + f210 + f220;

	//raw equilibrium moments 
	real_t mf_eq_000 = tilde_phi;
	real_t mf_eq_100 = tilde_phi*u.x;
	real_t mf_eq_010 = tilde_phi*u.y;
	real_t mf_eq_200 = tilde_phi*(Sigma2 + ux2);
	real_t mf_eq_020 = tilde_phi*(Sigma2 + uy2);
	real_t mf_eq_110 = tilde_phi*uxuy;
	real_t mf_eq_210 = tilde_phi*u.y*(Sigma2 + ux2);
	real_t mf_eq_120 = tilde_phi*u.x*(Sigma2 + uy2);
	real_t mf_eq_220 = tilde_phi*(Sigma2*Sigma2 + Sigma2*ux2 + Sigma2*uy2 + ux2*uy2);

	real_t mq_eq_000 = Q;
	real_t mq_eq_100 = Q*u.x;
	real_t mq_eq_010 = Q*u.y;
	real_t mq_eq_200 = Q*(Sigma2 + ux2);
	real_t mq_eq_020 = Q*(Sigma2 + uy2);
	real_t mq_eq_110 = Q*uxuy;
	real_t mq_eq_210 = Q*u.y*(Sigma2 + ux2);
	real_t mq_eq_120 = Q*u.x*(Sigma2 + uy2);
	real_t mq_eq_220 = Q*(Sigma2*Sigma2 + Sigma2*ux2 + Sigma2*uy2 + ux2*uy2);

	//collide
	real_t m_star_000 = -m000*(omega_even - 1.) + mf_eq_000*omega_even + mq_eq_000;
	real_t m_star_100 = -m100*(omega_ade - 1.) + mf_eq_100*omega_ade + mq_eq_100;
	real_t m_star_010 = -m010*(omega_ade - 1.) + mf_eq_010*omega_ade + mq_eq_010;
	real_t m_star_200 = -m200*(omega_even - 1.) + mf_eq_200*omega_even + mq_eq_200;
	real_t m_star_020 = -m020*(omega_even - 1.) + mf_eq_020*omega_even + mq_eq_020;
	real_t m_star_110 = -m110*(omega_even - 1.) + mf_eq_110*omega_even + mq_eq_110;
	real_t m_star_210 = -m210*(omega_ade - 1.) + mf_eq_210*omega_ade + mq_eq_210;
	real_t m_star_120 = -m120*(omega_ade - 1.) + mf_eq_120*omega_ade + mq_eq_120;
	real_t m_star_220 = -m220*(omega_even - 1.) + mf_eq_220*omega_even + mq_eq_220;

	//back to density-probability functions
	f000 = m_star_000 - m_star_020 - m_star_200 + m_star_220;
	f100 = 1/2.*m_star_100 - 1/2.*m_star_120 + 1/2.*m_star_200 - 1/2.*m_star_220;
	f200 = -1/2.*m_star_100 + 1/2.*m_star_120 + 1/2.*m_star_200 - 1/2.*m_star_220;
	f010 = 1/2.*m_star_010 + 1/2.*m_star_020 - 1/2.*m_star_210 - 1/2.*m_star_220;
	f110 = 1/4.*m_star_110 + 1/4.*m_star_120 + 1/4.*m_star_210 + 1/4.*m_star_220;
	f210 = -1/4.*m_star_110 - 1/4.*m_star_120 + 1/4.*m_star_210 + 1/4.*m_star_220;
	f020 = -1/2.*m_star_010 + 1/2.*m_star_020 + 1/2.*m_star_210 - 1/2.*m_star_220;
	f120 = -1/4.*m_star_110 + 1/4.*m_star_120 - 1/4.*m_star_210 + 1/4.*m_star_220;
	f220 = 1/4.*m_star_110 - 1/4.*m_star_120 - 1/4.*m_star_210 + 1/4.*m_star_220;
	
	// **to match notations **
	f_tmp[0] = f000;
	f_tmp[1] = f100;
	f_tmp[2] = f200;
	f_tmp[3] = f010;
	f_tmp[4] = f110;
	f_tmp[5] = f210;
	f_tmp[6] = f020;
	f_tmp[7] = f120;
	f_tmp[8] = f220;
	// end of **to match notations **
}

CudaDeviceFunction void DispatchCalcPhi() 
{	

    switch (NodeType & NODE_BOUNDARY) {
	case NODE_Wall:

		<?R


		dre_loop( function(i) {
			?>
			phi[<?%s i-1 ?>] = 0;
			<?R
		})

		ode_loop( function(i) {
			?>
			phi[<?%s NumberOfDREs+i-1 ?>] = 0;
			<?R		
		})

		?>

		return;
		break;
	}

	CalcPhi();
}
CudaDeviceFunction void DispatchCalcQ() 
{	
    switch (NodeType & NODE_BOUNDARY) {
	case NODE_Wall:
		<?R


		dre_loop( function(i) {
			?>
			q[<?%s i-1 ?>] = 0;
			<?R
		})

		ode_loop( function(i) {
			?>
			q[<?%s NumberOfDREs+i-1 ?>] = 0;
			<?R		
		})

		?>
		return;
		break;
	}

	CalcQ();
}




<?R 
	if (Qname == 'Allen-Cahn') {
?>


	CudaDeviceFunction void CalcPhi() 
	{	
		real_t tilde_phi = <?%s  C(sum(fs[[1]])) ?>;

		const real_t dt = 1.;
		const real_t  x0 = cbrt(3.) ; 
		const real_t  x1 = 1/(dt*Lambda) ; 
		const real_t  x2 = dt*Lambda - 2 ; 
		const real_t  x3 = cbrt(-9*tilde_phi*x1 + sqrt(3.)*sqrt((27*pow(tilde_phi, 2) - x1*pow(x2, 3))/(pow(dt, 2)*pow(Lambda, 2)))) ; 
		phi[0] = -1.0/3.0*x0*(x0*x1*x2 + pow(x3, 2))/x3 ;  
	}
	CudaDeviceFunction void CalcQ() 
	{	
		q[0] = Lambda*phi[0]*(1 - pow(phi[0], 2)) ;
	}
<?R		
	}
?>



<?R 
	if (Qname == 'SIR_SimpleLaplace') {
?>


	CudaDeviceFunction void CalcPhi() 
	{	
		const real_t x0 = <?%s  C(sum(fs[[1]])) ?>;
		const real_t x1 = <?%s  C(sum(fs[[2]])) ?>;
		const real_t x2 = <?%s  C(sum(fs[[3]])) ?>;

		// x0 = S^\star
		// x1 = I^\star
		// x2 = R^\star
		const real_t  x3 = Beta;
		const real_t  x4 = Gamma;
		const real_t  x5 = 1;
		// Opers0 =  410
		const real_t  x6 = x4*x5 ; // 1
		const real_t  x7 = x3*x5 ; // 1
		const real_t  x8 = x0*x7 ; // 1
		const real_t  x9 = x1*x7 ; // 1
		const real_t  x10 = pow(x4, 2) ; // 1
		const real_t  x11 = pow(x5, 2) ; // 1
		const real_t  x12 = 2*x4 ; // 1
		const real_t  x13 = x11*x12*x3 ; // 2
		const real_t  x14 = x11*pow(x3, 2) ; // 2
		const real_t  x15 = sqrt(pow(x0, 2)*x14 + 2*x0*x1*x14 - x0*x13 + pow(x1, 2)*x14 + x1*x13 + x10*x11 + 4*x6 - 4*x8 + 4*x9 + 4) ; // 24
		const real_t  x16 = x6 + 2 ; // 1
		const real_t  x17 = x15 + x16 ; // 1
		const real_t  x18 = x8 + x9 ; // 1
		const real_t  x19 = 1.0/x3 ; // 1
		const real_t  x20 = x19/x5 ; // 1
		const real_t  x21 = (1.0/2.0)*x20 ; // 1
		const real_t  x22 = 1.0/x16 ; // 1
		const real_t  x23 = x20*x22 ; // 1
		const real_t  x24 = x15*x4 ; // 1
		const real_t  x25 = x2*x3 ; // 1
		const real_t  x26 = x3*x6 ; // 1
		const real_t  x27 = x0*x26 + x1*x26 - x10*x5 - x12 + 2*x25*x6 + 4*x25 ; // 11
		const real_t  x28 = (1.0/2.0)*x19*x22 ; // 2
		const real_t Sp = x21*(x17 + x18) ; // 2
		const real_t Ip = x23*(-x17 + x8 + x9) ; // 3
		const real_t Rp = x28*(-x24 + x27) ; // 2
		const real_t Sm = x21*(-x15 + x16 + x18) ; // 3
		const real_t Im = x23*(x15 + x18 - x6 - 2) ; // 4
		const real_t Rm = x28*(x24 + x27) ; // 2
		// Opers =  104


		const real_t eps = -1E-12;
		if ( Sp >=eps && Ip >=eps && Rp >=eps ) {
			phi[0] = Sp < 0 ? 0 : Sp;
			phi[1] = Ip < 0 ? 0 : Ip;
			phi[2] = Rp < 0 ? 0 : Rp;
		} else if ( Sm >=eps&& Im >=eps && Rm >=eps ) {
			phi[0] = Sm < 0 ? 0 : Sm;
			phi[1] = Im < 0 ? 0 : Im;
			phi[2] = Rm < 0 ? 0 : Rm;
		} else {
			printf("x3 x4 %f %f \n", x3, x4);
			printf("s %e %e %e \n", x0, x1, x2);
			printf("p %e %e %e \n", Sp, Ip, Rp);
			printf("m %e %e %e \n", Sm, Im, Rm);
			assert(0);
		}


	}
	CudaDeviceFunction void CalcQ() 
	{	
		const real_t  s = phi[0] ; 
		const real_t  i = phi[1] ; 
		const real_t  r = phi[2] ; 
		q[0] = -Beta*s*i ; 
		q[1] =  Beta*s*i - Gamma*i;
		q[2] =  Gamma*i ; 

		// printf("Phi %f %f %f \n", phi[0], phi[1], phi[2]);
		// printf("Q %f %f %f \n", q[0], q[1], q[2]);
		

	}
<?R		
	}
?>



<?R 
	if (Qname == 'SIR_ModifiedPeng') {
?>

	CudaDeviceFunction void CalcPhi() 
	{	

		const real_t x0 = <?%s  C(sum(fs[[1]])) ?>;
		const real_t x1 = <?%s  C(odes[[1]]) ?>(0,0);
		const real_t x2 = <?%s  C(odes[[2]]) ?>(0,0);
		const real_t x3 = <?%s  C(odes[[3]]) ?>(0,0);
		const real_t N = <?%s  C(odes[[4]]) ?>(0,0);

		phi[4] = N;


		Eigen::Matrix3d Jacobian;

		Eigen::Vector3d Xn, dX, X0, F;
		Xn(0) = x0/N;
		Xn(1) = x1/N;
		Xn(2) = x2/N;

		X0 = Xn;

		Jacobian(0,0) =  -1.0/2.0*Beta_w - 1 ;
		Jacobian(1,0) =  0 ;
		Jacobian(2,0) =  (1.0/2.0)*Beta_w ;
		Jacobian(2,1) =  0 ;
		Jacobian(2,2) =  -1.0/2.0*Gamma - 1 ;

		for (int i=0; i < 20; i++) {

			F(0) =  (1.0/2.0)*Beta_w*(-Xn(0) + Xn(2)) - Xn(0) + X0(0) ;
			F(1) =  -1.0/2.0*Beta*Xn(0)*Xn(1) - Xn(1) + X0(1) ;
			F(2) =  (1.0/2.0)*Beta*Xn(0)*Xn(1) - 1.0/2.0*Xn(2)*Gamma - Xn(2) + X0(2) ;
			if (F.norm() < 1E-5) {
				break;
			}

			Jacobian(0,1) =  -1.0/2.0*Beta*Xn(1) ;
			Jacobian(0,2) =  (1.0/2.0)*Beta*Xn(1) ;
			Jacobian(1,1) =  -1.0/2.0*Beta*Xn(0) - 1 ;
			Jacobian(1,2) =  (1.0/2.0)*Beta*Xn(0) ;

			dX = Jacobian.ldlt().solve(-F);

			Xn = Xn + dX;

		}
		Xn =  N*Xn;
		for(int k=0; k < 3; k++){
			Xn(k) = fabs(Xn(k));
		}
		phi[0] = Xn(0);
		phi[1] = Xn(1);
		phi[2] = Xn(2);
		phi[3] = Xn(2)*Gamma/2. + x3;
		//printf("CalcPhi PhiTilde %lf %lf %lf %lf\n", x0, x1, x2, x3);					
		//printf("CalcPhi Phi %lf %lf %lf %lf\n", phi[0], phi[1], phi[2], phi[3]);

		return;

	}





	CudaDeviceFunction void CalcQ() 
	{	


		const real_t W = phi[0];
		const real_t S = phi[1];
		const real_t I = phi[2];
		const real_t R = phi[3];

		const real_t N = phi[4];


		q[0] =   Beta_w*(I-W);
		q[1] =  -Beta*S*W / N;
		q[2] =   (Beta*S*W/N - Gamma*I); 
		q[3] =   Gamma*I;
		q[4] = 0;		 //N
		//printf("CalcQ Phi %lf %lf %lf %lf\n", phi[0], phi[1], phi[2], phi[3]);
		//printf("CalcQ Q %lf %lf %lf %lf\n", q[0], q[1], q[2], q[3]);
	}
<?R		
	}
?>


<?R 
	if (Qname == 'SimpleDiffusion') {
?>
	CudaDeviceFunction void CalcPhi() 
	{	
		phi[0] = <?%s  C(sum(fs[[1]])) ?>;
	}
	CudaDeviceFunction void CalcQ() 
	{	
		q[0] = 0;
	}
<?R		
	}
?>
