<?R
	source("conf.R") ;
	c_header();
?>

<?R
	f = PV(Density$name[Density$group=="f"])
	U = as.matrix(Density[Density$group=="f",c("dx","dy")])


	u = PV(paste("u[",1:2-1,"]",sep=""))
	uf = PV("uf")
	d = PV("d")
	usq = PV("usq")
	omega = PV("omega")
        uf1 = uf;
        uf2 = uf;
        uf3 = uf;
	t1 = 4/9
	t2 = 1/9
	t3 = 1/36
	t1 = 4/9
	t2 = 1/9
	t3 = 1/36
	c_squ = 1/3
	wi = c(t1,t2,t2,t2,t2,t3,t3,t3,t3)        
	tn = diag(c(t1,t2,t2,t2,t2,t3,t3,t3,t3))
	bounce = c(0,3,4,1,2,7,8,5,6)
?>

CudaDeviceFunction real_t getRho(){
	return <?R C(sum(f)) ?>;
}
    
CudaDeviceFunction vector_t getU(){
	real_t d = getRho();
	vector_t u;
<?R C(PV(c("u.x","u.y")), f %*% U) ?>
	u.x /= d;
	u.y /= d;
	u.z = 0;
	return u;
}

CudaDeviceFunction real_t getW(){
	return w;
}

CudaDeviceFunction void BounceBack()
{
     real_t uf;
<?R
  V = cbind(1:9, bounce+1)
  sel = V[,1] > V[,2]
  V = V[sel,]
  for (i in 1:nrow(V))
  {
	C(uf, f[V[i,1]])
        C(f[V[i,1]], f[V[i,2]])
        C(f[V[i,2]], uf)
	
   }
?>
}

// 0 1 2 3 4 5 6 7 8
// 1 5 2 6 3 7 4 8 0

CudaDeviceFunction void EVelocity()
{
     real_t rho, ru;
	real_t ux0 = InletVelocity;
	rho = ( f0 + f2 + f4 + 2.*(f1 + f5 + f8) ) / (1. + ux0);
	ru = rho * ux0;
	f3 = f1 - (2./3.) * ru;
	f7 = f5 - (1./6.) * ru + (1./2.)*(f2 - f4);
	f6 = f8 - (1./6.) * ru + (1./2.)*(f4 - f2);
}

CudaDeviceFunction void WPressure()
{
     real_t ru, ux0;
	real_t rho = 1.0;
	ux0 = -1. + ( f0 + f2 + f4 + 2.*(f3 + f7 + f6) ) / rho;
	ru = rho * ux0;

	f1 = f3 - (2./3.) * ru;
	f5 = f7 - (1./6.) * ru + (1./2.)*(f4 - f2);
	f8 = f6 - (1./6.) * ru + (1./2.)*(f2 - f4);
}

CudaDeviceFunction void eqWVelocity()
{
     real_t rho;
	real_t u[2] = {InletVelocity,0.};
	rho = ( f0 + f2 + f4 + 2.*(f3 + f7 + f6) ) / (1. - u[0]);
	SetEquilibrum(rho,u);
}

CudaDeviceFunction void WVelocity()
{
     real_t rho, ru;
	real_t u = InletVelocity;
	rho = ( f0 + f2 + f4 + 2.*(f3 + f7 + f6) ) / (1. - u);
//	AddToObjective(rho);
	ru = rho * u;
	f1 = f3 + (2./3.) * ru;
	f5 = f7 + (1./6.) * ru + (1./2.)*(f4 - f2);
	f8 = f6 + (1./6.) * ru + (1./2.)*(f2 - f4);
}

CudaDeviceFunction void EPressure()
{
     real_t ru, ux0;
	real_t rho = 1.0;
	ux0 = -1. + ( f0 + f2 + f4 + 2.*(f1 + f5 + f8) ) / rho;
	ru = rho * ux0;

	f3 = f1 - (2./3.) * ru;
	f7 = f5 - (1./6.) * ru + (1./2.)*(f2 - f4);
	f6 = f8 - (1./6.) * ru + (1./2.)*(f4 - f2);
}

CudaDeviceFunction void MovingWall()
{
	real_t rho, ru;
        real_t ux0 = MovingWallVelocity;
	rho = f0 + f1 + f3 + 2.*(f7 + f4 + f8);
	ru = rho * ux0;
	f2 = f4;
	f6 = f8 - (1./2.) * ru - (1./2.)*(f3 - f1);
	f5 = f7 + (1./2.) * ru + (1./2.)*(f3 - f1);
}


CudaDeviceFunction void Run() {
//	printf("Run %d %d -> (%d,%d)\n", CudaBlock.x, CudaBlock.y, X, Y);
//    AddToObjective(w*(1-w)/10);
    switch (NodeType & NODE_BOUNDARY) {
	case NODE_Solid:
	        break;
	case NODE_Wall:
		BounceBack();
		break;
	case NODE_EVelocity:
		EVelocity();
		break;
	case NODE_WPressure:
		WPressure();
		break;
	case NODE_WVelocity:
		WVelocity();
		break;
	case NODE_EPressure:
		EPressure();
		break;
	case NODE_MovingWall:
		MovingWall();
		break;

    }
    switch (NodeType & NODE_COLLISION) {
        case NODE_BGK:
                break;   
        case NODE_MRT:
                CollisionMRT();
                break;
    }
    if (NodeType & NODE_DESIGNSPACE) {
        AddToMaterialPenalty(w*(1-w));
        AddToMaterial(1-w);
    }
}

CudaDeviceFunction void SetEquilibrum(real_t d, real_t u[2])
{
<?R
	u = PV("u[",1:2-1,"]")
	d = PV("d")
	c_sq = 1/3
        C( f, wi*((u %*% t(U))*( 1/ c_sq) + ((u %*% t(U)) * (u %*% t(U)))*(1/(c_sq*c_sq*2)) - sum(u*u)*(1/(c_sq*2)) + 1)*d)
?>
}


CudaDeviceFunction void Init() {
	w = 1;
	real_t u[2] = {InletVelocity,0.};
	real_t d = 1.0;
	SetEquilibrum(d,u);
	if ((NodeType & NODE_BOUNDARY) == NODE_Solid) w = 0;
	if ((NodeType & NODE_ADDITIONALS) == NODE_Porous) w = InitPorocity;
}

CudaDeviceFunction float2 Color() {
        float2 ret;
        vector_t u = getU();
        ret.x = sqrt(u.x*u.x + u.y*u.y);
//	ret.x=wb;
//        if (NodeType == NODE_Solid){
//                ret.y = 0;
//        } else {
//                ret.y = 1;
//        }
	ret.y=w;
        return ret;
}

CudaDeviceFunction void CollisionMRT()
{
	real_t M[9];
	real_t rho, ux, uy, usq;
    
<?R
# Calculating equlibrium density set
    	source("lib/feq.R")
        rho = PV("rho")
        u = PV(c("ux","uy"))
        feq = MRT_feq(U, rho, u*rho );
        R = PV("M[",1:9-1,"]")
#        OMEGA = c(
#		PV(rep(0,3)),
#		PV(rep("omega2",4)),
#		PV(rep("omega",2))
#	)
#        OMEGA = PV("S",1:9-1,"")
    OMEGA = PV(c(0,0,0, "S3", "S4", "S56", "S56", "S78", "S78"))
	M = matrix(c(
	      1,  1,  1,  1,  1,  1,  1,  1,  1,
	      0,  1,  0, -1,  0,  1, -1, -1,  1,
	      0,  0,  1,  0, -1,  1,  1, -1, -1,
	     -4, -1, -1, -1, -1,  2,  2,  2,  2,
	      4, -2, -2, -2, -2,  1,  1,  1,  1,
	      0, -2,  0,  2,  0,  1, -1, -1,  1,
	      0,  0, -2,  0,  2,  1,  1, -1, -1,
	      0,  1, -1,  1, -1,  0,  0,  0,  0,
	      0,  0,  0,  0,  0,  1, -1,  1, -1), 9,9);

	C( rho, sum(f) )
	C( u, f %*% U * ( rho^(-1) ) )
?>
    

switch (NodeType & NODE_OBJECTIVE) {
case NODE_Outlet:
    <?R 
        usq=PV('usq')
        C(usq,sum(u%*%u))
    ?>
	AddToOutletFlux(ux/rho);
	AddToPressureLoss(-ux/rho*((rho-1.)/3. + usq/rho/2.));
	break;
case NODE_Inlet:
    <?R
        usq=PV('usq')
        C(usq,sum(u%*%u))
    ?>



	AddToInletFlux(ux/rho);
	AddToPressureLoss(ux/rho*((rho-1.)/3. + usq/rho/2.));
	break;
}


//	real_t omega = 1.0-1.0/(3*nu + 0.5);
//	real_t omega2 = omega;
<?R
	C( R, (f-feq) %*% M * OMEGA );
?>
  
<?R if ( any( DensityAll$group=="BC" ) ) { ?>
    ux = ux + GravitationX +  BC[0] ;
    uy = uy + GravitationY +  BC[1] ; 
<?R } else { ?>
    ux = ux + GravitationX;
    uy = uy + GravitationY; 
<?R } ?>

real_t nw = w / (1.0-PorocityGamma*(1.0-w));
AddToDrag((1-nw)*ux);
AddToLift((1-nw)*uy);
ux = ux*nw;
uy = uy*nw;

<?R
	C( R, R + feq %*% M);
	C( R, R * (1/ diag(t(M) %*% M)));
	C( f, R %*% t(M) );
?>

}

