<?R
	source("conf.R") ;
	c_header();
?>

<?R
	f = PV(Density$name[Density$group=="f"])
	U = as.matrix(Density[Density$group=="f",c("dx","dy")])

	u = PV(paste("u[",1:2-1,"]",sep=""))
	uf = PV("uf")
	d = PV("d")
	usq = PV("usq")
	omega = PV("omega")

	source("lib/lattice.R")
	source("lib/boundary.R")
	source("lib/feq.R")

	J = PV("J",c("x","y"))
	rho = PV("rho")
	EQ = MRT_eq(U, rho, J, ortogonal=FALSE);
?>

CudaDeviceFunction real_t getRho(){
	return <?R C(sum(f)) ?>;
}
    
CudaDeviceFunction vector_t getU(){
	real_t d = getRho();
	vector_t u;
<?R C(PV(c("u.x","u.y")), f %*% U * (d^-1)) ?>
	u.z = 0;
	return u;
}

CudaDeviceFunction real_t getW(){
	return w;
}

CudaDeviceFunction void BounceBack() { <?R FullBounceBack() ?> }
CudaDeviceFunction void EVelocity()  { <?R ZouHe(EQ, 1, -1, "velocity") ?> }
CudaDeviceFunction void WPressure()  { <?R ZouHe(EQ, 1, 1, "pressure") ?> }
CudaDeviceFunction void WVelocity()  { <?R ZouHe(EQ, 1, 1, "velocity") ?> }
CudaDeviceFunction void EPressure()  { <?R ZouHe(EQ, 1, -1, "pressure") ?> }

CudaDeviceFunction void MovingWall()
{
	real_t rho, ru;
        real_t ux0 = Velocity;
	rho = f0 + f1 + f3 + 2.*(f7 + f4 + f8);
	ru = rho * ux0;
	f2 = f4;
	f6 = f8 - (1./2.) * ru - (1./2.)*(f3 - f1);
	f5 = f7 + (1./2.) * ru + (1./2.)*(f3 - f1);
}


CudaDeviceFunction void Run() {
    switch (NodeType & NODE_BOUNDARY) {
	case NODE_Solid:
	        break;
	case NODE_Wall:
		BounceBack();
		break;
	case NODE_EVelocity:
		EVelocity();
		break;
	case NODE_WPressure:
		WPressure();
		break;
	case NODE_WVelocity:
		WVelocity();
		break;
	case NODE_EPressure:
		EPressure();
		break;
//	case NODE_MovingWall:
//		MovingWall();
//		break;

    }
    switch (NodeType & NODE_COLLISION) {
        case NODE_BGK:
                break;   
        case NODE_MRT:
                CollisionMRT();
                break;
    }
    if (NodeType & NODE_DESIGNSPACE) {
        AddToMaterialPenalty(w*(1-w));
        AddToMaterial(1-w);
    }
}

CudaDeviceFunction void SetEquilibrum(real_t rho, real_t Jx, real_t Jy) { <?R C(f, EQ$Req %*% solve(EQ$mat)); ?> }

CudaDeviceFunction void Init() {
	real_t d = 1.0+3.0*Pressure;
	SetEquilibrum(d, d*Velocity, 0.0);
	w = 1 - Porocity;
	if ((NodeType & NODE_BOUNDARY) == NODE_Solid) w = 0;
}

CudaDeviceFunction float2 Color() {
        float2 ret;
        vector_t u = getU();
        ret.x = sqrt(u.x*u.x + u.y*u.y);
//	ret.x=wb;
//        if (NodeType == NODE_Solid){
//                ret.y = 0;
//        } else {
//                ret.y = 1;
//        }
	ret.y=w;
        return ret;
}

CudaDeviceFunction void CollisionMRT()
{
	real_t M[9];
	real_t rho, ux, uy, usq;
    
<?R
# Calculating equlibrium density set
        rho = PV("rho")
        u = PV(c("ux","uy"))
        feq = MRT_feq(U, rho, u*rho );
        R = PV("M[",1:9-1,"]")
#        OMEGA = c(
#		PV(rep(0,3)),
#		PV(rep("omega2",4)),
#		PV(rep("omega",2))
#	)
#        OMEGA = PV("S",1:9-1,"")
	OMEGA = c(PV(c(0,0,0, -1/3, 0, 0, 0)), PV(c("omega", "omega")))
	M = matrix(c(
	      1,  1,  1,  1,  1,  1,  1,  1,  1,
	      0,  1,  0, -1,  0,  1, -1, -1,  1,
	      0,  0,  1,  0, -1,  1,  1, -1, -1,
	     -4, -1, -1, -1, -1,  2,  2,  2,  2,
	      4, -2, -2, -2, -2,  1,  1,  1,  1,
	      0, -2,  0,  2,  0,  1, -1, -1,  1,
	      0,  0, -2,  0,  2,  1,  1, -1, -1,
	      0,  1, -1,  1, -1,  0,  0,  0,  0,
	      0,  0,  0,  0,  0,  1, -1,  1, -1), 9,9);

	C( rho, sum(f) )
	C( u, f %*% U * ( rho^(-1) ) )
?>
    

switch (NodeType & NODE_OBJECTIVE) {
case NODE_Outlet:
    <?R 
        usq=PV('usq')
        C(usq,sum(u%*%u))
    ?>
	AddToOutletFlux(ux/rho);
	AddToPressureLoss(-ux/rho*((rho-1.)/3. + usq/rho/2.));
	break;
case NODE_Inlet:
    <?R
        usq=PV('usq')
        C(usq,sum(u%*%u))
    ?>



	AddToInletFlux(ux/rho);
	AddToPressureLoss(ux/rho*((rho-1.)/3. + usq/rho/2.));
	break;
}


//	real_t omega = 1.0-1.0/(3*nu + 0.5);
//	real_t omega2 = omega;
<?R
	C( R, (f-feq) %*% M * OMEGA );
?>
  
    ux = ux + ForceX;
    uy = uy + ForceY; 

real_t nw = w / (1.0-PorocityGamma*(1.0-w));
AddToDrag((1-nw)*ux);
AddToLift((1-nw)*uy);
ux = ux*nw;
uy = uy*nw;

<?R
	C( R, R + feq %*% M);
	C( R, R * (1/ diag(t(M) %*% M)));
	C( f, R %*% t(M) );
?>

}

