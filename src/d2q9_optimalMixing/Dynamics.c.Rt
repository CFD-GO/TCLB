/*-------------------------------------------------------------*/
/*  CLB - Cudne LB - Stencil Version                           */
/*     CUDA based Adjoint Lattice Boltzmann Solver             */
/*     Author: Lukasz Laniewski-Wollk                          */
/*     Developed at: Warsaw University of Technology - 2012    */
/*-------------------------------------------------------------*/
<?R source("conf.R") ?>

<?R
		source("lib/feq.R")
		source("lib/lattice.R")
		d2q5 = as.matrix(Density[Density$group=="g",c("dx","dy","dz")])

		rho = PV("rho")
		u = PV("u.",c("x","y"))
		feq = PV("feq[",1:9-1,"]")
		f = PV("f[",1:9-1,"]")
		T = PV("T")
		geq = PV("geq[",1:5-1,"]")
		g = PV("g[",1:5-1,"]")

		flow = MRT_eq(d2q9, rho, u * rho)
		temp = MRT_eq(d2q5, T, u * T)

?>

#define pi 3.141592653589793116

CudaDeviceFunction real_t getRho(){
	return <?R C(sum(f)) ?> ;
}
    
CudaDeviceFunction real_t getT()
{
	return <?R C(sum(g)) ?> ;
}

CudaDeviceFunction vector_t getU(){
	real_t d = f[8] + f[7] + f[6] + f[5] + f[4] + f[3] + f[2] + f[1] + f[0];
	vector_t u;
	u.x = f[8] - f[7] - f[6] + f[5] - f[3] + f[1];
	u.y = -f[8] - f[7] + f[6] + f[5] - f[4] + f[2];

	u.x /= d;
	u.y /= d;
	u.z = 0.0;
	return u;
}



CudaDeviceFunction float2 Color() {
        float2 ret;
        ret.x = getT();
        if (NodeType == NODE_Solid){
                ret.y = 0;
        } else {
                ret.y = 1;
        }
        return ret;
}

CudaDeviceFunction void SetEquilibrum(real_t rho, real_t Jx, real_t Jy)
{
f[0] = ( rho*2. + ( -Jy*Jy - Jx*Jx )/rho*3. )*2./9.;
f[1] = ( rho*2. + ( -Jy*Jy/rho + ( 1 + Jx/rho )*Jx*2. )*3. )/18.;
f[2] = ( rho*2. + ( -Jx*Jx/rho + ( 1 + Jy/rho )*Jy*2. )*3. )/18.;
f[3] = ( rho*2. + ( -Jy*Jy/rho + ( -1 + Jx/rho )*Jx*2. )*3. )/18.;
f[4] = ( rho*2. + ( -Jx*Jx/rho + ( -1 + Jy/rho )*Jy*2. )*3. )/18.;
f[5] = ( rho + ( Jy + Jx + ( Jy*Jy + ( Jx + Jy*3. )*Jx )/rho )*3. )/36.;
f[6] = ( rho + ( Jy - Jx + ( Jy*Jy + ( Jx - Jy*3. )*Jx )/rho )*3. )/36.;
f[7] = ( rho + ( -Jy - Jx + ( Jy*Jy + ( Jx + Jy*3. )*Jx )/rho )*3. )/36.;
f[8] = ( rho + ( -Jy + Jx + ( Jy*Jy + ( Jx - Jy*3. )*Jx )/rho )*3. )/36.;

}

CudaDeviceFunction void Init() {
	real_t rho, ux, uy;
	rho = (1+Pressure*3);

	ux=0;
	uy=0;
	
	ux = Velocity+ux;

	real_t T = Temperature;
	<?R C( g, subst(temp$feq, u.x=0, u.y=0) ); ?>
	
	SetEquilibrum(
		rho,
		ux*rho,
		uy*rho
	);
}


CudaDeviceFunction void Run() {
    switch (NodeType & NODE_BOUNDARY) {
	case NODE_Solid:
	case NODE_Wall:
		BounceBack();
		break;
	case NODE_NMovingWall:
		NMovingWall();
		break;
		
    }
    if (NodeType & NODE_MRT)
    {
		CollisionMRT();
    }
}

CudaDeviceFunction void NMovingWall()
{
	real_t u[2];
	real_t rho;
	u[0] = MovingWallVelocity;
	u[1] = 0.0;
	rho = 1. / (1 + u[1]);
	rho *= (f[0] + f[1] + f[3]) + 2 * (f[2] + f[5] + f[6]);


	f[4] = f[2] - (2. / 3.) * rho*u[1];
	f[7] = f[5] + 0.5*(f[1] - f[3]) - 0.5 * rho*u[0] - (1. / 6.) * rho*u[1];
	f[8] = f[6] + 0.5*(f[3] - f[1]) + 0.5 * rho*u[0] - (1. / 6.) * rho*u[1];


	//TIn[4] = TIn[2];
	g[4] = g[2];


	AddToNMovingWallForce( -(<?R C(f[5+1]*d2q9[5+1,1] + f[6+1]*d2q9[6+1,1])?>) ); // in - przed kolizja 
	AddToMovingWallPower( -MovingWallVelocity*(<?R C(f[5+1]*d2q9[5+1,1] + f[6+1]*d2q9[6+1,1])?>) );
}


CudaDeviceFunction void BounceBack()
{
	real_t tmp;
	tmp = f[2];
	f[2] = f[4];
	f[4] = tmp;
	tmp = f[1];
	f[1] = f[3];
	f[3] = tmp;
	tmp = f[6];
	f[6] = f[8];
	f[8] = tmp;
	tmp = f[5];
	f[5] = f[7];
	f[7] = tmp;

	tmp = g[2];
	g[2] = g[4];
	g[4] = tmp;
	tmp = g[1];
	g[1] = g[3];
	g[3] = tmp;
}



CudaDeviceFunction void CollisionMRT()
{
	real_t rho = <?R C(sum(f)) ?>;
	vector_t u;
	<?R C(u,(f %*% d2q9)[1:2] * rho ^ (-1)) ?>
	real_t T = <?R C(sum(g)) ?>;

	<?R
		omega = PV("omega")
		omegaT = PV("omegaT")
		C(f, (1-omega)*f + omega * flow$feq);
		C(g, (1-omegaT)*g + omegaT * temp$feq);
	?>		

	AddToCountCells(1);
	AddToTotalTempSqr(T*T);

    if ((NodeType & NODE_BOUNDARY) == NODE_NMovingWall)
    {
		AddToNMovingWallForce(<?R C(f[7+1]*d2q9[7+1,1] + f[8+1]*d2q9[8+1,1]) ?>);	// out - po kolozji
		AddToMovingWallPower(MovingWallVelocity*(<?R C(f[7+1]*d2q9[7+1,1] + f[8+1]*d2q9[8+1,1]) ?>));
    }
}

