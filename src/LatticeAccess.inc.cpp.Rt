<?R
	source("conf.R")
        c_header()
?>
/** \file LatticeAccess.cu
*/

#include "Consts.h"
#include "Global.h"
#include "Lattice.h"
#include <mpi.h>

#ifndef STORAGE_TYPE
  #define storage_to_real(x__) x__
  #define real_to_storage(x__) x__
#elif STORAGE_TYPE == 16
  #include <cuda_fp16.h>
  inline CudaDeviceFunction real_t storage_to_real(storage_t v) { return __short_as_half(v); }
  inline CudaDeviceFunction storage_t real_to_storage(real_t v) { return __half_as_short(v); }
#elif STORAGE_TYPE == 32
  inline CudaDeviceFunction real_t storage_to_real(storage_t v) { return __int_as_float(v); }
  inline CudaDeviceFunction storage_t real_to_storage(real_t v) { return __float_as_int(v); }
#elif STORAGE_TYPE == 64
  inline CudaDeviceFunction real_t storage_to_real(storage_t v) { return __longlong_as_double(v); }
  inline CudaDeviceFunction storage_t real_to_storage(real_t v) { return __double_as_longlong(v); }
#endif

#ifdef STORAGE_SHIFT
  inline CudaDeviceFunction real_t storage_to_real_shift(const storage_t& v, const real_t& shft) { return storage_to_real(v) + shft; }
  inline CudaDeviceFunction storage_t real_to_storage_shift(const real_t& v, const real_t& shft) { return real_to_storage(v - shft); }
#else
  #define storage_to_real_shift(x__,y__) storage_to_real(x__)
  #define real_to_storage_shift(x__,y__) real_to_storage(x__)
#endif

/// Get only type of node
template <class N> CudaDeviceFunction void LatticeContainer::getType(N & node)
{
  node.NodeType = NodeType[(node.x_ + nx*node.y_ + nx*ny*node.z_)];

<?R #	InOut("type", "in", Density); ?>
}

/// Push all densities

<?R

  make.context = function(buf, pocket=FALSE) {
    MContext = list()
    MContext$Pocket = ""
    MContext$PocketMove = FALSE
    MContext$Offset = list()
    for ( i in 1:length(Margin) ) MContext$Offset[[i]] = PV(0L)
    if (missing(buf)) stop("No Buffor provided");
    if (pocket) {
      MContext$Pocket = "pocket" ?>
      FTabs <?%s MContext$Pocket ?> = <?%s buf ?>; <?R
      MContext$PocketMove = TRUE
    } else {
      MContext$Pocket = buf
      MContext$PocketMove = FALSE
    }
    MContext
  }

  move.pocket = function(i,offset, MContext) {
      off = MContext$Offset[[i]]
      v = offset - off;
      if (!is.zero(v)) { ?>
        <?%s MContext$Pocket?>.<?%s Margin[[i]]$name ?> += <?R C(v,float=FALSE) ?>; <?R
      }
      MContext$Offset[[i]] = offset;
      MContext
  }

  if.apply = function(table, conditions, selection, fun) {
    n = length(conditions)
    if (ncol(table) != n) stop("number of columns in table should be equal to the number of conditions in if.apply")
    ord = do.call(order,data.frame(table))
    ord = ord[selection[ord]]
    req = function(j,l) {
#      cat("// j:",paste(j,collapse=","),l,"\n");
      if (l > n) {
        sapply(j,fun)
      } else {
        v = table[j,l]
#        cat("// v:",paste(v,collapse=","),"\n");
        sel1 = v == 1
        sel2 = v == -1
        sel3 = v == 0
        if (any(sel1)) { ?>
                 if (<?R C(conditions[l],float=FALSE) ?> < 0) { <?R
          req(j[sel1],l+1);
          if (any(sel2)) {?>
                 } else { <?R
            req(j[sel2],l+1);
          } ?>
                 } <?R
        } else if (any(sel2)) { ?>
                 if (<?R C(conditions[l],float=FALSE) ?> >= 0) { <?R
          req(j[sel2],l+1); ?>
                 } <?R
        }
        if (any(sel3)) {
          req(j[sel3],l+1);
        }
      }
    }
    req(ord,1)
  }

#  No x move:
  no.x.move = FALSE

  field.access.one = function(d,m,off,access) {
          if (access == "get") {  ?>
        <?%s d ?> = <?%s m ?>[<?R C(off,float=FALSE) ?>]; <?R
   } else if (access == "getsum") {  ?>
        <?%s d ?> += <?%s m ?>[<?R C(off,float=FALSE) ?>]; <?R
   } else if (access == "set") { ?>
        <?%s m ?>[<?R C(off,float=FALSE) ?>] = <?%s d ?>; <?R
   } else if (access == "add") { ?>
        <?%s m ?>[<?R C(off,float=FALSE) ?>] += <?%s d ?>; <?R
   } else if (access == "atomicadd") { ?>
        atomicAddP(&( <?%s m ?>[<?R C(off,float=FALSE) ?>] ),<?%s d ?>); <?R
   } else stop("Unknown access type in field.access.one");
  }


  field.access = function(d,f,p,dp,access,pattern,MContext) {
    if (pattern == "get") {
     ret = f$get_offsets(p,dp)
    } else if (pattern == "put") {
     ret = f$put_offsets(p)
    } else {
     stop("Unknown access in field.access")
    }
    if (f$simple_access) {
     if (access == "add" || access == "atomicadd") access = "set"
     if (access == "getsum" ) access = "get"
    }
    if (MContext$PocketMove) for (m in 1:27) if (ret$Selection[m]) {
      if (no.x.move) {
        MContext=move.pocket(m, subst(ret$Offset[m],p[1]==-dp[1]),MContext)
      } else {
        MContext=move.pocket(m, ret$Offset[m],MContext)
      }
    }
    if (access == "getsum" ) { ?>
      <?%s d ?> = 0.0f; <?R
    }

#print(ret)
    if.apply(ret$Table,ret$Conditions,ret$Selection,function(m) {
      field.access.one(d, paste(MContext$Pocket, Margin[[m]]$name, sep="."), ret$Offset[m] - MContext$Offset[[m]], access);
    })
    MContext
  }

  load.field = function(d,f,p,dp,MContext) field.access(d=d,f=f,p=p,dp=dp,pattern="get",access="get",MContext=MContext)
  save.field = function(d,f,p,MContext)    field.access(d=d,f=f,p=p,      pattern="put",access="set",MContext=MContext)

# mc = require(parallel)
# mc = require(multicore)
 mc = FALSE
 if (!mc) {
  txtlapply = function(x,FUN,...,mc.cores=1) lapply(x,FUN,...)
 } else {
  txtlapply = function(x,FUN,...,mc.cores=5) {
   ret = mclapply(x,function(x) {
    f = textConnection("txt__","w")
    sink(f)
    ret=FUN(x)
    close(f)
    list(ret=ret, txt=txt__);
   },...,mc.cores = mc.cores)
   lapply(ret, function(x) {
    writeLines(x$txt)
    x$ret
   })
  }
 }



 all_stages = c(rows(Stages),list(
	list(
		load.densities = rep(TRUE, nrow(DensityAll)),
		save.fields = rep(TRUE, nrow(Fields)),
		suffix=""
	),
	list(
		load.densities = !DensityAll$param,
		save.fields = !Fields$parameter,
		suffix="_noparam"
	),
	list(
		load.densities = DensityAll$param,
		save.fields = Fields$parameter,
		suffix="_param"
	)
 ))



  storage_convert = function(type, val, f){
    shift = f$shift
    if (shift$type == "no_shift") {
      sprintf("%s(%s)", type, val)
    } else if (shift$type == "single_shift") {
      sprintf("%s_shift(%s, static_cast<real_t>(%.15g))", type, val, shift$val)
    } else {
      stop("unknown type of shift")
    }
  }

  storage_to_real = function(val,f) storage_convert("storage_to_real",val,f)
  real_to_storage = function(val,f) storage_convert("real_to_storage",val,f)



 txtlapply(all_stages, function(s) {
# lapply(1:length(s_list), function(s_i) {
# for (s in c(rows(Stages),list(NULL))) {
  if (is.null(s$load.densities))  s$load.densities = DensityAll[,s$tag];
  if (is.null(s$save.fields))  s$save.fields = Fields[,s$tag];
  if (is.null(s$suffix))  s$suffix = paste("_",s$name,sep="")

resolve.symmetries = function(D) {
  if (nrow(D) < 1) return();
  dp = D[,c("dx","dy","dz"),drop=FALSE]
  for (i in 1:3) {
    plus = dp[,i] < 0
    minus = dp[,i] > 0
    s = names(symmetries)[i]
    ch = c("X","Y","Z")[i]
    if (any(plus | minus)) { ?>
  switch (node.NodeType & NODE_SYM<?%s ch ?>) {
<?R if (any(plus)) { ?>
  case NODE_Symmetry<?%s ch ?>_plus:
<?R C(PV("node.",D[plus, "name"]), PV("node.",D[plus, s])) ?>
  break;
<?R }
    if (any(minus)) { ?>
  case NODE_Symmetry<?%s ch ?>_minus:
<?R C(PV("node.",D[minus, "name"]), PV("node.",D[minus, s])) ?>
    break;
<?R } ?>
  }
<?R }
  }
}

?>
template <class N> CudaDeviceFunction void LatticeContainer::pop<?%s s$suffix ?>(N & node)
{
	storage_t val;
<?R
  con = make.context("in",pocket=TRUE);
  for (d in rows(Density)[s$load.densities]) { ?>
//--------------------------- <?%s d$name ?> ----------------------<?R
    f = rows(Fields)[Fields$name == d$field][[1]]
    p = PV(c("node.x_","node.y_","node.z_"));
    dp = c(-d$dx, -d$dy, -d$dz)
    con=load.field("val", f, p, dp,con) ?>
	<?%s paste("node",d$name,sep=".") ?> = <?%s storage_to_real("val",f)?>; <?R
  }
  if (Options$autosym) resolve.symmetries(Density[s$load.densities,,drop=FALSE])
?>
}

template <class N> CudaDeviceFunction void LatticeContainer::push<?%s s$suffix ?>(N & node)
{	storage_t val;
<?R
  con = make.context("out",pocket=TRUE);
  for (f in rows(Fields)[s$save.fields]) { ?>
//--------------------------- <?%s f$name ?> ----------------------
  val = <?%s real_to_storage(paste("node",f$name,sep="."),f) ?>; <?R
    p = PV(c("node.x_","node.y_","node.z_"));
    con=save.field("val", f, p, con)
  }?>
}
<?R if (ADJOINT) { ?>
template <class N> CudaDeviceFunction void LatticeContainer::push<?%s s$suffix ?>_adj(N & node)
{
<?R
  con = make.context("adjout",pocket=TRUE);
  for (d in rows(Density)[s$load.densities]) { ?>
//--------------------------- <?%s d$name ?> ----------------------<?R
    con = field.access(
     d=paste("node",d$adjoint_name,sep="."),
     f=rows(Fields)[Fields$name == d$field][[1]],
     p=PV(c("node.x_","node.y_","node.z_")),
     dp=c(-d$dx, -d$dy, -d$dz),
     pattern="get",
     access="atomicadd",
     MContext=con
    )
  }?>
}

template <class N> CudaDeviceFunction void LatticeContainer::pop<?%s s$suffix ?>_adj(N & node)
{
<?R
  con = make.context("adjin",pocket=TRUE);
  for (f in rows(Fields)[s$save.fields]) { ?>
//--------------------------- <?%s f$name ?> ----------------------<?R
    p = PV(c("node.x_","node.y_","node.z_"));
    con = field.access(
     d=paste("node",f$adjoint_name,sep="."),
     f=f,
     p=PV(c("node.x_","node.y_","node.z_")),
     pattern="put",
     access="getsum",
     MContext=con
    )
  }?>
}
<?R } # end of ADJOINT part ?>
<?R }) ?>


<?R

 job_tab = do.call(rbind,
  lapply(seq_len(nrow(Fields)), function(i) {
   f = rows(Fields)[[i]]
   expand.grid(field=i,  dz=f$minz:f$maxz, dy=f$miny:f$maxy, dx=f$minx:f$maxx)
  })
 )


# txtlapply(rows(job_tab), function(job) {
#  f = rows(Fields)[[job$field]]
#  dx = job$dx
#  dy = job$dy
#  dz = job$dz

suffix = ""
if (Options$autosym) suffix = "0"

    for (f in rows(Fields)) {
    if (! f$big) {
    for (dz in f$minz:f$maxz) {
    for (dy in f$miny:f$maxy) {
    for (dx in f$minx:f$maxx) { ?>
template <>
CudaDeviceFunction real_t LatticeContainer::load<?%s suffix ?>_<?%s f$nicename ?> < <?%d dx ?>, <?%d dy ?>, <?%d dz ?> > (const int & x, const int & y, const int & z, const flag_t & nt)
{
  storage_t ret; <?R
  con = make.context("in");
  p = PV(c("x","y","z"));
  dp = c(dx, dy, dz)
  con=load.field("ret", f, p, dp, con) ?>
  return <?%s storage_to_real("ret",f)?>;
}
<?R }}} ?>

template <int DY, int DZ>
CudaDeviceFunction real_t LatticeContainer::load_<?%s f$nicename ?> (const int & x, const int & y, const int & z, const flag_t & nt, const int & dx)
{
  switch(dx) {
<?R  for (dx in f$minx:f$maxx) { ?>
    case <?%d dx ?>: return load_<?%s f$nicename ?> < <?%d dx ?>, DY, DZ > (x, y, z, nt);
<?R } ?>
    default: return NAN;
  }
}
template < int DZ >
CudaDeviceFunction real_t LatticeContainer::load_<?%s f$nicename ?> (const int & x, const int & y, const int & z, const flag_t & nt, const int & dx, const int & dy)
{
  switch(dy) {
<?R  for (dy in f$miny:f$maxy) { ?>
    case <?%d dy ?>: return load_<?%s f$nicename ?> < <?%d dy ?>, DZ > (x, y, z, nt, dx);
<?R } ?>
    default: return NAN;
  }
}
CudaDeviceFunction real_t LatticeContainer::load_<?%s f$nicename ?>  (const int & x, const int & y, const int & z, const flag_t & nt, const int & dx, const int & dy, const int & dz)
{
  switch(dz) {
<?R  for (dz in f$minz:f$maxz) { ?>
    case <?%d dz ?>: return load_<?%s f$nicename ?> < <?%d dz ?> > (x, y, z, nt, dx, dy);
<?R } ?>
    default: return NAN;
  }
}
<?R } else { ?>
CudaDeviceFunction real_t LatticeContainer::load_<?%s f$nicename ?>  (const int & x, const int & y, const int & z, const flag_t & nt, const int & dx, const int & dy, const int & dz)
{
  storage_t ret; <?R
  con = make.context("in");
  p = PV(c("x","y","z"));
  dp = PV(c("dx","dy","dz"));
  con=load.field("ret", f, p, dp, con) ?>
  return <?%s storage_to_real("ret",f)?>;
}


<?R
    }
    }
?>

<?R
if (Options$autosym) {
  sym_load = function(f,d,i,sig=1) {
   if (i > 3) {
    if (sig < 0) { ?>
    return -load0_<?%s f$nicename ?> < <?%d d[1] ?>, <?%d d[2] ?>, <?%d d[3] ?> > (x,y,z,nt);
<?R } else { ?>
    return load0_<?%s f$nicename ?> < <?%d d[1] ?>, <?%d d[2] ?>, <?%d d[3] ?> > (x,y,z,nt);
<?R }
   } else {
    s = names(symmetries)[i]
    fn = f[[s]]
    if (substr(fn,1,1) == "-") {
     nsig = -1;
     fn = substr(fn,2,nchar(fn))
    } else {
     nsig = 1;
    }
    si = which(Fields$name == fn)
    sf = rows(Fields)[[si]]
    sd = d
    sd[i] = -sd[i]
    ch = c("X","Y","Z")[i]
    if (d[i] > 0) { ?>
    if ((nt & NODE_SYM<?%s ch ?>) == NODE_Symmetry<?%s ch ?>_plus) { <?R sym_load(sf,sd,i+1,sig*nsig) ?> }
    <?R } else if (d[i] < 0) { ?>
    if ((nt & NODE_SYM<?%s ch ?>) == NODE_Symmetry<?%s ch ?>_minus) { <?R sym_load(sf,sd,i+1,sig*nsig) ?> }
    <?R } ?>
    <?R sym_load(f,d,i+1,sig)
    }
  }

    for (f in rows(Fields)) {
    for (dz in f$minz:f$maxz) {
    for (dy in f$miny:f$maxy) {
    for (dx in f$minx:f$maxx) { ?>
template <>
CudaDeviceFunction real_t LatticeContainer::load_<?%s f$nicename ?> < <?%d dx ?>, <?%d dy ?>, <?%d dz ?> > (const int & x, const int & y, const int & z, const flag_t & nt) {
<?R sym_load(f,c(dx,dy,dz),1); ?>
}

<?R
}}}}
}
 ?>
