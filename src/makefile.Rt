<?R source("conf.R"); hash_header(); ?>

MODEL=<?%s MODEL ?>       # model (directory) to use
ADJOINT=<?%s ADJOINT ?>   # calculate adjoint: 1-on, 0-off
GRAPHICS=<?%s GRAPHICS ?> # GLUT graphics: 1-on, 0-off
DOUBLE=<?%s DOUBLE ?>     # precision: 1-double, 0-float
GRID3D=0                  # use 3D block grid (only avaliable on capability 2.x): 1-on, 0-off
ARCH=sm_11                # CUDA architecture: sm_10 for capability 1.0, sm_13 for capability 
#CPU=1

MPI_INCLUDES = /usr/include/mpi/
MPI_LIBS     = /usr/lib/mpich/lib/
MPI_OPT      = -L$(MPI_LIBS) -I$(MPI_INCLUDES) -lmpi #-Xptxas -v

ifdef MPI
	MPI_OPT+= -L$(MPI)/lib -I$(MPI)/include
endif

SOURCE_CU=Global.cu Lattice.cu main.cu vtkLattice.cu vtkOutput.cu cross.cu cuda.cu LatticeContainer.cu Dynamics.c
SOURCE=$(SOURCE_CU)
HEADERS=Global.h gpu_anim.h LatticeContainer.h Lattice.h Node.h Region.h vtkLattice.h vtkOutput.h cross.h gl_helper.h Dynamics.h Dynamics.hp types.h Node_types.h DataLine.h pugixml.hpp pugiconfig.hpp

OBJ  = vtkOutput.o cuda.o Global.o Lattice.o vtkLattice.o cross.o pugixml.o Geometry.o def.o

AOUT=main

NVCC=nvcc
CCTXT=NVCC

OPT=$(MPI_OPT) -g
NVOPT=
# OPT+=-D CROSS_SYNC


ifeq '$(strip $(ADJOINT))' '1'
 OPT+=-D ADJOINT
 SOURCE_CU+=Dynamics_b.c ADTools.cu
 HEADERS+=Dynamics_b.hp 
 RTOPT+=ADJOINT=1
endif

ifeq '$(strip $(GRAPHICS))' '1'
 OPT+=-D GRAPHICS -lglut
endif

ifeq '$(strip $(DIRECT_MEM))' '1'
 OPT+=-D DIRECT_MEM
endif

ifdef ARCH
 NVOPT+=-arch $(strip $(ARCH))
endif

ifeq '$(strip $(GRID3D))' '1'
 OPT+=-D GRID_3D
endif

ifeq '$(strip $(DOUBLE))' '1'
 OPT+=-D CALC_DOUBLE_PRECISION
endif

ifeq '$(strip $(CPU))' '1'
 OPT+=-D CROSS_CPU
endif

MODELPATH=$(strip $(MODEL))
all:$(AOUT)
	@echo "  DONE       $^"

.PRECIOUS:$(SOURCE) $(HEADERS)

source:Dynamics.R conf.R $(SOURCE) $(HEADERS)

ifdef CPU

%.cpp:%.cu
	cp $< $@

%.o:%.cpp $(HEADERS)
	@echo "  G++        $<"
	@g++ -c $< -o $@ $(OPT)

main:main.o $(OBJ)
	@echo "  LINKING    $@"
	@mpic++ $^ -o $@ $(OPT)

else

%.o:%.cpp $(HEADERS)
	@echo "  G++        $<"
	@g++ -c $< -o $@ -I/home/llaniewski/cuwork/drivers/cuda/include/

%.o:%.cu $(HEADERS)
	@echo "  NVCC       $<"
	@$(NVCC) -c $< -o $@ $(OPT) $(NVOPT)

main:main.o $(OBJ)
	@echo "  LINKING    $@ (nvcc)"
	@$(NVCC) $^ -o $@ $(OPT) $(NVOPT) -lcudart

endif

clear:
	@echo "  RM         ALL"
#	@rm `ls | grep -v -e ^makefile$$ -e .mk$$` 2>/dev/null; true
	@rm *.o main 2>/dev/null; true

