<?R
        source("conf.R")
	c_header()
?>

/** \file Node.hpp
        Defines Node based on supplied Dynamics
*/

<?R
	paste0_s = function(...) if (any(sapply(list(...),length) < 1)) character(0) else paste0(...)
	macros = NULL
	AddMacro = function(name, definition) {
		token = sub("[(].*","",name)
		macros <<- rbind(macros, data.frame(name=name, token=token, definition=definition))
	}
	f = Fields
	AddMacro(paste0_s(f$nicename,"(...)"), paste0_s("acc.template load_", f$nicename, "< __VA_ARGS__ >()"))
	AddMacro(paste0_s(f$nicename,"_dyn(...)"), paste0_s("acc.template load_", f$nicename, "(__VA_ARGS__)"))
	XYZ = c("X","Y","Z")
	AddMacro(XYZ, paste0_s("acc.get", XYZ,"()"))
	AddMacro("NodeType", paste0_s("acc.getNodeType()"))
	AddMacro("Time", paste0_s("(constData.iter)"))
	AddMacro("SyntheticTurbulence(x__,y__,z__)","constData.getST(x__,y__,z__)")
	AddMacro("average_iter","(constData.iter - constData.reset_iter)")
	P = expand.grid(x=0:2,y=0:2,z=0:2)
	Q = paste("Q",P$x,P$y,P$z,sep="")[-1]
	AddMacro(Q, paste0_s("(acc.getQ(",seq_along(Q)-1,"))"))
	s = ZoneSettings[! as.logical(ZoneSettings$preload),,drop=FALSE]
	AddMacro(s$name, paste0_s("constData.ZoneSetting(", s$Index, ", acc.getNodeType() >> ZONE_SHIFT)"))
	s = ZoneSettings
	AddMacro(paste0_s(s$name,"_DT"), paste0_s("constData.ZoneSetting_DT(", s$Index, ", acc.getNodeType() >> ZONE_SHIFT)"))
	g = Globals
	g$opstr = ifelse(g$op == "SUM", "Add", "Max")
	AddMacro(paste0_s("AddTo", g$name, "(x__)"), paste0_s("glob.", g$opstr, "ToGlobal<", g$Index, ">(x__, acc.getNodeType())"))
	n = NodeTypes
	AddMacro(paste0_s("Iam",n$name),paste0_s("((acc.getNodeType() & ", n$groupIndex, ") == ", n$Index,")"))
	n = NodeTypeGroups
	AddMacro(paste0_s("Iam",n$name),paste0_s("(acc.getNodeType() & ", n$Index, ")"))
?>

template <eCalculateGlobals G>
struct CalculateGlobals {};

template <>
struct CalculateGlobals<NoGlobals> {
	template <int I>
	CudaDeviceFunction inline void AddToGlobal(const real_t& x, const flag_t& NodeType) {}
	template <int I>
	CudaDeviceFunction inline void MaxToGlobal(const real_t& x, const flag_t& NodeType) {}
	CudaDeviceFunction void inline Glob() {}
};

template <>
struct CalculateGlobals<IntegrateGlobals> {
	real_t globals[GLOBALS];
	CudaDeviceFunction CalculateGlobals() {
		for (int i=0; i<GLOBALS; i++) {
            globals[i] = 0.0;
		}
	}
	template <int I>
	CudaDeviceFunction inline void AddToGlobal(const real_t& x, const flag_t& NodeType) {
		globals[I] = globals[I] + x;
		if (I < SUM_GLOBALS) {
			globals[GLOBALS_Objective] = globals[GLOBALS_Objective] + constData.ZoneSetting(I + IN_OBJ_OFFSET, NodeType >> ZONE_SHIFT);
		}
	}
	template <int I>
	CudaDeviceFunction inline void MaxToGlobal(const real_t& x, const flag_t& NodeType) {
		globals[I] = max(globals[I], x);
	}
	CudaDeviceFunction void inline Glob() {
		for (int i=0; i<GLOBALS; i++) {
			if (i < SUM_GLOBALS) {
            	CudaAtomicAddReduceWarp(&constData.Globals[i], globals[i]);
			} else {
				CudaAtomicMaxReduceWarp(&constData.Globals[i], globals[i]);
			}
		}
	}
};

template <>
struct CalculateGlobals<OnlyObjective> {
	real_t obj;
	CudaDeviceFunction CalculateGlobals() {
		obj = 0.0;
	}
	template <int I>
	CudaDeviceFunction inline void AddToGlobal(const real_t& x, const flag_t& NodeType) {
		if (I < SUM_GLOBALS) {
			obj = obj + constData.ZoneSetting(I + IN_OBJ_OFFSET, NodeType >> ZONE_SHIFT);
		}
	}
	template <int I>
	CudaDeviceFunction inline void MaxToGlobal(const real_t& x, const flag_t& NodeType) {}
	CudaDeviceFunction void inline Glob() {
        CudaAtomicAddReduceWarp(&constData.Globals[GLOBALS_Objective], obj);
	}
};

struct CalculateGlobalsAdjoint {
	real_t duals[ZONESETTINGS];
	real_t duals_dt[ZONESETTINGS];
	CudaDeviceFunction CalculateGlobalsAdjoint() {
		for (int i=0; i<ZONESETTINGS; i++) {
            duals[i] = 0.0;
			duals_dt[i] = 0.0;
		}
	}
	template <int I>
	CudaDeviceFunction inline real_t& BRef() { return duals[I]; }
	template <int I>
	CudaDeviceFunction inline real_t& DTBRef() { return duals_dt[I]; }
	CudaDeviceFunction void inline Glob(const flag_t& NodeType) {
        int z = NodeType >> ZONE_SHIFT;
		for (int nz = 0; nz < constData.MaxZones; nz++) if (CudaSyncWarpOr(nz == z)) {
			for (int i=0; i<ZONESETTINGS; i++) {
				real_t val;
				val = (nz == z) ? duals[i] : 0.0f;
    	        CudaAtomicAddReduceWarp(constData.ZoneSettingGrad( i , nz), val);
				val = (nz == z) ? duals_dt[i] : 0.0f;
	            CudaAtomicAddReduceWarp(constData.ZoneSettingGrad( i + DT_OFFSET, nz), val);
			}
		}
	}
};


#ifndef NODE_HPP
#define NODE_HPP

template < class LA, eOperationType I, eCalculateGlobals G, eStage S> struct Node {
        CudaDeviceFunction inline void RunElement(){};
		CudaDeviceFunction inline Node(const LA& acc_) {};
};

<?R
	writeLines(paste("#define", macros$name, macros$definition, sep=" "))

for (tp in rows(Dispatch)) {
	s = Stages[Stages$name == tp$stage_name, ];
	ifdef(tp$adjoint_ver)
	suff=tp$suffix
	?>
//-------------------[ <?%20s paste("Node",tp$suffix,sep="") ?> --- Action:<?%5s tp$Stream ?>, Globals:<?%5s tp$Globals ?> ]-------------------- <?R
        T1 = switch(tp$Action, No="Primal", Adj="Adjoint", Opt="Optimize", SAdj="SteadyAdjoint")
        T2 = switch(tp$Globals, No="NoGlobals", Globs="IntegrateGlobals", Obj="OnlyObjective")
        T3 = tp$stage_name
?>
template < class LA > struct Node < LA, <?%s T1 ?>, <?%s T2 ?>, <?%s T3 ?> > {
	const LA& acc;
	CalculateGlobals< <?%s T2 ?> > glob;
<?R
		for(setting in rows(ZoneSettings)) if (setting$preload) { ?>
	real_t <?%s setting$name ?>; <?R
		}
?>
	CudaDeviceFunction inline Node(const LA& acc_):acc(acc_) {
		int z = NodeType >> ZONE_SHIFT; <?R
		for(setting in rows(ZoneSettings)) if (setting$preload) { ?>
		<?%s setting$name ?> =  constData.ZoneSetting(<?%s setting$Index ?>, z); <?R
		} ?>
	};
	CudaDeviceFunction void inline Glob() {
		glob.Glob();
	}
	<?R
		if (! tp$adjoint) { ?>
	#include "Dynamics.h" <?R
		} else { ?>
	#undef DYNAMICS_B_LOADED <?R
		} ?>
//	#include "Dynamics.h"
#ifdef CALC_DOUBLE_PRECISION
	#include "Dynamics.c"
#else
	#include "Dynamics_sp.c"
#endif <?R
		if (tp$adjoint) {
		        if (tp$Globals == "Globs") { ?>
        #include "DynamicsS_b.c" <?R
                        } else { ?>
        #include "Dynamics_b.c" <?R
                        } ?>
	#include "Dynamics_adj.c" <?R
		}
	if (tp$stage) { ################################################################
		if (tp$Stream == "Opt") { ?>
	CudaDeviceFunction inline void Opt() { <?R
		if ("DesignSpace" %in% NodeTypes$name) { ?>
	        if ((NodeType & NODE_DESIGNSPACE) == NODE_DesignSpace) { <?R
		        for (d in rows(Density)) {
                                if (d$parameter) { ?>
                <?%s d$name ?> += <?%s d$adjoint_name ?>*Descent;
                if (<?%s d$name ?> > 1.0f) <?%s d$name ?> = 1.0f;
                if (<?%s d$name ?> < 0.0f) <?%s d$name ?> = 0.0f; <?R
                                }
                        }?>
                } <?R
		} ?>
        } <?R
	        } ?>


	<?R
	if (tp$Stream == "Adj") {
	        for (d in rows(Density)) if (d$parameter) {
       		        if (tp$Globals == "Globs") { ?>
        real_t old_<?%s d$adjoint_name ?>; <?R
			}
		}
	} ?>

	CudaDeviceFunction inline void LoadElement() {
		<?R
		if (tp$Stream == "Adj") { ?>
		acc.pop_<?%s s$name ?>(*this);
		acc.pop_<?%s s$name ?>_adj(*this);<?R
		        for (d in rows(Density)) if (d$parameter) {
        		        if (tp$Globals == "Globs") { ?>
                old_<?%s d$adjoint_name ?> = <?%s d$adjoint_name ?>; <?R
                                }
	                        if (tp$zeropar) { ?>
                <?%s d$adjoint_name ?> = 0.0f; <?R
                                }
                        }
		} else if (tp$Stream == "Opt") { ?>
		acc.pop_param(*this);
		acc.pop_param_adj(*this); <?R
		} else if (tp$Stream == "Init") {
		} else if (tp$Stream == "No") { ?>
	        acc.pop_<?%s s$name ?>(*this); <?R
		} else {
		        stop(paste("Unknown Action:",tp$Stream,"in Dispatch (cuda.cu / conf.R)"));
		} ?>
	}
	CudaDeviceFunction inline void SaveElement() {
		<?R
		if (tp$Stream == "Adj") {
		        if (tp$Globals == "Globs") for (d in rows(Density)) if (d$parameter) { ?>
                old_<?%s d$adjoint_name ?> -= <?%s d$adjoint_name ?>;
                AddToAdjointRes(old_<?%s d$adjoint_name ?>*old_<?%s d$adjoint_name ?>); <?R
                        } ?>
		acc.push_<?%s s$name ?>_adj(*this); <?R
		} else if (tp$Stream == "Opt") { ?>
		acc.push_param(*this); <?R
		} else if (tp$Stream == "Init") { ?>
		acc.push_<?%s s$name ?>(*this); <?R
		} else if (tp$Stream == "No") { ?>
		acc.push_<?%s s$name ?>(*this); <?R
		} else {
		        stop(paste("Unknown Action:",tp$Stream,"in Dispatch (cuda.cu / conf.R)"));
		} ?>
	}
	CudaDeviceFunction inline void ExecElement() {
		<?R
		if (tp$Stream == "Adj") { ?>
		Run_b(); <?R
		} else if (tp$Stream == "Opt") { ?>
		Opt(); <?R
		} else if (tp$Stream == "Init") { ?>
		Init();<?R
		} else if (tp$Stream == "No") { ?>
		<?%s s$main ?>(); <?R
		} else {
		        stop(paste("Unknown Action:",tp$Stream,"in Dispatch (cuda.cu / conf.R)"));
		} ?>
	}
	CudaDeviceFunction inline void RunElement() {
		LoadElement();
		ExecElement();
		SaveElement();
		Glob();
	} <?R
        } ########################################################################################### ?>
}; <?R
} 
cat("\n")
ifdef()

	writeLines(paste("#undef", macros$token, sep=" "))
?>

#endif // NODE_HPP
