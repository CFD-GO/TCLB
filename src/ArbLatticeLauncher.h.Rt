<?R
source("conf.R")
c_header();
?>

#ifndef ARBLATTICELAUNCHER_H
#define ARBLATTICELAUNCHER_H

#include "ArbLatticeContainer.hpp"
#include "LatticeData.hpp"

struct ArbLatticeLauncher {
    ArbLatticeContainer container;

    template <eOperationType I, eCalculateGlobals G, eStage S>
    void RunBorder(CudaStream_t stream, const LatticeData& data) const;
    template <eOperationType I, eCalculateGlobals G, eStage S>
    void RunInterior(CudaStream_t stream, const LatticeData& data) const;

    void pack(CudaStream_t stream) const;
    void unpack(CudaStream_t stream) const;

    void getQuantity(int quant, real_t* host_tab, real_t scale, const LatticeData& data) const;

private:
<?R for (q in rows(Quantities)) { ifdef(q$adjoint);
if (q$adjoint) {
  node = "Node_Adj"
} else {
  node = "Node"
}
?>
    void getQuantity<?%s q$name ?>(<?%s q$type ?>* tab, real_t scale, const LatticeData& data) const;
<?R }
ifdef() ?>
};

#endif  // ARBLATTICELAUNCHER_H
