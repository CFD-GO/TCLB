<?R
        source("conf.R")
	c_header();
?>
#include "Consts.h"
//#include "cuda.h"
#include "pugixml.hpp"
#include "Global.h"
#include <mpi.h>
#ifdef GRAPHICS
	#include "gpu_anim.h"
#endif
#include "cross.h"
#include "Region.h"
//#include "LatticeContainer.h"
class LatticeContainer;
#include "Lattice.h"
#include "vtkLattice.h"
#include "Geometry.h"
#include "def.h"
#include "utils.h"
#include "unit.h"

#include <fstream>
#include <iostream>
#include <vector>
#include <iomanip>
#include <assert.h>

#include "Solver.h"

using namespace std;

void MouseMove( Solver * data, int x, int y, int nx, int ny );
int MainLoop( uchar4* outputBitmap, Solver *d, int ticks );
void MainFree( Solver *d);

/// Solver initializer
/**
	This stuff should be probably in the constructor
*/
	void Solver::Init() {
		iter = 0;
		iter_type = ITER_NORM;
		opt_iter = 0;
		mpi_rank = 0;
		mpi_size = 1;
		steps = 1;
		saveN = 0;
		saveI = 0;
		saveFile = NULL;
		info.outpath[0] ='\0';
	}

/// Solver destructor. Deletes most of the stuff
	Solver::~Solver() {
		if (lattice) delete lattice;
#ifdef GRAPHICS
		if (bitmap) delete bitmap;
#endif
		if (geometry) delete geometry;
	}


/// Initializes the Save mechanism
	void Solver::saveInit(int n){
		n++;
		if (saveN != 0) {
			free(saveFile[0]);
			free(saveFile);
		}
		saveN=n;
		n++;
		saveFile = (char**) malloc(sizeof(char*)*n);
		char * fn = (char*) malloc(sizeof(char )*n*STRING_LEN);
		for (int i=0;i<n;i++) {
			saveFile[i] = &(fn[i*STRING_LEN]);
			saveFile[i][0] = '\0';
		}
		outGlobalFile("SAVE", ".txt", saveFile[saveN]);
	}
	
/// Add a unit gauge
/**
	Add an equation for the units like "1m/s=10"
	\param nm Name of the setting/equation (only for keeping score)
	\param val Value of the setting (eg. 1m/s)
	\param gauge How much it should be equal (eg. 10)
*/
	void Solver::setUnit(std::string nm, std::string val, std::string gauge) {
		units.setUnit(nm, units(val)/units(gauge), 1);
	}

/// Calculate the scales
/**
	Runs the Gauge procedure on the Units object connected to the solver
	This causes the calculate all the unit scales
*/
	void Solver::Gauge() {
		units.makeGauge();
		if (mpi_rank == 0) {
			units.printGauge();
		}
	}

	void Solver::setOutput(const char * out) {
		char _confname[STRING_LEN];
		strcpy(_confname,info.conffile);
		stripbare(_confname);
		sprintf(info.outpath, "%s%s", out, _confname);
		NOTICE("Setting output path to: %s\n", info.outpath);
	}

/// Inits the csv Log file
/*
	Inits the csv Log file with the header
	/param filename Path to the Log file
*/
	int Solver::initLog(const char * filename)
	{ 
		if (mpi.rank == 0) {
                    FILE * f = NULL;
                    debug2("Initializing %s\n",filename);
                    f = fopen(filename, "wt");
                    assert( f != NULL );
			
                    fprintf(f,"\"Iteration\",\"Time_si\",\"Walltime\",\"Optimization\"");
		    <?R for (v in Settings$name) { ?>
	                    fprintf(f,",\"<?%s v ?>\",\"<?%s v ?>_si\"");
		    <?R } ?>
		    <?R for (v in ZoneSettings$name) { ?>
		    	for (std::map<std::string,int>::iterator it = geometry->SettingZones.begin(); it != geometry->SettingZones.end(); it++) {
	                    fprintf(f,",\"<?%s v ?>-%s\",\"<?%s v ?>-%s_si\"",it->first.c_str(), it->first.c_str());
	                }
		    <?R } ?>
		    <?R for (v in Globals$name) { ?>
	                    fprintf(f,",\"<?%s v ?>\",\"<?%s v ?>_si\"");
		    <?R } ?>
		    <?R for (v in Scales$name) { ?>
	                    fprintf(f,",\"<?%s v ?>_si\"");
		    <?R } ?>
                    fprintf(f,"\n");

                    fclose(f);
	    <?R 
		for (v in rows(Settings)) { ?>
                    LogScales[<?%s v$Index ?>] = 1/units.alt("<?%s v$unit ?>"); <?R
		}
		for (v in rows(ZoneSettings)) { ?>
                    LogScales[SETTINGS + <?%s v$Index ?>] = 1/units.alt("<?%s v$unit ?>"); <?R
		}
		for (v in rows(Globals)) { ?>
                    LogScales[SETTINGS + ZONESETTINGS + <?%s v$Index ?>] = 1/units.alt("<?%s v$unit ?>"); <?R
		}
		for (v in rows(Scales)) { ?>
                    LogScales[SETTINGS + ZONESETTINGS + GLOBALS + <?%s v$Index ?>] = 1/units.alt("<?%s v$unit ?>"); <?R
		}
 ?>
		}
                return 0;
	}

/// Writes to the csv Log file.
/** Oh, yes it does
	\param filename Path to the Log file
*/
	int Solver::writeLog(const char * filename)
	{ 
	        FILE * f = NULL;
		double v;
		double * glob = lattice->globals;
	        if (mpi.rank == 0) {
			int j=0;
	                f = fopen(filename, "at");  
	                assert( f != NULL );
			fprintf(f,"%d, %.13le, %.13le, %d",iter, LogScales[SETTINGS+GLOBALS+ZONESETTINGS+SCALES_dt] * iter, get_walltime(), opt_iter);
			for (int i=0; i< SETTINGS; i++) {
				v = lattice->settings[i];
				fprintf(f,", %.13le, %.13le",v,v*LogScales[j]);
				j++;
			}
			for (int i=0; i< ZONESETTINGS; i++) {
			    	for (std::map<std::string,int>::iterator it = geometry->SettingZones.begin(); it != geometry->SettingZones.end(); it++) {
			    		int ind = lattice->ZoneIter;
			    		int zone = it->second;
			    		v = lattice->zSet.get(i, zone, ind);
//					v = lattice->settings[i];
					fprintf(f,", %.13le, %.13le",v,v*LogScales[j]);
		                }
				j++;
			}
			for (int i=0; i< GLOBALS; i++) {
				v = glob[i];
				fprintf(f,", %.13le, %.13le",v,v*LogScales[j]);
				j++;
			}
			for (int i=0; i< SCALES; i++) {
				fprintf(f,", %.13le",LogScales[j]);
				j++;
			}
			fprintf(f,"\n");
	                fclose(f);  
        	}
		return 0;
	}

	void Solver::print(const char * str) {
		output("%8d it %s\n", iter, str);
	}


///	Writes state of lattive to VTK.
/**
	Writes all Quantities and Geometry features to a VTI file with vtkWriteLattice
	\param nm Appendix added to the name of the vti file written
	\param s Set of fields/quantities/geometry features to write
*/
	int Solver::writeVTK(const char * nm, name_set * s) {
		print("writing vtk");
		char filename[STRING_LEN];
		outIterFile(nm, ".vti", filename);
		int ret = vtkWriteLattice(filename, lattice, units, s);
		return ret;
	}

///	Writes state of lattive to txt files.
/**
	Writes all Quantities  to a set of txt files
	\param nm Appendix added to the name of the txt file written
	\param s Set of fields/quantities/geometry features to write
	\param type type of file: 0-normal, 1-gzip
*/
	int Solver::writeTXT(const char * nm, name_set * s, int type) {
		print("writing txt");
		char filename[STRING_LEN];
		outIterFile(nm, "", filename);
		int ret = txtWriteLattice(filename, lattice, units, s, type);
		return ret;
	}



///	Writes state of lattive to a binary file.
/**
	Writes all the data of the lattice with vtkWriteLattice
	\param nm Appendix added to the name of the bin file written
*/
	int Solver::writeBIN(const char * nm) {
		print("writing bin");
		char filename[STRING_LEN];
		outIterFile(nm, "", filename);
		int ret = binWriteLattice(filename, lattice, units);
		return ret;
	}

///	Sets the size of the Lattice
/**
	Sets the size and allocates all the needed buffers etc.
	\param nx X size of the lattice
	\param ny Y size of the lattice
	\param nz Z size of the lattice (1 for 3D)
	\param ns Number of Snapshots allocated
*/
	int Solver::setSize(int nx, int ny, int nz, int ns) {
		info.region.nx = nx;
		info.region.ny = ny;
		info.region.nz = nz;
		output("Global lattice size: %dx%dx%d\n", info.region.nx, info.region.ny, info.region.nz);
//		if (info.region.nx < info.xsdim) {
//			info.xsdim = info.region.nx - 1 + 32 - ((info.region.nx - 1) % 32);
//			NOTICE("small mesh: resetting number of threads to: %dx%d\n", info.xsdim, info.ysdim);
//		}
		info.region.nx += info.xsdim - 1 - ((info.region.nx - 1) % info.xsdim);
		MPIDivision();
		InitAll(ns);
		return 0;
	}

///	Decompose the lattice for parallel processing
/**
	Divides the lattice into simmilar-size parts for MPI parallel processing
*/
	int Solver::MPIDivision() {
		if (mpi_rank == 0) {
			Par_sizes = new int[mpi_size];
			Par_disp = new int[mpi_size];
			int divz,divy;
			float com, mincom, optcom;
			mincom = (1+mpi_size) * (info.region.ny+info.region.nz);
			optcom = 2 * sqrt((float) info.region.ny*info.region.nz*mpi_size);
			for (divz = 1; divz <= mpi_size; divz ++)
				if (mpi_size % divz == 0) {
	                                divy = mpi_size / divz;
	                                com = divz * info.region.ny + divy * info.region.nz;
	                                char buf[8000];
	                                char * str = buf;
	                                str += sprintf(str, "MPI division %d x %d. Communication: %f (%3.0f%%) ", divz, divy, com, 100*(com/optcom - 1));
	                                if (com < mincom) {
	                                        mincom = com;
	                                        int * zlens = new int[divz];
	                                        int * ylens = new int[divy];
	                                        int mz,my;
	                                        mz = info.region.nz;
	                                        my = info.region.ny;
	                                        if (mz >= divz && my >= divy) {
	                                                str += sprintf(str, "Division:");
	                                                for (int i=0; i<divy; i++)
	                                                {	ylens[i] = my/(divy-i);
	                                                        my -= ylens[i];
	                                                        str += sprintf(str, " %d",ylens[i]);
	                                                }
	                                                str += sprintf(str, " x");
	                                                for (int i=0; i<divz; i++)
	                                                {	zlens[i] = mz/(divz-i);
	                                                        mz -= zlens[i];
	                                                        str += sprintf(str, " %d",zlens[i]);
	                                                }
	                                                str += sprintf(str, "\n");
	                                                int dz=0,dy=0,k=0;;
	                                                for (int i=0; i<divz; i++) {
								dy=0;
		                                                for (int j=0; j<divy; j++) {
	                                                                mpi.node[k].region.dz = dz;
	                                                                mpi.node[k].region.dy = dy;
	                                                                mpi.node[k].region.nz = zlens[i];
	                                                                mpi.node[k].region.ny = ylens[j];
	                                                                mpi.node[k].region.dx = info.region.dx;
	                                                                mpi.node[k].region.nx = info.region.nx;
	                                                                dy += ylens[j];
	                                                                k++;
	                                                        }
	                                                        dz += zlens[i];
	                                                }
	                                                fillSides(mpi, 1, divy, divz);
	                                        } else {
	                                                str += sprintf(str, "Mesh too small to divide\n");
	                                        }
	                                        delete[] zlens;
	                                        delete[] ylens;
	                                } else {
						str += sprintf(str, "\n");
					}
					debug2(buf);
	                	}
	                int k = 0;
	                for (int i=0; i < mpi_size; i++) {
	                        debug2("Processor %d will get: %dx%dx%d\n", i, mpi.node[i].region.nx, mpi.node[i].region.ny,mpi.node[i].region.nz);
	                        if (k < mpi.node[i].region.size()) k = mpi.node[i].region.size();
	                }
	                float overhead = ((double)(  k*mpi_size - info.region.size()  )) / info.region.size();
	                notice("Max region size: %d. Mesh size %d. Overhead: %2.f%%\n", k, info.region.size(), overhead * 100);
		}
	
	        MPI_Bcast(mpi.node, mpi_size * sizeof(NodeInfo), MPI_BYTE, 0, MPI_COMM_WORLD);
	        region = mpi.node[mpi_rank].region;
	        mpi.totalregion = info.region;
	        output("Local lattice size: %dx%dx%d\n", region.nx, region.ny,region.nz);
		return 0;
	}


/// Initializes all the internals of the Solver
/**
	Initializes Lattice, settings, etc.
	\param ns Number of Snapshots to allocate
*/
	int Solver::InitAll(int ns) {
	        // Making a window
	        #ifdef GRAPHICS
	        	NOTICE("Running graphics at %dx%d\n", region.nx, region.ny);
			bitmap = new GPUAnimBitmap( region.nx, region.ny, this );
			RunMainLoop();
			debug0("Graphics done");
	        #endif
	
		// Creating Lattice (GPU allocation is here)
		debug0("Creating Lattice object ...");
		lattice = new Lattice(region, mpi, ns);
	   	debug0("Lattice done");

<?R for (s in rows(ZoneSettings)) { ?>
		lattice->zSet.set(<?%s s$Index ?>, -1, units.alt("<?%s s$default ?>"));
<?R } ?>

		// Setting global variables
		initSettings();

		geometry = new Geometry(region, units);

		return 0;
	}

/// Runs the main loop (GUI)
/**
	Runs the main loop in the case of the GUI version
*/
	int Solver::RunMainLoop() {
		#ifdef GRAPHICS
        		bitmap->mouse_move( (void (*)(void*,int,int,int,int)) MouseMove);
		        bitmap->anim_and_exit( (int (*)(uchar4*,void*,int)) MainLoop, (void (*)(void*))MainFree );
			glutMainLoopEvent();
		#endif
		return 0;
	}

/// Idle function of main loop (GUI)
/**
	Part of the loop in the case of GUI version
*/
	int Solver::EventLoop(){
		#ifdef GRAPHICS
			bitmap->idle_func();
			glutMainLoopEvent();
		#endif
		return 0;
	}


/// Get the dimension of the parameter space
/**
	Gives the dimension of the parameter space defined (Now)
	Only non-zero on 0-rank process
*/
int Solver::getPars() {
	int n = region.size();
	int j=0;
	for (int i=0; i<n; i++) {
		if (geometry->geom[i] & NODE_DesignSpace) {
			j++;
		}
	}
	Par_size = j * <?%d sum(Density$parameter==T) ?>;
	debug1("Par_size: %d\n",Par_size);
	MPI_Gather(&Par_size, 1, MPI_INT, Par_sizes, 1, MPI_INT, 0, MPI_COMM_WORLD);
	if (mpi_rank == 0) {
		int i;
		Par_disp[0] = 0;
		for (i=0; i<mpi_size-1; i++) Par_disp[i+1] = Par_disp[i] + Par_sizes[i];
		for (i=0; i<mpi_size; i++) debug2("Proc: %d Parameters: %d Disp: %d\n", i, Par_sizes[i], Par_disp[i]);
		return Par_disp[mpi_size-1] + Par_sizes[mpi_size-1];
	}
	return 0;
}


/// Get the parameter vector
/**
	Retrives the parameter vector (gather on 0-rank process)
	\param wb vector of doubles to store the parameter vector
*/
int Solver::getPar(double * wb) {
	int n = region.size();
	int k = Par_size;
	real_t * buf = new real_t[n];
	double * wb_l = new double[Par_size];
	int j=0;
<?R for (d in rows(Density)) if (d$parameter) { ?>
	lattice->Get_<?%s d$nicename ?>(buf);
	for (int i=0; i<n; i++) {
		if (geometry->geom[i] & NODE_DesignSpace) {
			wb_l[j] = buf[i];
			j++;
		}
	}
<?R } ?>
	assert(j == Par_size);
	MPI_Gatherv(wb_l, Par_size, MPI_DOUBLE, wb, Par_sizes, Par_disp, MPI_DOUBLE, 0, MPI_COMM_WORLD);
	delete[] wb_l;
	delete[] buf;
	return 0;
} 

/// Save component/density
/**
	Saves a component/density in a binary file
	\param filename Path/prefix of the file to save
	\param comp Density name to save
*/
int Solver::saveComp(const char* filename, const char* comp) {
	int n = region.size();
	char fn[STRING_LEN];
	real_t * buf = new real_t[n];
	sprintf(fn,"%s_%s_%d.comp", filename, comp, D_MPI_RANK);
	output("Saving component %s to file %s\n", comp, fn);
    bool somethingWritten = false;
<?R 
    for (d in rows(DensityAll)) { 
?>
	if (strcmp(comp, "<?%s d$name ?>") == 0) {
        lattice->Get_<?%s d$nicename ?>(buf); 
        somethingWritten = true; 
    }
<?R
} 
?>
    if (somethingWritten) {
    	FILE * f = fopen(fn,"wb");
    	assert(f != NULL);
//	for (int i=0; i<n;i ++) buf[i]=1.23;
    	fwrite(buf, sizeof(real_t), n, f);
	    fclose(f);
    	delete[] buf;     	
        output("...saved %s\n", comp);
    } else {
     	output("...not saved %s\n", comp);
    }
	return 0;
} 

int Solver::getComponentIntoBuffer(const char* comp, real_t* &buf, long int*  dim, long int*  offsets ) {
	int n = region.size();

	dim[0] = region.nx;
	dim[1] = region.ny;
	dim[2] = region.nz;

    
    offsets[0] = region.dx;
    offsets[1] = region.dy;
    offsets[2] = region.dz;

    buf = new real_t[n];
	
	output("Providing component %s to buffer..\n", comp);
    bool somethingWritten = false;
<?R 
    for (d in rows(DensityAll)) { 
?>
	if (strcmp(comp, "<?%s d$name ?>") == 0) {
        lattice->Get_<?%s d$nicename ?>(buf); 
        somethingWritten = true; 
    }
<?R
} 
?>
    if (!somethingWritten){
        output("Possible densities:\n");
    <?R
        for (d in rows(DensityAll)) { 
            ?> output("-> <?%s d$name ?>\n") ; <?R
        }
    ?>
    }
    assert(somethingWritten);
    if (somethingWritten) {
        output("...provided %s\n", comp);
    } else { 
     	output("...not saved %s\n", comp);
    }
//    int sizes[7] = { n, region.dx, region.dy, region.dz, region.nx, region.ny, region.nz };
	return n;
} 
int Solver::getQuantitieIntoBuffer(const char* comp, real_t* &buf, long int*  dim, long int*  offsets ) {
	int n = region.size();

	dim[0] = region.nx;
	dim[1] = region.ny;
	dim[2] = region.nz;
    dim[3] = 1;

    
    offsets[0] = region.dx;
    offsets[1] = region.dy;
    offsets[2] = region.dz;

	output("Providing quantitie %s to buffer..\n", comp);
    bool somethingWritten = false;
<?R 
for (q in rows(Quantities)){ ifdef(q$adjoint); 
?>
	if (strcmp(comp, "<?%s q$name ?>") == 0) {
    	<?%s q$type ?>* tmp_<?%s q$name ?> = new <?%s q$type ?>[n];
        <?R if (q$type == 'vector_t') { ?>
            dim[3] = 3;
        <?R } ?>
    	lattice->Get<?%s q$name ?>(region, tmp_<?%s q$name ?>, 1);
        buf = (real_t*)tmp_<?%s q$name ?>;
        somethingWritten = true; 
    }
<?R
} 
ifdef();
?>
    if (!somethingWritten){
        output("Possible quantities:\n");
    <?R
        for (d in rows(Quantities)) { 
            ?> output("-> <?%s d$name ?>\n") ; <?R
        }
    ?>
    }
    assert(somethingWritten);
    if (somethingWritten) {
        output("...provided %s\n", comp);
    } else { 
     	output("...not saved %s\n", comp);
    }
//    int sizes[7] = { n, region.dx, region.dy, region.dz, region.nx, region.ny, region.nz };
	return n;
} 


int Solver::loadComponentFromBuffer(const char* comp,  real_t* buf) {
	int n = region.size();
<?R for (d in rows(DensityAll)) { ?>
	if (strcmp(comp, "<?%s d$name ?>") == 0) lattice->Set_<?%s d$nicename ?>(buf); <?R
} ?>
    delete [] buf;
	return 0;
} 


/// Load component/density
/**
	Loades a compoment/density from a binary file
	\param filename Path/prefix of the file to save
	\param comp Density name to load
*/
int Solver::loadComp(const char* filename, const char* comp) {
	int n = region.size();
	char fn[STRING_LEN];
	real_t * buf = new real_t[n];
	sprintf(fn,"%s_%d.comp", filename, D_MPI_RANK);
	output("Loading component %s from file %s\n", comp, fn);
	FILE * f = fopen(fn,"rb");
	assert(f != NULL);
	int nn = fread(buf, sizeof(real_t), n, f);
	assert(n == nn);
	fclose(f);
//	for (int i=0; i<n;i ++) buf[i]=1.23;
<?R for (d in rows(DensityAll)) { ?>
	if (strcmp(comp, "<?%s d$name ?>") == 0) lattice->Set_<?%s d$nicename ?>(buf); <?R
} ?>

	delete[] buf;
	return 0;
} 


/// Get the gradient wrt. parameter vector
/**
	Retrives the gradient of the objective wrt. parameter vector (gather on 0-rank process)
	\param wb vector of doubles to store the parameter vector
*/
int Solver::getDPar(double * wb) {
	int n = region.size();
	int k = Par_size;
	real_t * buf = new real_t[n];
	double * wb_l = new double[Par_size];
	int j=0;
	double sum=0;
	#ifdef ADJOINT
<?R for (d in rows(Density)) if ((d$parameter)) { ?>
	lattice->Get_<?%s d$nicename ?>_Adj(buf);
	for (int i=0; i<n; i++) {
		if (geometry->geom[i] & NODE_DesignSpace) {
			wb_l[j] = buf[i];
			sum += wb_l[j]*wb_l[j];
			j++;
		}
	}
<?R } ?>
	#endif
	output("L2 norm of gradient: %lg\n", sqrt(sum));
	assert(j == Par_size);
	MPI_Gatherv(wb_l, Par_size, MPI_DOUBLE, wb, Par_sizes, Par_disp, MPI_DOUBLE, 0, MPI_COMM_WORLD);
	delete[] wb_l;
	delete[] buf;
	return 0;
} 

/// Set the parameter vector
/**
	Sets the parameter vector (scatter from 0-rank process)
	\param w vector of doubles to with parameter values
*/
int Solver::setPar(const double * w) {
	static int en=0;
	en++;
	int n = region.size();
	real_t * buf = new real_t[n];
	double * w_l = new double[Par_size];
	DEBUG_M;
	MPI_Scatterv(const_cast<double *>(w), Par_sizes, Par_disp,  MPI_DOUBLE, w_l, Par_size, MPI_DOUBLE, 0, MPI_COMM_WORLD);
	DEBUG_M;
	int j=0;
	double sum =0;
	double diff;
<?R for (d in rows(Density)) if (d$parameter) { ?>
	DEBUG_M;
	lattice->Get_<?%s d$nicename ?>(buf);
	DEBUG_M;
	for (int i=0; i<n; i++) {
		if (geometry->geom[i] & NODE_DesignSpace) {
			diff = buf[i];
			buf[i] = w_l[j];
			assert(w_l[j] <= 1.001);
			diff -= buf[i];
			sum += diff*diff;
			j++;
		}
	}
	DEBUG_M;
	lattice->Set_<?%s d$nicename ?>(buf);
	DEBUG_M;
<?R } ?> 
	assert(j == Par_size);
	output("[%d] L2 norm of parameter change: %lg\n", sqrt(sum));
	delete[] w_l;
	delete[] buf;
	return 0;
} 

/// Mouse Move callback (GUI)
/**
	Function called when mouse is moved, wile button pressed in GUI version
*/
void MouseMove( Solver * data, int x, int y, int nx, int ny )
{
	lbRegion r(
		x,
		data->region.ny - y - 1,
		0,
	1,1,1);
	flag_t NodeType = NODE_Wall;
	data->lattice->FlagOverwrite(&NodeType,r); // Overwrite mesh flags with flags from 'mask' table
}

/// Refresh callback (GUI)
/**
	Function called when refresh of the window is needed.
	Renders the graphics inside of the window in GUI version
*/
int MainLoop( uchar4* outputBitmap, Solver *d, int ticks )
{
	d->lattice->Color(outputBitmap); // Updating graphics
	return 0;
}

/// Clean-up
/**
	Empty now. TODO
*/
void MainFree( Solver *d ) {

}
