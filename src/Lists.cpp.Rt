<?R source("conf.R"); ?>
#include "Lists.h"
#include "Consts.h"


<?R
	for (v in rows(Settings)) if (!is.na(v$derived)) {
		i = which(as.character(Settings$name) == as.character(v$derived));
		sel = Settings[i[1],] ?>
double DF_<?%s v$name ?> (double <?%s v$name ?>) { return <?%s v$equation ?>;} <?R
	}
?>

Model_m::Model_m() {
	{
		Setting set;
<?R	for (v in rows(Settings)) { ?>
		set.id = <?%s v$Index ?>;
		set.name = "<?%s v$name ?>";
		set.unit = "<?%s v$unit ?>"; <?R
		if (!is.na(v$derived)) {
			i = which(as.character(Settings$name) == as.character(v$derived));
			sel = Settings[i[1],] ?>
		set.isDerived = true;
		set.derivedSetting = <?%s sel$Index ?>;
		set.derivedValue = DF_<?%s v$name ?>; <?R
		} else { ?>
		set.isDerived = false; <?R
		} ?>
		settings.push_back(set);
<?R	} ?>
	}
	{
		ZoneSetting set;
<?R	for (v in rows(ZoneSettings)) { ?>
		set.id = <?%s v$Index ?>;
		set.name = "<?%s v$name ?>";
		set.unit = "<?%s v$unit ?>"; 
		zonesettings.push_back(set);
<?R	} ?>
	}
	{
		Quantity set;
<?R	for (v in rows(Quantities)) { ?>
		set.id = <?%s v$Index ?>;
		set.name = "<?%s v$name ?>";
		set.unit = "<?%s v$unit ?>";
		set.isVector = <?%s if (v$vector) "true" else "false" ?>;
		set.isAdjoint = <?%s if (v$adjoint) "true" else "false" ?>;
		quantities.push_back(set);
<?R	} ?>
	}
	{
		Global set;
<?R	for (v in rows(Globals)) { ?>
		set.id = <?%s v$Index ?>;
		set.name = "<?%s v$name ?>";
		set.unit = "<?%s v$unit ?>";
		set.isAdjoint = <?%s if (v$adjoint) "true" else "false" ?>;
		set.operation = MPI_<?%s v$op ?>;
		globals.push_back(set);
<?R	} ?>
	}
	{
		Option set;
<?R	for (i in seq_along(Options)) { ?>
		set.id = <?%d i ?>;
		set.name = "<?%s names(Options)[i] ?>";
		set.isActive = <?%s if (Options[[i]]) "true" else "false" ?>;
		options.push_back(set);
<?R	} ?>
	}
	{
		NodeTypeFlag set;
<?R	for (v in rows(NodeTypes)) { ?>
		set.id = NODE_<?%s v$name ?>;
		set.flag = NODE_<?%s v$name ?>;
		set.group_id = NODE_<?%s v$group ?>;
		set.name = "<?%s v$name ?>";
		nodetypeflags.push_back(set);
<?R	} ?>
	}
	{
		NodeTypeGroupFlag set;
<?R	i = !duplicated(NodeTypes$group)
	for (v in rows(NodeTypes[i,])) { ?>
		set.id = NODE_<?%s v$group ?>;
		set.flag = NODE_<?%s v$group ?>;
		set.name = "<?%s v$group ?>";
		set.shift = <?%s v$shift ?>;
		nodetypegroupflags.push_back(set);
<?R	} ?>
	}
}



