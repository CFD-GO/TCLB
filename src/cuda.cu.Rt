<?R
        source("conf.R")
	c_header()
?>
/** \file cuda.cu
        Main CUDA C file
        Here is nearly all of the CUDA C code. It includes:
          LatticeContainer.h
          LatticeContainer.c
          Dynamics.c
          Dynamics.h
          Dynamics_b.c (adjoint)
          Dynamics_adj.c (adjoint)
          ADTools.c (adjoint)
*/

#include "Consts.h"
#include "cross.h"
#include "Global.h"

class Node;
class Node_Globs;

#include "LatticeContainer.h"
CudaDeviceFunction CudaConstantMemory LatticeContainer constContainer;

#ifdef ADJOINT
	#include "ADTools.cu"
#endif

<?R
	for (v in rows(Settings)) { ?>
/// GPU Constant memory variable for [<?%s v$comment?>]
CudaDeviceFunction CudaConstantMemory real_t <?%s v$name ?> = 0.0f; <?R
        }
?>

#include "LatticeAccess.inc.cpp"



#define GET_MACRO(_1,_2,_3,NAME,...) NAME <?R
        for (f in Fields) { ?>
#define <?%s f$nicename ?>_3(x__,y__,z__) (constContainer.load_<?%s f$nicename ?> < x__, y__, z__ > (x_,y_,z_))
#define <?%s f$nicename ?>_2(x__,y__) (constContainer.load_<?%s f$nicename ?> < x__, y__, 0 > (x_,y_,z_))
#define <?%s f$nicename ?>(...) GET_MACRO(__VA_ARGS__, <?%s f$nicename ?>_3, <?%s f$nicename ?>_2)(__VA_ARGS__) <?R
        }
?>

#define X (x_ + constContainer.px)
#define Y (y_ + constContainer.py)
#define Z (z_ + constContainer.pz)
#define SyntheticTurbulence(t) constContainer.getST(t,x_,y_,z_)
#define average_iter (constContainer.iter - constContainer.reset_iter)  //Look nicer in Dynamics
<?R
	for(s in rows(ZoneSettings)) { ?>
//#define <?%s s$name ?> constContainer.ZoneSettings[<?%s s$Index ?> + ZONESETTINGS * (NodeType >> ZONE_SHIFT)][constContainer.ZoneIndex]
#define <?%s s$name ?> constContainer.ZoneSetting(<?%s s$Index ?>, NodeType >> ZONE_SHIFT)
#define <?%s s$name ?>_DT constContainer.ZoneSetting_DT(<?%s s$Index ?>, NodeType >> ZONE_SHIFT)
<?R
        }
?>

<?R
	P = expand.grid(x=0:2,y=0:2,z=0:2)
	Q = paste("Q",P$x,P$y,P$z,sep="")
	for (i in 2:length(Q)) { ?>
#define <?%s Q[i] ?> constContainer.getQ(x_,y_,z_,<?%d i-2 ?>)
<?R     } ?>


<?R	for (n in rows(NodeTypes)) {	?>
#define Iam<?%s n$name ?> ((NodeType & NODE_<?%s n$group?>) == NODE_<?%s n$name ?>)
<?R	}	?>
<?R	for (n in names(Node_Group)) {	?>
#define Iam<?%s n ?> (NodeType & NODE_<?%s n ?>)
<?R	}	?>

#define NODE_H

template < eOperationType I, eCalculateGlobals G, eStage S> struct Node_Run {
        int x_,y_,z_;
        CudaDeviceFunction void Pre(){};
        CudaDeviceFunction void RunElement(){};
        CudaDeviceFunction void Glob(){};
	CudaDeviceFunction void OutOfDomain() {};
};

<?R
for (tp in rows(Dispatch)) {
	s = Stages[Stages$name == tp$stage_name, ];
#	GlobalsD = Globals[-nrow(Globals),];
	GlobalsD = Globals[,];
	GlobalsD$zonal = FALSE;
	ik = nrow(ZoneSettings);
	if (ik > 0) {
		GlobalsD = do.call(rbind, c(list(GlobalsD),rep(NA,ik)));
		k = nrow(GlobalsD) - ik:1 + 1;
		GlobalsD$name[k] = paste0(ZoneSettings$name,"B");
		GlobalsD$adjoint[k] = TRUE;
		GlobalsD$zonal[k] = TRUE;
		GlobalsD$op[k] = "SUM";
		GlobalsD$var[k] = paste0(ZoneSettings$name,"b");
		GlobalsD$Index[k] = ZoneSettings$Index;

		GlobalsD = do.call(rbind, c(list(GlobalsD),rep(NA,ik)));
		k = nrow(GlobalsD) - ik:1 + 1;
		GlobalsD$name[k] = paste0(ZoneSettings$name,"_DTB");
		GlobalsD$adjoint[k] = TRUE;
		GlobalsD$zonal[k] = TRUE;
		GlobalsD$op[k] = "SUM";
		GlobalsD$var[k] = paste0(ZoneSettings$name,"_DTb");
		GlobalsD$Index[k] = paste0(ZoneSettings$Index,"+DT_OFFSET");
	}
	cat("\n")
	ifdef(tp$adjoint_ver)
	suff=tp$suffix
	       if (tp$Stream == "Adj") {
	        GlobalsD$sel = GlobalsD$adjoint
	} else if (tp$Stream == "Opt") {
	        GlobalsD$sel = TRUE
	} else if (tp$Stream == "Init") {
	        GlobalsD$sel = FALSE
	} else if (tp$Stream == "No") {
	        GlobalsD$sel = ! GlobalsD$adjoint
	} else {
	        stop(paste("Unknown Action:",tp$Stream,"in Dispatch (conf.R)"));
	} ?>
//-------------------[ <?%20s paste("Node",tp$suffix,sep="") ?> --- Action:<?%5s tp$Stream ?>, Globals:<?%5s tp$Globals ?> ]-------------------- <?R
	for (g in rows(GlobalsD)) if (g$sel) {
		if (tp$Globals == "Globs") {
		        if (g$op == "SUM") {
				if (g$adjoint) { ?>
#define AddTo<?%s g$name ?>(x) <?%s g$var ?> = <?%s g$var ?> + (x) <?R
				} else { ?>
#define AddTo<?%s g$name ?>(x) <?%s g$var ?> = <?%s g$var ?> + (x); Objective = Objective + (x) * <?%s g$name ?>InObj <?R
				}
	                } else if (g$op == "MAX") { ?>
#define AddTo<?%s g$name ?>(x) <?%s g$var ?> = max(<?%s g$var ?>,x) <?R
                        }
		} else if (tp$Globals == "Obj") { ?>
#define AddTo<?%s g$name ?>(x) Objective = Objective + (x) * <?%s g$name ?>InObj <?R
		} else { ?>
#define AddTo<?%s g$name ?>(x) <?R
		}
	} else { ?>
#define AddTo<?%s g$name ?>(x) <?R
	}
        if (tp$Globals == "Globs") {
                Globs = GlobalsD[GlobalsD$sel,]
        } else if (tp$Globals == "Obj") {
                Globs = Globals[nrow(Globals),]
		Globs$zonal = FALSE
        } else {
                Globs = NULL
        } 	
        T1 = switch(tp$Action, No="Primal", Adj="Adjoint", Opt="Optimize", SAdj="SteadyAdjoint")
        T2 = switch(tp$Globals, No="NoGlobals", Globs="IntegrateGlobals", Obj="OnlyObjective")
        T3 = tp$stage_name
?>
template <> struct Node_Run < <?%s T1 ?>, <?%s T2 ?>, <?%s T3 ?> > {
	int x_,y_,z_; <?R
	for (g in rows(Globs)) { ?>
	real_t <?%s g$var ?>; ///< <?%s g$comment ?><?R
        } ?>
	CudaDeviceFunction void inline Pre() { <?R
	for (g in rows(Globs)) if (!g$zonal){ ?>
		<?%s g$var ?> = 0.0f; <?R
        } ?>
	}
	CudaDeviceFunction void inline PreDiff() { <?R
	for (g in rows(Globs)) if (g$zonal) { ?>
		<?%s g$var ?> = 0.0f; <?R
        } ?>
	}
	CudaDeviceFunction void inline Glob() { <?R
        for (g in rows(Globs)) if (!g$zonal) {
		where_to_put_it = paste0("&constContainer.Globals[", g$Index, "]")
                if (g$op == "SUM") { ?>
                atomicSum(<?%s where_to_put_it ?>, <?%s g$var ?>); <?R
                } else if (g$op == "MAX") { ?>
                atomicMax(<?%s where_to_put_it ?>, <?%s g$var ?>); <?R
                }
        } ?>
	}
	CudaDeviceFunction void inline GlobDiff() { 
		int z = NodeType >> ZONE_SHIFT;
		for (int nz = 0; nz < constContainer.MaxZones; nz++) if (CudaSyncThreadsOr(nz == z)){<?R
        for (g in rows(Globs)) if (g$zonal) {
		where_to_put_it = paste0("constContainer.ZoneSettingGrad(", g$Index,", nz)") ?>
                atomicSumDiff(<?%s where_to_put_it ?>, <?%s g$var ?>, nz == z); <?R
        } ?>
		}
	}
	CudaDeviceFunction void inline GlobDiffOutOfDomain() { 
		for (int nz = 0; nz < constContainer.MaxZones; nz++) if (CudaSyncThreadsOr(false)){<?R
        for (g in rows(Globs)) if (g$zonal) {
		where_to_put_it = paste0("constContainer.ZoneSettingGrad(", g$Index,", nz)") ?>
                atomicSumDiff(<?%s where_to_put_it ?>, 0.0f, false); <?R
        } ?>
		}
	} <?R
		if (! tp$adjoint) { ?>
	#include "Dynamics.h" <?R
		} else { ?>
	#undef DYNAMICS_B_LOADED <?R
		} ?>
//	#include "Dynamics.h"
#ifdef CALC_DOUBLE_PRECISION
	#include "Dynamics.c"
#else
	#include "Dynamics_sp.c"
#endif <?R
		if (tp$adjoint) {
		        if (tp$Globals == "Globs") { ?>
        #include "DynamicsS_b.c" <?R
                        } else { ?>
        #include "Dynamics_b.c" <?R
                        } ?>
	#include "Dynamics_adj.c" <?R
		}
	if (tp$stage) { ################################################################
		if (tp$Stream == "Opt") { ?>
	CudaDeviceFunction inline void Opt() {
	        if ((NodeType & NODE_DESIGNSPACE) == NODE_DesignSpace) { <?R
		        for (d in rows(Density)) {
                                if (d$parameter) { ?>
                <?%s d$name ?> += <?%s d$adjoint_name ?>*Descent;
                if (<?%s d$name ?> > 1.0f) <?%s d$name ?> = 1.0f;
                if (<?%s d$name ?> < 0.0f) <?%s d$name ?> = 0.0f; <?R
                                }
                        }?>
                }
        } <?R
	        } ?>
	CudaDeviceFunction inline void RunElement() {
	   constContainer.getType(*this);
	   PreDiff();
		<?R
		if (tp$Stream == "Adj") { ?>
		constContainer.pop_<?%s s$name ?>(*this);
		constContainer.pop_<?%s s$name ?>_adj(*this);<?R
		        for (d in rows(Density)) if (d$parameter) {
        		        if (tp$Globals == "Globs") { ?>
                real_t old_<?%s d$adjoint_name ?> = <?%s d$adjoint_name ?>; <?R
                                }
	                        if (tp$zeropar) { ?>
                <?%s d$adjoint_name ?> = 0.0f; <?R
                                }
                        } ?>
		Run_b(); <?R
		        if (tp$Globals == "Globs") for (d in rows(Density)) if (d$parameter) { ?>
                old_<?%s d$adjoint_name ?> -= <?%s d$adjoint_name ?>;
                AddToAdjointRes(old_<?%s d$adjoint_name ?>*old_<?%s d$adjoint_name ?>); <?R
                        } ?>
		constContainer.push_<?%s s$name ?>_adj(*this); <?R
		} else if (tp$Stream == "Opt") { ?>
		constContainer.pop_param(*this);
		constContainer.pop_param_adj(*this); 
		Opt();
		constContainer.push_param(*this); <?R
		} else if (tp$Stream == "Init") { ?>
		constContainer.getType(*this);
		Init();
		constContainer.push_<?%s s$name ?>(*this); <?R
		} else if (tp$Stream == "No") { ?>
	        constContainer.pop_<?%s s$name ?>(*this); 
		<?%s s$main ?>();
		constContainer.push_<?%s s$name ?>(*this); <?R
		} else {
		        stop(paste("Unknown Action:",tp$Stream,"in Dispatch (cuda.cu / conf.R)"));
		} ?>
	   GlobDiff();
	}
	CudaDeviceFunction inline void OutOfDomain() {
	   GlobDiffOutOfDomain();
	} <?R
        } ########################################################################################### ?>
}; <?R
	for (g in rows(GlobalsD)) { ?>
#undef AddTo<?%s g$name ?><?R
	}
} 
cat("\n")
ifdef()
?>

#include "LatticeContainer.inc.cpp"
