<?R
        source("conf.R")
	c_header()
?>

#ifdef ADJOINT
	#include "types_b.h"
#endif

#include "cross.h"
#include "Global.h"

#ifdef ADJOINT
	#include "ADTools.cu"
#endif

#include "Node_types.h"

<?R
        for (i in 1:nrow(Settings)) {
                v = Settings[i,]; ?>
CudaDeviceFunction CudaConstantMemory real_t <?%s v$name ?> = 0.0; <?R
	} ?>
CudaConstantMemory real_t c_sq = 1.0/3.;


#define NODE_H

<?R
	for (tp in rows(expand.grid(globals=c(FALSE,TRUE), adjoint=c(FALSE,TRUE)))) {
	cat("\n")
	ifdef(tp$adjoint)
	suff=""
	if (tp$globals) suff=paste(suff,"Globs",sep="_")
	if (tp$adjoint) suff=paste(suff,"Adj",sep="_")
	for (g in rows(Globals)) if ((! g$adjoint) || (tp$adjoint)) {
		if (tp$globals) { ?>
			#define AddTo<?%s v ?>(x) <?%s v ?> = <?%s v ?> + x <?R
		} else { ?>
			#define AddTo<?%s v ?>(x) <?R
		}
	} ?>
struct Node<?%s suff ?> {
	int x,y,z;
	<?R
		if (tp$globals) {
			for (v in Globals$name) { ?>
				real_t <?%s v ?>; <?R
			}
		}
	?>
	CudaDeviceFunction void inline Pre() { <?R
		if (tp$globals) { ?>
			objective = 0.0;
			<?R
				for (v in Globals$name) { ?>
					<?%s v ?> = 0.0; <?R
				}
		} ?>
	}
	<?R
		if (tp$adjoint) { ?>
			#include "Dynamics.h" <?R
		} ?>
	#include "Dynamics.c"
	<?R
		if (tp$adjoint) { ?>
			#include "Dynamics_b.c"
			#include "Dynamics_adj.c" <?R
		}
	?>
}; <?R
	for (v in Globals$name) { ?>
		#undef AddTo<?%s v ?><?R
	}
} 
cat("\n")
ifdef()
?>

#include "LatticeContainer.h"
#include "LatticeContainer.cu"
