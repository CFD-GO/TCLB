<?R
	source("conf.R")
	c_header();
?>
#include <stdio.h>
#include <assert.h>
#include <mpi.h>
#include "cross.h"
#include "vtkLattice.h"
//#include <unistd.h>
#include "Global.h"

#define CROSS_NOFORK

#ifdef CROSS_NOFORK

int vtkWriteLattice(char * filename, Lattice * lattice, UnitEnv units, name_set * what)
{
	size_t size;
	lbRegion reg = lattice->region;
	size = reg.size();
	vtkFileOut vtkFile;
	if (vtkFile.Open(filename)) {return -1;}
	double spacing = 1/units.alt("m");	
	vtkFile.Init(lattice->mpi.totalregion, reg, "Scalars=\"rho\" Vectors=\"velocity\"", spacing);

	{	flag_t * NodeType = new flag_t[size];
		lattice->GetFlags(reg, NodeType);
		if (what->in("flag")) {
			vtkFile.WriteField("flag",NodeType);
		}
		unsigned char * small = new unsigned char[size];
		<?R
		i = !duplicated(NodeTypes$group)
		for (n in rows(NodeTypes[i,])) {
		?>
			if (what->in("<?%s n$group ?>")) {
				for (size_t i=0;i<size;i++) {
					small[i] = (NodeType[i] & NODE_<?%s n$group ?>) >> <?%d n$shift ?>;
				}
				vtkFile.WriteField("<?%s n$group ?>",small);
			}
		<?R } ?>
		delete[] small;
		delete[] NodeType;
	}

	<?R for (q in rows(Quantities)) { ifdef(q$adjoint); ?>
	{
		if (what->in("<?%s q$name ?>")) {
			double v = units.alt("<?%s q$unit ?>");
	                <?%s q$type ?>* tmp = new <?%s q$type ?>[size];
                        lattice->Get<?%s q$name ?>(reg, tmp, 1/v);
			vtkFile.WriteField("<?%s q$name ?>",tmp);
			delete[] tmp;
		}
	}
	<?R }; ifdef(); ?>

	
	vtkFile.Finish();
	vtkFile.Close();
	return 0;
}

#else

int vtkWriteLattice(char * filename, Lattice * lattice, UnitEnv units, name_set * what)
{
	int size;
	lbRegion reg = lattice->region;
	size = reg.size();


	flag_t * NodeType = new flag_t[size];
	lattice->GetFlags(reg, NodeType);
	<?R for (q in rows(Quantities)) { ifdef(q$adjoint); ?>
		<?%s q$type ?>* tmp_<?%s q$name ?>;
		if (what->in("<?%s q$name ?>"))	{
			double v = units.alt("<?%s q$unit ?>");
			tmp_<?%s q$name ?> = new <?%s q$type ?>[size];
			lattice->Get<?%s q$name ?>(reg, tmp_<?%s q$name ?>, 1/v);
		}
	<?R } ?>



	if (fork() == 0) {
		vtkFileOut vtkFile;
		if (vtkFile.Open(filename)) {return -1;}
		double spacing = 1/units.alt("m");	
		vtkFile.Init(lattice->mpi.totalregion, reg, "Scalars=\"rho\" Vectors=\"velocity\"", spacing);

		if (what->in("flag")) {
			vtkFile.WriteField("flag",NodeType);
		}
		unsigned char * small = new unsigned char[size];
		<?R
		i = !duplicated(NodeTypes$group)
		for (n in rows(NodeTypes[i,])) {
		?>
			if (what->in("<?%s n$group ?>")) {
				for (size_t i=0;i<size;i++) {
					small[i] = (NodeType[i] & NODE_<?%s n$group ?>) >> <?%d n$shift ?>;
				}
				vtkFile.WriteField("<?%s n$group ?>",small);
			}
		<?R } ?>
		delete[] small;
		
		<?R for (q in rows(Quantities)) { ifdef(q$adjoint); ?>
			if (what->in("<?%s q$name ?>")) {
				vtkFile.WriteField("<?%s q$name ?>",tmp_<?%s q$name ?>);
			}
		<?R }; ifdef(); ?>
		vtkFile.Finish();
		vtkFile.Close();
		exit(0);
	}
		
	<?R for (q in rows(Quantities)) { ifdef(q$adjoint); ?>
		if (what->in("<?%s q$name ?>")) {
			delete[] tmp_<?%s q$name ?>;
		}
	<?R }; ifdef(); ?>
	delete[] NodeType;


	return 0;
}

#endif

int binWriteLattice(char * filename, Lattice * lattice, UnitEnv units)
{
	int size;
	lbRegion reg = lattice->region;
	FILE * f;
	char fn[STRING_LEN];
	size = reg.size();
	<?R for (q in rows(Quantities)) { ifdef(q$adjoint); ?>
	{
		<?%s q$type ?>* tmp = new <?%s q$type ?>[size];
		lattice->Get<?%s q$name ?>(reg, tmp, 1);
		sprintf(fn, "%s.<?%s q$name ?>.bin", filename);
		f = fopen(fn,"w");
		if (f == NULL) {
			ERROR("Cannot open file: %s\n",fn);
			return -1;
		}
		fwrite(tmp, sizeof(<?%s q$type ?>), size, f);
		fclose(f);
		delete[] tmp;
	}
	<?R }; ifdef(); ?>
	sprintf(fn, "%s.<?%s q$name ?>.bin", filename);
	f = fopen(fn,"w");
	if (f == NULL) {
		ERROR("Cannot open file: %s\n");
		return -1;
	}
	return 0;
}



inline int txtWriteElement(FILE * f, float tmp) { return fprintf(f, "%.8g" , tmp); }
inline int txtWriteElement(FILE * f, double tmp) { return fprintf(f, "%.16lg" , tmp); }
//inline int txtWriteElement(FILE * f, float3 tmp) { return fprintf(f, "%g,%g,%g" , tmp.x, tmp.y, tmp.z); }
//inline int txtWriteElement(FILE * f, double3 tmp) { return fprintf(f, "%lg,%lg,%lg" , tmp.x, tmp.y, tmp.z); }
inline int txtWriteElement(FILE * f, vector_t tmp) {
	txtWriteElement(f, tmp.x);
	fprintf(f," ");
	txtWriteElement(f, tmp.y);
	fprintf(f," ");
	return txtWriteElement(f, tmp.z);
}

template <typename T> int txtWriteField(FILE * f, T * tmp, int stop, int n) 
{
	for (int i=0;i<n;i++) {
		txtWriteElement(f, tmp[i]);
		if (((i+1) % stop) == 0) fprintf(f,"\n"); else fprintf(f, " ");
	}
	return 0;
}


int txtWriteLattice(char * filename, Lattice * lattice, UnitEnv units, name_set * what, int type)
{
	int size;
	char fn[STRING_LEN];
	lbRegion reg = lattice->region;
	size = reg.size();
	if (D_MPI_RANK == 0) {
		sprintf(fn,"%s_info.txt",filename);
		FILE * f = fopen(fn,"w");
		if (f == NULL) {
			ERROR("Cannot open file: %s\n");
			return -1;
		}
		fprintf(f,"dx: %lg\n", 1/units.alt("m"));
		fprintf(f,"dt: %lg\n", 1/units.alt("s"));
		fprintf(f,"dm: %lg\n", 1/units.alt("kg"));
		fprintf(f,"dT: %lg\n", 1/units.alt("K"));
		fprintf(f,"size: %d\n", size);
		fprintf(f,"NX: %d\n", reg.nx);
		fprintf(f,"NY: %d\n", reg.ny);
		fprintf(f,"NZ: %d\n", reg.nz);
		fclose(f);
	}

	<?R for (q in rows(Quantities)) { ifdef(q$adjoint); ?>
	{
		if (what->in("<?%s q$name ?>")) {
			sprintf(fn,"%s_%s.txt",filename,"<?%s q$name ?>");
			FILE * f=NULL;
			switch (type) {
			case 0:
				f = fopen(fn,"w");
				break;
			case 1:
				char com[STRING_LEN];
				sprintf(com, "gzip > %s.gz", fn);
				f = popen(com, "w");
				break;
			default:
				ERROR("Unknown type in txtWriteLattice\n");
			}
			if (f == NULL) {
				ERROR("Cannot open file: %s\n");
				return -1;
			}
			double v = units.alt("<?%s q$unit ?>");
			<?%s q$type ?>* tmp = new <?%s q$type ?>[size];
			lattice->Get<?%s q$name ?>(reg, tmp, 1/v);
			txtWriteField(f, tmp, reg.nx, size);
			delete[] tmp;
			fclose(f);
		}
	}
	<?R }; ifdef(); ?>

	return 0;
}
