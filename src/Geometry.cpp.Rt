#include "Consts.h"
#ifdef EMBEDED_PYTHON
    #include "Python.h"
    #define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION
#endif

<?R
 library(gvector,quiet=TRUE,warn.conflicts=FALSE)
 library(polyAlgebra,quiet=TRUE,warn.conflicts=FALSE)
?>


#include <stdlib.h>
#include <cstring>
#include <iostream>
#include "pugixml.hpp"

#include "cross.h"
#include "types.h"
#include "Region.h"
#include "Geometry.h"
#include "Global.h"
#include "def.h"
#include "vtkOutput.h"
#include "utils.h"
#include "spline.h"
#include <assert.h>


<?R
				x = c(0,1,-1);
				U = expand.grid(x,x,x)
?>
const int d3q27_vec[] = { <?%s paste(t(U),collapse=",") ?> };

/// Main constructor
/**
        Constructs the Geometry object based on size
        \param r Global Lattice region
        \param units_ Units object associated with the this Geometry object
*/
Geometry::Geometry(const lbRegion & r, const UnitEnv & units_):region(r), units(units_)
{
    geom = new flag_t[region.sizeL()];
    Q = NULL;
    for (size_t i = 0; i < region.sizeL(); i++) {
	geom[i] = 0;
    }
    output("Creating geom size:%ld\n", region.sizeL());
    SettingZones["DefaultZone"] = 0;
}

inline void Geometry::ActivateCuts() {
	if (Q == NULL) {
		Q = new cut_t[region.sizeL()*26];
		for (size_t i = 0; i < region.sizeL()*26; i++) {
			Q[i] = NO_CUT;
		}
	}
}

#define E(x) if (x) { return -1; }

/// Return rounded unit-free value of an xml attribute
/**
        Get the value of an xml attribute, calculate the units
        and round the result to full integer
        \param attr XML attribute
        \param def Default value to return in case there is no such attribute
*/
int Geometry::val(pugi::xml_attribute attr, int def)
{
    if (!attr) {
	return def;
    } else {
	return myround(units.alt(attr.value(), def));
    }
}

/// Return rounded unit-free value of an xml attribute
/**
        Get the value of an xml attribute, calculate the units
        and round the result to full integer
        \param attr XML attribute
        \param def Default value to return in case there is no such attribute
*/
double Geometry::val(pugi::xml_attribute attr, double def)
{
    if (!attr) {
	return def;
    } else {
	return units.alt(attr.value(), def);
    }
}

/// Return rounded unit-free value of an xml attribute (with no default)
/**
        Get the value of an xml attribute, calculate the units
        and round the result to full integer. Print error when no default.
        \param attr XML attribute
*/
int Geometry::val(pugi::xml_attribute attr)
{
    if (!attr) {
	error("Attribute without value and default\n");
	return -1;
    }
    return myround(units.alt(attr.value()));
}
/// Return rounded unit-free value of an xml attribute, extract first char as prefix 
/**
        Get the value of an xml attribute, calculate the units
        and round the result to full integer. Print error when no default.
        \param attr XML attribute
*/
int Geometry::val_p(pugi::xml_attribute attr, char* prefix)
{
    if (!attr) {
    error("Attribute without value and default\n");
    return -1;
    }
    std::string tmp = attr.value();
    *prefix = tmp[0];
    if (*prefix == '>' || *prefix == '<'){
        tmp = tmp.substr(1);
    } else {
        *prefix = '+';
    }
    return myround(units.alt(tmp));
}


/// Return unit-free value of an xml attribute
double Geometry::val_d(pugi::xml_attribute attr)
{
    return units.alt(attr.value());
}

/// Set the foreground flag/NodeType
/**
        Set the foreground flag, which will be used to fill
        all the geometry primitives later on.
        \param name Name of the flag/NodeType to set
*/
int Geometry::setFlag(const pugi::char_t * name)
{
    pugi::xml_node node = fg_xml.find_child_by_attribute("Type", "name", name);
    if (!node) {
	ERROR("Unknown flag (in xml): %s\n", name);
	return -1;
    }
    fg = node.attribute("value").as_int();
    E(setMask(node.attribute("mask").value()));
    fg_mode = MODE_OVERWRITE;
    return 0;
}

/// Set the forground flag mask
/**
        Set the foreground flag mask, which will be used to
        mask what is overwriten when filling with foreground flag
        in all the geometry primitives later on.
        \param name Name of the flag mask/NodeType to set
*/
int Geometry::setMask(const pugi::char_t * name)
{
    pugi::xml_node node = fg_xml.find_child_by_attribute("Mask", "name", name);
    if (!node) {
	error("Unknown mask (in xml): %s\n", name);
	return -1;
    }
    fg_mask = node.attribute("value").as_int(-1);
    return 0;
}

/// Set the forground flag mode
/**
        Set the foreground flag mode, by which the forground flag will be set
        \param name Name of the flag mask/NodeType to set
*/
int Geometry::setMode(const pugi::char_t * mode)
{
	if (strcmp(mode, "overwrite") == 0) {
		fg_mode = MODE_OVERWRITE;
	} else if (strcmp(mode, "fill") == 0) {
		fg_mode = MODE_FILL;
	} else if (strcmp(mode, "change") == 0) {
		fg_mode = MODE_CHANGE;
	} else {
		error("Unknown mode (in xml): %s\n", mode);
		return -1;
	}
	return 0;
}

int Geometry::setZone(const pugi::char_t * name)
{
    int ZoneNumber;
    if (SettingZones.count(name) > 0) {
        ZoneNumber = SettingZones[name];
    } else {
        ZoneNumber = SettingZones.size();
        debug1("Setting new zone: %s -> %d\n", name, ZoneNumber);
        SettingZones[name] = ZoneNumber;
    }
    assert(ZoneNumber < ZONE_MAX);
    fg      = (fg      &(~ NODE_SETTINGZONE )) |  (ZoneNumber << ZONE_SHIFT);
    fg_mask =  fg_mask |   NODE_SETTINGZONE;
    return 0;
}

#define MAX_INT 2e9;

/// Sets a region according to the XML attributes
/**
        Sets a region with respect to the parent region basing
        on XML attributes like "nx","dx" and "dx"
        \param node XML element
*/
lbRegion Geometry::getRegion(const pugi::xml_node & node)
{
    lbRegion ret;
    pugi::xml_attribute attr;
    if (!node) {
	ret.dx = ret.dy = ret.dz = 0;
	ret.nx = ret.ny = ret.nz = 1;
	return ret;
    }
    ret = getRegion(node.parent());

    char side; 
    
    attr = node.attribute("dx");
    if (attr) {
	int w = val_p(attr, &side);
    
    if (side == '<') {
        w = ret.nx + w;
    } else if (side == '+') {
    	if (w < 0)
	        w = ret.nx + w;
    }

	ret.dx += w;
	ret.nx -= w;
    }
    attr = node.attribute("dy");
    if (attr) {
	int w = val_p(attr, &side);

    if (side == '<') {
        w = ret.ny + w;
    } else if (side == '+') {
    	if (w < 0)
	        w = ret.ny + w;
    }

	ret.dy += w;
	ret.ny -= w;
    }
    attr = node.attribute("dz");
    if (attr) {
	int w = val_p(attr, &side);
    if (side == '<') {
        w = ret.nz + w;
    } else if (side == '+') {
    	if (w < 0)
	        w = ret.nz + w;
    }
	ret.dz += w;
	ret.nz -= w;
    }

    attr = node.attribute("fx");
    if (attr) {
	int w = val(attr);
	if (w < 0)
	    w = ret.nx + w + ret.dx;
	ret.nx = w - ret.dx + 1;
    }
    attr = node.attribute("fy");
    if (attr) {
	int w = val(attr);
	if (w < 0)
	    w = ret.ny + w + ret.dy;
	ret.ny = w - ret.dy + 1;
    }
    attr = node.attribute("fz");
    if (attr) {
	int w = val(attr);
	if (w < 0)
	    w = ret.nz + w + ret.dz;
	ret.nz = w - ret.dz + 1;
    }

    attr = node.attribute("nx");
    if (attr)
	ret.nx = val(attr);
    attr = node.attribute("ny");
    if (attr)
	ret.ny = val(attr);
    attr = node.attribute("nz");
    if (attr)
	ret.nz = val(attr);

    return ret;
}

/// Fill a node with foreground flag
inline flag_t Geometry::Dot(int x, int y, int z)
{
    if (region.isIn(x, y, z)) {
	int i = region.offset(x, y, z);
	if (geom[i] & fg_mask) {
		if (fg_mode == MODE_FILL) return NODE_None;
	} else {
		if (fg_mode == MODE_CHANGE) return NODE_None;
	}
	return geom[i] = (geom[i] & (~fg_mask)) | fg;
    } else 
    return NODE_None;
}

/// Check if a point is inside a sphere
inline int inSphere(double x, double y, double z)
{
    x = 2 * x - 1;
    y = 2 * y - 1;
    z = 2 * z - 1;
    return (x * x + y * y + z * z) < 1;
}

/// Check if a point is inside of a wedge
inline int inWedge(double x, double y, double z, const char *type)
{
    if (strcmp(type, "") == 0)
	type = "UpperLeft";
    if (strcmp(type, "UpperLeft") == 0) {
	// default
    } else if (strcmp(type, "UpperRight") == 0) {
	x = 1. - x;
    } else if (strcmp(type, "LowerLeft") == 0) {
	y = 1. - y;
    } else if (strcmp(type, "LowerRight") == 0) {
	x = 1. - x;
	y = 1. - y;
    }
    return (x - y) < 1e-10;
}

/// Transform STL points according to attributes of an XML element
inline int Geometry::transformSTL(int ntri, STL_tri * tri, pugi::xml_node n)
{
    if (n.attribute("Xrot")) {
	double v = units.alt(n.attribute("Xrot").value());
	debug1("STL: rotating X axis %lf (%lf deg)\n", v, v / 4. / atan(1.) * 180);
	double y, z;
	for (int i = 0; i < ntri; i++) {
	    y = tri[i].p1[1];
	    z = tri[i].p1[2];
	    tri[i].p1[1] = cos(v) * y - sin(v) * z;
	    tri[i].p1[2] = sin(v) * y + cos(v) * z;
	    y = tri[i].p2[1];
	    z = tri[i].p2[2];
	    tri[i].p2[1] = cos(v) * y - sin(v) * z;
	    tri[i].p2[2] = sin(v) * y + cos(v) * z;
	    y = tri[i].p3[1];
	    z = tri[i].p3[2];
	    tri[i].p3[1] = cos(v) * y - sin(v) * z;
	    tri[i].p3[2] = sin(v) * y + cos(v) * z;
	}
    }
    if (n.attribute("scale")) {
	double v = units.alt(n.attribute("scale").value());
	debug1("STL: scaling %lf\n", v);
	for (int i = 0; i < ntri; i++) {
	    tri[i].p1[0] = v * tri[i].p1[0];
	    tri[i].p2[0] = v * tri[i].p2[0];
	    tri[i].p3[0] = v * tri[i].p3[0];
	    tri[i].p1[1] = v * tri[i].p1[1];
	    tri[i].p2[1] = v * tri[i].p2[1];
	    tri[i].p3[1] = v * tri[i].p3[1];
	    tri[i].p1[2] = v * tri[i].p1[2];
	    tri[i].p2[2] = v * tri[i].p2[2];
	    tri[i].p3[2] = v * tri[i].p3[2];
	}
    }
    if (n.attribute("x")) {
	double v = units.alt(n.attribute("x").value());
	debug1("STL: move in x %lf\n", v);
	for (int i = 0; i < ntri; i++) {
	    tri[i].p1[0] += v;
	    tri[i].p2[0] += v;
	    tri[i].p3[0] += v;
	}
    }
    if (n.attribute("y")) {
	double v = units.alt(n.attribute("y").value());
	debug1("STL: move in y %lf\n", v);
	for (int i = 0; i < ntri; i++) {
	    tri[i].p1[1] += v;
	    tri[i].p2[1] += v;
	    tri[i].p3[1] += v;
	}
    }
    if (n.attribute("z")) {
	double v = units.alt(n.attribute("z").value());
	debug1("STL: move in z %lf\n", v);
	for (int i = 0; i < ntri; i++) {
	    tri[i].p1[2] += v;
	    tri[i].p2[2] += v;
	    tri[i].p3[2] += v;
	}
    }
    const double sm_diff[3] = {0.123e-5, 0.231e-5, 0.312e-5};
    for (int i = 0; i < ntri; i++) {
	for (int j = 0; j < 3; j++) {
		tri[i].p1[j] = myround(tri[i].p1[j] * 1e5) * 1e-5;
		tri[i].p2[j] = myround(tri[i].p2[j] * 1e5) * 1e-5;
		tri[i].p3[j] = myround(tri[i].p3[j] * 1e5) * 1e-5;
		tri[i].p1[j] += sm_diff[j] - 0.5;
		tri[i].p2[j] += sm_diff[j] - 0.5;
		tri[i].p3[j] += sm_diff[j] - 0.5;
	}
    }
    return 0;
}

inline cut_t smaller(cut_t a,cut_t b) {
	if (a<b) return a;
	return b;
}

cut_t calcCut(STL_tri tri, double x, double y, double z, double dx, double dy, double dz) {
	double mat[16],b[4],r[4];
	<?R
		M = PV("mat[",1:16-1,"]")
		dim(M) = c(4,4)
		W = M
		xyz = c("x","y","z");
		W[1:3,1] = PV(xyz) - PV("tri.p1[",1:3-1,"]")
		W[1:3,2] = PV(xyz) - PV("tri.p2[",1:3-1,"]")
		W[1:3,3] = PV(xyz) - PV("tri.p3[",1:3-1,"]")
		W[1:3,4] = PV("d",xyz)
		W[4,1:4] = c(1,1,1,0)
		b = c(0,0,0,1)
		C(M,W)
		C(PV("b[",1:4-1,"]"),c(0,0,0,1))
	?>
//	return 0;
	GaussSolve(mat,b,r,4);
	if (r[0] < 0) return 255;
	if (r[1] < 0) return 255;
	if (r[2] < 0) return 255;
	if (r[3] < 0) return 255;
	if (r[3] > 1) return 255;
	return r[3]*200;
}


/// Load STL file
inline int Geometry::loadSTL(lbRegion reg, pugi::xml_node n)
{
    char header[80];
    STL_tri *tri;
    int ntri;
    int ret;
    int insideOut=0;
    if (!n.attribute("file")) {
	error("No 'file' attribute in 'STL' element in xml conf\n");
	return -1;
    }
    if (n.attribute("side")) {
        std::string side=n.attribute("side").value();
        if (side == "in") {
	    insideOut=0;
        } else if (side == "out") {
            insideOut=1;
        } else if (side == "surface") {
            insideOut=2;
        } else {
	    error("'side' in 'STL' element have to be 'in', 'out' or 'surface'\n");
	    return -1;
	}
    }
    debug1("------ STL -----\n");
    FILE *f = fopen(n.attribute("file").value(), "rb");
    if (f == NULL) {
	error("'STL' element: %s doesn't exists or cannot be opened\n", n.attribute("file").value());
	return -1;
    }
    ret = fread(header, 80, sizeof(char), f);
    ret = fread(&ntri, 1, sizeof(int), f);
    tri = (STL_tri *) malloc(ntri * sizeof(STL_tri));
    char *lev = (char *) malloc(reg.size() * sizeof(char));
    for (int i = 0; i < reg.size(); i++)
	lev[i] = insideOut;
    debug1("%d x %ld = %ld\n", ntri, sizeof(STL_tri), ntri * sizeof(STL_tri));
    ret = fread(tri, ntri, sizeof(STL_tri), f);
    fclose(f);

    debug1("Number of triangles: %d\n", ntri);
    transformSTL(ntri, tri, n);
    for (int i = 0; i < ntri; i++) {
	int min[3], max[3];
	for (int j=0; j<3;j++) {
		min[j] = ceil(tri[i].p1[j]);
		if (tri[i].p2[j] < min[j])
		    min[j] = ceil(tri[i].p2[j]);
		if (tri[i].p3[j] < min[j])
		    min[j] = ceil(tri[i].p3[j]);
		max[j] = floor(tri[i].p1[j]);
		if (tri[i].p2[j] > max[j])
		    max[j] = floor(tri[i].p2[j]);
		if (tri[i].p3[j] > max[j])
		    max[j] = floor(tri[i].p3[j]);
		min[j] -= 1;
		max[j] += 1;
	}
	double v[2], v1[2], v2[2], c0, c1, c2, c3;
	v1[0] = tri[i].p2[0] - tri[i].p1[0];
	v1[1] = tri[i].p2[2] - tri[i].p1[2];
	v2[0] = tri[i].p3[0] - tri[i].p1[0];
	v2[1] = tri[i].p3[2] - tri[i].p1[2];
	c0 = v1[0] * v2[1] - v1[1] * v2[0];
	if (insideOut == 2) {
            size_t regsize = reg.size();
            for (int x = min[0]; x <= max[0]; x++)
                for (int z = min[2]; z <= max[2]; z++)
                    for (int y = min[1]; y <= max[1]; y++) if (reg.isIn(x, y, z)) {
                            size_t k = reg.offset(x, y, z);
                            cut_t nq;
                            ActivateCuts();
                            for (int d = 0; d<26; d++) {
                                    nq = calcCut(tri[i],x,y,z,d3q27_vec[(d+1)*3],d3q27_vec[(d+1)*3+1],d3q27_vec[(d+1)*3+2]);
                                    if (nq < Q[regsize*d+k]) {
                                            Q[regsize*d+k] = nq;
                                            Dot(x, y, z);
                                    }
                            }
                    }
	} else {
            for (int x = min[0]; x <= max[0]; x++)
                for (int z = min[2]; z <= max[2]; z++) {
                    v[0] = x - tri[i].p1[0];
                    v[1] = z - tri[i].p1[2];
                    c1 = v1[0] * v[1] - v1[1] * v[0];
                    c2 = v[0] * v2[1] - v[1] * v2[0];
                    c1 /= c0;
                    c2 /= c0;
                    if ((c1 >= 0) && (c2 >= 0) && (c1 + c2 <= 1)) {
                        c3 = 1. - c1 - c2;
                        double h = tri[i].p1[1] * c3 + tri[i].p2[1] * c2 + tri[i].p3[1] * c1;
                        for (int y = reg.dy; y <= h; y++) {
    //                                        debug1("%d %d %d %d\n",x,y,z,reg.offset(x,y,z));
                            if (reg.isIn(x, y, z))
                                lev[reg.offset(x, y, z)]++;
                        }
                    }
                }
	}
    }
    if (insideOut != 2)
        for (int x = reg.dx; x < reg.dx + reg.nx; x++)
            for (int y = reg.dy; y < reg.dy + reg.ny; y++)
                for (int z = reg.dz; z < reg.dz + reg.nz; z++) {
                    if (lev[reg.offset(x, y, z)] % 2 == 1) {
    //                        debug1("%d %d %d %d\n",x,y,z,lev[reg.offset(x,y,z)]);
                        Dot(x, y, z);
                    }
                }
    free(tri);
    free(lev);
    return 0;
}


/// Load a b-spline string
inline int Geometry::loadSweep(lbRegion reg, pugi::xml_node node)
{
	pugi::xml_attribute attr;

	int order=1;
	attr = node.attribute("order");
	if (attr) order = attr.as_int();
	double dl=1e-3;
	attr = node.attribute("step");
	if (attr) dl = attr.as_double();
	attr = node.attribute("steps");
	if (attr) dl = 1/units.alt(attr.value());
	double def_r=1;
	attr = node.attribute("r");
	if (attr) def_r = units.alt(attr.value());
	
	int n = 0;
	std::vector<double> nx,ny,nz,nr;
	for (pugi::xml_node par = node.first_child(); par; par = par.next_sibling()) {
		if (strcmp(par.name(),"Point") == 0) {
			nx.push_back(units.alt(par.attribute("x").value()));
			ny.push_back(units.alt(par.attribute("y").value()));
			nz.push_back(units.alt(par.attribute("z").value()));
			nr.push_back(val(par.attribute("r"),def_r));
			n++;
		} else {
			NOTICE("Unknown element %s in Sweep\n", par.name());
		}
	}
	if (n == 0) {
		NOTICE("No points in Sweep\n");
		return 0;
	}
	if (order > n-1) {
		NOTICE("For order %d b-spline you need at least %d points\n", order, order+1);
		order = n-1;
	}
    output("Making a Sweep over region (%ld) with %lf step\n",reg.size(), dl);
    for (int x = reg.dx; x < reg.dx + reg.nx; x++)
	for (int y = reg.dy; y < reg.dy + reg.ny; y++)
	    for (int z = reg.dz; z < reg.dz + reg.nz; z++) {
		for (double l=0;l<1; l+= dl) {
			double x0 = bspline(l, nx, order);
			double y0 = bspline(l, ny, order);
			double z0 = bspline(l, nz, order);
			double r = bspline(l, nr, order);
			if ((x-x0)*(x-x0)+(y-y0)*(y-y0)+(z-z0)*(z-z0) < r*r) {
			    Dot(x, y, z);
			}
		}
	    }

	return 0;	
}


/// Main geometry-generating function
int Geometry::Draw(pugi::xml_node & node)
{
    for (pugi::xml_node n = node.first_child(); n; n = n.next_sibling()) {
	lbRegion reg = getRegion(n);
	if (strcmp(n.name(), "Box") == 0) {
	    reg = region.intersect(reg);
	    debug1("Filling with flag %d (%d)\n", fg, fg_mask);
	    DEBUG1(reg.print();)
		for (int x = reg.dx; x < reg.dx + reg.nx; x++)
		for (int y = reg.dy; y < reg.dy + reg.ny; y++)
		    for (int z = reg.dz; z < reg.dz + reg.nz; z++) {
			Dot(x, y, z);
		    }
	} else if (strcmp(n.name(), "HalfSphere") == 0) {
//                      reg = region.intersect(reg);
	    debug1("Filling half sphere with flag %d (%d)\n", fg, fg_mask);
	    DEBUG1(reg.print();)
		for (int x = reg.dx; x < reg.dx + reg.nx; x++)
		for (int y = reg.dy; y < reg.dy + reg.ny; y++)
		    for (int z = reg.dz; z < reg.dz + reg.nz; z++) {
			if (inSphere((.5 + x - reg.dx) / reg.nx, 0.5 - (y - .5  - reg.dy) / reg.ny / 2., (.5 + z - reg.dz) / reg.nz) ) {
			    Dot(x, y, z);
			}
		    }
	} else if (strcmp(n.name(), "Sphere") == 0) {
//                      reg = region.intersect(reg);
	    debug1("Filling sphere with flag %d (%d)\n", fg, fg_mask);
	    DEBUG1(reg.print();)
		for (int x = reg.dx; x < reg.dx + reg.nx; x++)
		for (int y = reg.dy; y < reg.dy + reg.ny; y++)
		    for (int z = reg.dz; z < reg.dz + reg.nz; z++) {
			if (inSphere((.5 + x - reg.dx) / reg.nx, (.5 + y - reg.dy) / reg.ny, (.5 + z - reg.dz) / reg.nz)) {
			    Dot(x, y, z);
			}
		    }
    } else if (strcmp(n.name(), "OffgridSphere") == 0) {

        double x0 = units.alt(n.attribute("x").value());
        double y0 = units.alt(n.attribute("y").value());
        double z0 = units.alt(n.attribute("z").value());

        double Rx,Ry,Rz;
        if ( n.attribute("R").empty() ){
           Rx = units.alt(n.attribute("Rx").value());
           Ry = units.alt(n.attribute("Ry").value());
           Rz = units.alt(n.attribute("Rz").value());
        } else {
           double R = units.alt(n.attribute("R").value());
           Rx = R;
           Ry = R;
           Rz = R;
        }

        double Rx2 = Rx*Rx;
        double Ry2 = Ry*Ry;
        double Rz2 = Rz*Rz;
   
        reg.dx = x0 - Rx - 5;
        reg.dy = y0 - Ry - 5;
        reg.dz = z0 - Rz - 5;

        reg.nx = 2*Rx + 10;
        reg.ny = 2*Ry + 10;
        reg.nz = 2*Rz + 10;

	    debug1("Filling sphere with flag %d (%d)\n, with center at (%lf,%lf,%lf) and radius (%lf,%lf,%lf)", fg, fg_mask, x0, y0, z0, Rx,Ry,Rz);
	    DEBUG1(reg.print();)
		for (int x = reg.dx; x < reg.dx + reg.nx; x++)
		for (int y = reg.dy; y < reg.dy + reg.ny; y++)
		    for (int z = reg.dz; z < reg.dz + reg.nz; z++) {
               double xx =  (.5 + x - x0);  
               double yy =  (.5 + y - y0);  
               double zz =  (.5 + z - z0);  
			   if ( xx*xx/Rx2 + yy*yy/Ry2 + zz*zz/Rz2 < 1. ) {
			    Dot(x, y, z);
			   }
		}
	}  else if (strcmp(n.name(), "OffgridPipe") == 0) {

        double x0 = units.alt(n.attribute("x").value());
        double y0 = units.alt(n.attribute("y").value());
        double z0 = units.alt(n.attribute("z").value());

        double Rx,Ry;
        if ( n.attribute("R").empty() ){
           Rx = units.alt(n.attribute("Rx").value());
           Ry = units.alt(n.attribute("Ry").value());
        } else {
           double R = units.alt(n.attribute("R").value());
           Rx = R;
           Ry = R;
        }

        double Rx2 = Rx*Rx;
        double Ry2 = Ry*Ry;
   
        reg.dx = x0 - Rx - 5;
        reg.dy = y0 - Ry - 5;

        reg.nx = 2*Rx + 10;
        reg.ny = 2*Ry + 10;
	    debug1("Filling Z-pipe  with flag %d (%d)\n, with center at (%lf,%lfi,%f) and radius (%lf,%lf)", fg, fg_mask, x0, y0, z0, Rx,Ry);
	    DEBUG1(reg.print();)
		for (int x = reg.dx; x < reg.dx + reg.nx; x++)
		for (int y = reg.dy; y < reg.dy + reg.ny; y++)
		    for (int z = reg.dz; z < reg.dz + reg.nz; z++) {
               double xx =  (.5 + x - x0);  
               double yy =  (.5 + y - y0);  
			   if ( xx*xx/Rx2 + yy*yy/Ry2 < 1. ) {
			    Dot(x, y, z);
			   }
		}
	} else if (strcmp(n.name(),"Pipe") == 0) {
	    debug1("Filling pipe with flag %d (&d)\n",fg,fg_mask);
	    DEBUG1(reg.print();)
            for (int x = reg.dx; x < reg.dx + reg.nx; x++)
		for (int y = reg.dy - 1 ; y < reg.dy + reg.ny + 1; y++)
		   for (int z = reg.dz - 1; z < reg.dz + reg.nz + 1;z++) {
			 if (!inSphere(0.5, (.5 + y - reg.dy) / reg.ny, (.5 + z - reg.dz) / reg.nz)) {
				Dot(x,y,z);
			}
		   }
	} 
    else if (strcmp(n.name(), "Wedge") == 0) {
//                      reg = region.intersect(reg);
	    debug1("Filling wedge with flag %d (%d)\n", fg, fg_mask);
	    DEBUG1(reg.print();)
	    const char *type = n.attribute("direction").value();
	    for (int x = reg.dx; x < reg.dx + reg.nx; x++)
		for (int y = reg.dy; y < reg.dy + reg.ny; y++)
		    for (int z = reg.dz; z < reg.dz + reg.nz; z++) {
			if (inWedge((x - reg.dx) / (reg.nx - 1.), (y - reg.dy) / (reg.ny - 1.), (z - reg.dz) / (reg.nz - 1.), type)) {
			    Dot(x, y, z);
			}
         }
    } else if (strcmp(n.name(), "PythonInline") == 0) {
        #ifdef EMBEDED_PYTHON
        
         if (!Py_IsInitialized()) {
            notice("Python Init");
            Py_Initialize();
        }    
        // Make sure the GIL has been created since we need to acquire it in our
        // callback to safely call into the python application.
        if (! PyEval_ThreadsInitialized()) {
            PyEval_InitThreads();
        }
        
        PyObject *pGlobal;
        PyObject* pyModule, *pLocal, *pValue;

        PyGILState_STATE state;
        state = PyGILState_Ensure();
   
        pyModule = PyImport_AddModule("__main__"); 
        pLocal = PyModule_GetDict(pyModule);
        pGlobal = PyModule_GetDict(pyModule);



        pValue = PyRun_String( n.child_value(), Py_file_input, pGlobal, pLocal );
        if (pValue == NULL){
             error("Provided Python code is not executable or does not contain 'test' function");    
        }

        PyObject* pFunc = PyObject_GetAttrString(pyModule, "test"); ;
     //   Py_INCREF(pFunc);
        Py_DECREF(pValue);


        if (pFunc && PyCallable_Check(pFunc)) {
            PyObject* pArgs;
            pArgs = PyTuple_New(3);
  
            for (int x = reg.dx; x < reg.dx + reg.nx; x++)
        	for (int y = reg.dy; y < reg.dy + reg.ny; y++)
	            for (int z = reg.dz; z < reg.dz + reg.nz; z++) {

                    PyTuple_SetItem( pArgs, 0, PyFloat_FromDouble((x-reg.dx)/(real_t)reg.nx));
                    PyTuple_SetItem( pArgs, 1, PyFloat_FromDouble((y-reg.dy)/(real_t)reg.ny));
                    PyTuple_SetItem( pArgs, 2, PyFloat_FromDouble((z-reg.dz)/(real_t)reg.nz));
           
                    //Call my function, passing it the number four
                    pValue = PyObject_CallObject(pFunc, pArgs);

           			if (  PyInt_AsLong(pValue) == 1 ) {
   			             Dot(x, y, z);
		            }
                 
                 }   
            Py_DECREF(pArgs);
        } else {
            error("Provided Python code is not executable or does not contain 'test' function");        
        }


        Py_DECREF(pValue);
  //      Py_XDECREF(pFunc);
 //       Py_DECREF(pGlobal);
//        Py_DECREF(pLocal);
        PyGILState_Release(state);
      //  Py_Finalize();   

        #else
            error("You need to compile PYTHON support for this geometry element");
        #endif

	} else if (strcmp(n.name(), "STL") == 0) {
	    debug1("Filling stl geometry with flag %d (%d)\n", fg, fg_mask);
	    DEBUG1(reg.print();)
		if (loadSTL(reg, n))
		return -1;
	} else if (strcmp(n.name(), "Sweep") == 0) {
		debug1("Filling a sweep geometry with flag %d (%d)\n", fg, fg_mask);
		DEBUG1(reg.print();)
		if (loadSweep(reg, n))
		return -1;
	} else if (strcmp(n.name(), "Text") == 0) {
	    lbRegion crop = getRegion(n.parent());
	    crop = region.intersect(crop);
	    crop.print();
	    if (!n.attribute("file")) {
		error("No 'file' attribute in 'Text' element in xml conf\n");
		return -1;
	    }
	    FILE *f = fopen(n.attribute("file").value(), "rt");
	    if (f == NULL) {
		error("Could not open file: %s\n", n.attribute("file").value());
		return -1;
	    }
	    output("Reading file %s\n", n.attribute("file").value());
	    for (int x = reg.dx; x < reg.dx + reg.nx; x++)
		for (int y = reg.dy; y < reg.dy + reg.ny; y++)
		    for (int z = reg.dz; z < reg.dz + reg.nz; z++) {
			int v;
			int ret = fscanf(f, "%d", &v);
                        if (ret == EOF) {
                            ERROR("File (%s) ended while reading\n", n.attribute("file").value());
                            return -1;
                        }
			if ((v != 0) && (crop.isIn(x, y, z)))
			    Dot(x, y, z);
		    }
	    fclose(f);
	} else {
	    pugi::xml_node node = fg_xml.find_child_by_attribute("Zone", "name", n.name());
	    if (node) {
		E(Draw(node));
	    } else {
		error("Unknown geometry element: %s\n", n.name());
		return -1;
	    }
	}
    }
    return 0;
}

/// Loades Zone definition
int Geometry::loadZone(const char *name)
{
    pugi::xml_node node = fg_xml.find_child_by_attribute("Zone", "name", name);
    if (!node) {
	error("Unknown zone (in xml): %s", name);
	return -1;
    }
    E(Draw(node));
    return 0;

}

/// Loades Geometry from a XML tree
int Geometry::load(pugi::xml_node & node)
{
	output("loading geometry ...\n");
    pugi::xml_node geom_def = xml_def.child("Geometry");
    fg_xml = node;
    for (pugi::xml_node z = geom_def.first_child(); z; z = z.next_sibling()) {
	pugi::xml_attribute attr = z.attribute("name");
	if (!attr)
	    continue;
	if (node.find_child_by_attribute(z.name(), "name", attr.value()))
	    continue;
	node.prepend_copy(z);
    }
    for (pugi::xml_node n = node.first_child(); n; n = n.next_sibling()) {
	if (strcmp(n.name(), "Zone") == 0)
	    continue;
	if (strcmp(n.name(), "Type") == 0)
	    continue;
	if (strcmp(n.name(), "Mask") == 0)
	    continue;
	E(setFlag(n.name()));
	for (pugi::xml_attribute attr = n.first_attribute(); attr; attr = attr.next_attribute()) {
	    if (strcmp(attr.name(), "name") == 0) {
	        E(setZone(attr.value()));
	    } else if (strcmp(attr.name(), "mask") == 0) {
	        E(setMask(attr.value()));
	    } else if (strcmp(attr.name(), "mode") == 0) {
	        E(setMode(attr.value()));
	    } else {
	        
	    }
	}
	{
	    pugi::xml_attribute attr = n.attribute("zone");
	    if (attr) {
		loadZone(attr.value());
	    }
        }
	E(Draw(n));
    }
    if (node.attribute("save")) {
	writeVTI(node.attribute("save").value());
    }
    return 0;
}

Geometry::~Geometry()
{
    debug1("[%d] Destroy geom\n", D_MPI_RANK);
    delete[]geom;
    if (Q != NULL) delete[] Q;
}

/// Dumps the Geometry to a vti file
void Geometry::writeVTI(const char *filename)
{
    vtkFileOut vtkFile;
    if (vtkFile.Open(filename)) {
	return;
    }
    vtkFile.Init(region, "");
    vtkFile.WriteField("geom", geom);
    if (Q != NULL) {
        size_t regsize = region.size();
        for (int d=0;d<26;d++) {
            char nm[20];
//            sprintf(nm,"Q(%2d,%2d,%2d)",d3q27_vec[(d+1)+3],d3q27_vec[(d+1)*3+1],d3q27_vec[(d+1)*3+2]);
            sprintf(nm,"Q_%d",d);
            vtkFile.WriteField(nm, Q + regsize*d);
        }
    }
    vtkFile.Finish();
    vtkFile.Close();
}
