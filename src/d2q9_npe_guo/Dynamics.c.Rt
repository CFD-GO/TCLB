<?R
	source("conf.R")
	c_header();
    U = as.matrix(Density[Density$group=="g",c("dx","dy")])

# U = as.matrix( c( 0, 1, 0, -1, 0, 1, -1, -1, 1), c( 0, 0, 1, 0, -1, 1, 1, -1, -1)) 
    
# Creating variables for symbolic computations

    g = PV(DensityAll$name[DensityAll$group=="g"])
    h_0 = PV(DensityAll$name[DensityAll$group=="h_0"])
    h_1= PV(DensityAll$name[DensityAll$group=="h_1"])
    f = PV(DensityAll$name[DensityAll$group=="f"])
 
    psi =  PV("psi")
	RD = PV("RD")
	tau_psi = PV("tau_psi")
	dt = PV("dt")
	rho_e = PV("rho_e")
	epsilon=PV("epsilon")
    
    RD = -2./3. * (0.5 - tau_psi) * dt  * ( rho_e *(epsilon^-1) ) ;

    wp = c(1./9. - 1., 1./9., 1./9.,1./9.,1./9.,1./9.,1./9.,1./9.,1./9.)
    wp0 = 1./9.
    wps = c(0., 1./8., 1./8., 1./8., 1./8., 1./8., 1./8., 1./8., 1./8.)

#Basic variables
    rho = PV("rho")
    u = PV(c("u.x","u.y"))
# Calculating equlibrium density set
	source("MRT/feq.R")
    feq = MRT_feq(U, rho, u*rho );
#	geq = MRT_feq(U, rhoT, u*rhoT );

#calculating weights
	wi =  c(4./9., 1./9., 1./9., 1./9., 1./9., 1./36., 1./36., 1./36., 1./36.)

#	wi = sapply(wi@vec,"[[",".M") # dirty way to extract numeric value - to be fixed
#	wi = c(16,4,4,4,4,1,1,1,1)/36
	over_c2 = 1/sum(wi*U[,1]**2)         
    n_inf = .001	    
    kb= PV("kb") 
    
    el = PV("el")
    Temp = PV("Temp")
    epsilon = 0.1
    


    dt_D0 = 1.
    dt_D1 = 1.
    z1 = PV("z1")
    z0 = PV("z0")
    D = 1./6.


# one over square of speed of sound



?>
static const  real_t el = 1.;
static const  real_t kb = 1.;
static const  real_t Temp = 1.;
CudaDeviceFunction real_t getPsi(){
    const real_t wp0 = <?R C(wp0) ?>;
	return ( <?R C( sum( g[2:9] ))  ?> ) / (1. - wp0);
}


CudaDeviceFunction real_t getSubiter(){
	return subiter;
}

CudaDeviceFunction void CalcPsi(){
    psi - getPsi();
}
CudaDeviceFunction real_t getrho_e(){
//    const real_t psi = getPsi();
//	return -2. * n_inf * z * el * sinh( z * el / kb/ T * psi);
    return z0*getn0() + z1 * getn1();	
}

CudaDeviceFunction void BounceBack()
{
     /*
     real_t tmp;
    psi(i_,j_) = psi_down;
    for (int k_ = 0; k_ < 9; k_++) {
        const int di = ix(k_,i_,j_);
        const int dj = iy(k_,i_,j_);

        const double shifted = psi_in(di,dj,k_);
        const double shifted_eq =  wp(k_) * psi(di,dj);

        psi_out(i_,j_,k_) =  wp(k_) * psi_down -  (1. - wp2) * (shifted - shifted_eq );
    }
     */
<?R
    psi_shifted = PV(paste("psi(",-U[,1],",",-U[,2],")"))
    psi_bc=PV("psi_bc")
?>
    real_t h0bc =  exp(-z0 * el * psi_bc / kb / Temp);

    real_t h1bc =  exp(-z1 * el * psi_bc / kb / Temp);

<?R
    h0bc = PV("h0bc");    
    h1bc = PV("h1bc");
# actual, proper bc, g should be from diferent node, as psi_shifted, unable to imlement
#    C(g, wp*1.  - (1. - wp0) * (g_shifted - wp*psi_shifted))
    C(g, wp*psi_bc)
    C(h_0, n_inf * wi * h0bc )
    C(h_1, n_inf * wi * h1bc )

    ?>
}

CudaDeviceFunction float2 Color() {
    float2 ret;
	ret.x = 0;
	ret.y = 0;
    return ret;
}


CudaDeviceFunction void Run() {
    switch (NodeType & NODE_BOUNDARY) {
	case NODE_Solid:
	case NODE_Wall:
		BounceBack();
		break;
    }
    if ((NodeType & NODE_COLLISION))
    {
        CollisionBGK();
    }
}

CudaDeviceFunction void Init() {
	real_t psi0;
    vector_t u = {0.,0.};
    real_t rho = 1.;
    real_t n00 = 1.;
    real_t n01 = 1.;
<?R
    psi0=PV("psi0");

	C( g, wp*psi0 );
    C( f, feq );
    n00 = PV("n00");
    n01 = PV("n01");
    C( h_0, n00 * wi);
    C( h_1, n01 * wi);

?>
}


CudaDeviceFunction void CollisionBGK()
{
	real_t M[9];
	real_t psi, rho_e, rho, n0, n1;
    vector_t u;

	rho_e = getrho_e();
    psi = getPsi();
    rho = getRho();

    u = getRhoU();
    u.x = u.x / rho;
    u.y = u.y / rho;

    n0 = getn0();
    n1 = getn1();
    subiter = getSubiter();
<?R
    C(g, g - tau_psi^-1 * (g - wp*psi) +  dt * wps * RD  )
?>

//    if (subiter < 10) {
 //       C(h_0, h_0 - tau_D0^-1 * (h_0 - heq0 ) - wi * dt_D0 * z0 * S * n0 )
//    } else {
    
    const vector_t gradPsi = getGradPsi();
    <?R
        cs2 = 1./3.
        tau_D0 = D / dt_D0 / cs2  + 1./2.
        tau_D1 = D / dt_D1 / cs2  + 1./2.
        

        B = D / (cs2 * tau_D0 * dt_D0)        
        BK = B * el  / kb / Temp        
        u = PV(c("u.x","u.y"))

        cu = u[1] * U[,1] + u[2] * U[,2]
        
        gradPsi = PV(c("gradPsi.x", "gradPsi.y"))

        n0 = PV("n0")    
        heq0 = wi * n0 * (1 - cu) ;

        n1 = PV("n1")
        heq1 = wi * n1 * (1. - cu)
        
        S = gradPsi[1] * U[,1] + gradPsi[2] * U[,2]
        
        C(h_0, h_0 - tau_D0^-1 * (h_0 - heq0 ) - wi * dt_D0 * z0 * S * n0 )
#        subiter=PV("subiter")
#Ci(h_0, subiter*wi)      
#C(h_0, h_0 - tau_D0^-1 * (h_0 - heq0 ) - wi * dt_D0 * z0 * S * n0 )
        C(h_1, h_1 - tau_D1^-1 * (h_1 - heq1 ) - wi * dt_D1 * z1 * S * n1 )

    ?>
      
//    }

}

CudaDeviceFunction void CalcSubiter()
{
    if (subiter > 10) {
        subiter = 0;
    }
    subiter = subiter + 1;
}


CudaDeviceFunction vector_t getGradPsi(){

    vector_t grad;

    <?R 
        C(PV(c("grad.x","grad.y")), (g - wp*psi) %*% U * ( -(3./2.)*dt^-1*tau_psi^-1 ) );  
    ?>
    return grad;

}

CudaDeviceFunction real_t getn0(){
    return <?R C(sum(h_0)) ?>;
}

CudaDeviceFunction real_t getn1(){
    return <?R C(sum(h_1)) ?>;

}

CudaDeviceFunction vector_t getRhoU(){
    vector_t rhou;
    <?R 
        C( PV(c("rhou.x","rhou.y")), (f %*% U) );  
    ?>
    return rhou;

}

CudaDeviceFunction real_t getRho(){
    return <?R C(sum(f)) ?>;

}   
CudaDeviceFunction vector_t getu(){
    real_t rho = getRho();
    vector_t u = getRhoU();
    u.x = u.x / rho;
    u.y = u.y / rho;
    return u;
}
