<?R
# #############
# based on "Conservative phase-field lattice Boltzmann model for interface tracking equation"
# implemented by M. Dzikowski 2016
# #############

	source("conf.R") 
	c_header();
	
	source("lib/feq.R")
	source("lib/boundary.R")

    U = t(as.matrix(   rbind( Density$dx[Density$group=='f'], Density$dy[Density$group=='f'] ) ))
	EQ = MRT_eq(U, ortogonal=FALSE)
        wi = subst(EQ$Req, Jx=0, Jy=0, Jz=0)
        wi = subst(wi, rho=1)
        wi = gapply(wi,function(x) x$.M, simplify=TRUE)
        wi = wi %*% solve(EQ$mat)
	wi = as.vector(wi)

	W0 = solve(EQ$mat) %*% diag(1/wi) %*% solve(t(EQ$mat))
	i = rev(1:nrow(W0))
	H = chol(W0[i,i])[i,i]
	H = H * c(1,sqrt(3)/3,sqrt(3)/3,sqrt(2),sqrt(2),1,sqrt(6)/3,sqrt(6)/3,2)
	B = EQ$mat %*% t(H)

	EQ = MRT_eq(U, mat=B)

	

	f = PV(Density$name[Density$group=='f'])
	rho = PV("rho")
	J = PV("J",c("x","y"))
    u = PV(c("u.x","u.y"))


# things related to h
    h = PV(Density$name[Density$group=='h'])
    pf = PV("pf")
    n = PV(c("n.x","n.y"))
    c_sq = 1/3.
    Bh = PV('Bh')
    W = PV("W")	
	Heq = function( pf, n, u ) {
          wi*((u %*% t(U))*( 1/ c_sq) + ((u %*% t(U)) * (u %*% t(U)))*(1/(c_sq*c_sq*2)) - sum(u*u)*(1/(c_sq*2)) + 1)*pf + Bh * wi *n %*% t(U)
        }
    k01 = PV("k01")
    k10 = PV("k10")
?>

#define pi 3.141592653589793116

CudaDeviceFunction real_t getRho(){
	return <?R C(sum(f)) ?> ;
}
    
CudaDeviceFunction real_t getPhaseField(){
	return <?R C(sum(h)) ?> ;
}
    
CudaDeviceFunction vector_t getU(){
	real_t d = <?R C(sum(f)) ?>;
	vector_t u;
<?R C(PV(c("u.x","u.y")), f %*% U) ?>
	u.x /= d;
	u.y /= d;
	u.z = 0.0;
	return u;
}

CudaDeviceFunction vector_t getNormal(){
    real_t k01, k10;
    vector_t n;
    vector_t u = getU();

    <?R
    
    ee_x = U[,1] - u[1]
    ee_y = U[,2] - u[2]


    C(k10, sum(h%*%ee_x) )
    C(k01, sum(h%*%ee_y) )
    
    ?>
    real_t ln = sqrt(k10*k10 + k01*k01);    
    if (ln == 0.){
        n.x = 0.;
        n.y = 0.;
    } else {
        n.x = - k10 / ln;
        n.y = - k01 / ln;
    }
    return n;

}



CudaDeviceFunction float2 Color() {
        float2 ret;
        vector_t u = getU();
        ret.x = sqrt(u.x*u.x + u.y*u.y);
        if (NodeType == NODE_Solid){
                ret.y = 0;
        } else {
                ret.y = 1;
        }
        return ret;
}

CudaDeviceFunction void SetEquilibrum(real_t rho, real_t Jx, real_t Jy, real_t pf)
{
<?R
	feq = EQ$Req %*% solve(EQ$mat)
	C( f, feq)
    u = PV(c('Jx/rho', 'Jy/rho'))
    C( h,  wi*((u %*% t(U))*( 1/ c_sq) + ((u %*% t(U)) * (u %*% t(U)))*(1/(c_sq*c_sq*2)) - sum(u*u)*(1/(c_sq*2)) + 1)*pf  )
?>
}

CudaDeviceFunction void Init() {
	real_t rho, ux, uy, C;
	rho = (1+Pressure*3);
	ux=0;
	uy=0;
	ux = Velocity+ux;
    C = PhaseField; 


	SetEquilibrum(
		rho,
		ux*rho,
		uy*rho,
        C
	);
}

CudaDeviceFunction void Run() {
    switch (NodeType & NODE_BOUNDARY) {
	case NODE_Solid:
	case NODE_Wall:
		BounceBack();
		break;
	case NODE_EVelocity:
		EVelocity();
		break;
	case NODE_WPressure:
		WPressure();
		break;
	case NODE_WVelocity:
		WVelocity();
		break;
	case NODE_EPressure:
		EPressure();
		break;
    }
    if (NodeType & NODE_MRT)
    {
		CollisionMRT();
    }
}

CudaDeviceFunction void BounceBack()
{
<?R FullBounceBack() ?>
}

CudaDeviceFunction void EVelocity()
{
<?R ZouHe(EQ, 1, -1, "velocity") ?>
}

CudaDeviceFunction void WPressure()
{
<?R ZouHe(EQ, 1, 1, "pressure") ?>
}

CudaDeviceFunction void WVelocity()
{
<?R ZouHe(EQ, 1, 1, "velocity") ?>
}

CudaDeviceFunction void EPressure()
{
<?R ZouHe(EQ, 1, -1, "pressure") ?>
}

CudaDeviceFunction void CollisionMRT()
{
<?R
	MI = solve(EQ$mat)
	P = MI %*% diag(1/wi) %*% t(MI)

	R = PV("R", 1:nrow(U)-1);
	selR = EQ$order > 1
	R[!selR] = EQ$Req[!selR]
?>
	real_t <?R C(R,sep=",") ?>;
	real_t gamma  = 1-omega;
    real_t gamma2 = gamma;
<?R
	S = PV("S",1:nrow(U)-1);
	
    S[EQ$order <= 2] = PV("gamma")
	S[EQ$order >  2] = PV("gamma2")


	C( R, f %*% EQ$mat );
	C( R[selR], (R - EQ$Req)[selR]);


	C( R[selR], (R * S)[selR]);

?>
    Jx = Jx + rho*GravitationX ;
    Jy = Jy + rho*GravitationY ; 
    
<?R


	C( R[selR], (R + EQ$Req)[selR]);

	C( f, R %*% solve(EQ$mat), float=F);


    # part related to h
?>
    vector_t n = getNormal();
    real_t pf = getPhaseField();
    vector_t u = getU();
    real_t d = getRho();

//    u.x = u.x * d;
//    u.y = u.y * d;

    real_t omega_ph =  1/( 3 * M + 0.5); 
    real_t Bh;
<?R
    u = PV(c('u.x', 'u.y'))
    n = PV(c('n.x', 'n.y'))
    mob = PV("M")
    omega_ph=PV("omega_ph")
    C(Bh, 3*mob * (1.-4.*pf*pf)*(W) )
    C( h, h - omega_ph * ( h - Heq(pf,n,u) ) )

?>
}

CudaDeviceFunction vector_t getA()
{
	real_t <?R C(R,sep=",") ?>;
	vector_t ret;
<?R
#	C( R, f %*% EQ$mat );
#	C( R[selR], (R - EQ$Req)[selR]);
#	C( PV("ret.y"), ds %*% P %*% dh)
#	C( PV("ret.z"), dh %*% P %*% dh)
?>
	ret.x = ret.y/ret.z;
	return ret;
}
