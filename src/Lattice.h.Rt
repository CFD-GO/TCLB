<?R
        source("conf.R")
	c_header();
?>
#ifndef LATTICE_H

#include "cross.h"

// #include "Region.h"
class lbRegion;
// #include "LatticeContainer.h"
class LatticeContainer;

#define ITER_STREAM 0x0
#define ITER_NORM   0x1
#define ITER_GLOBS  0x2

class Lattice {
private:
//public:
  LatticeContainer * container;
	real_t *mpiin[27], *mpiout[27], *gpuin[27], *gpuout[27];
	size_t bufsize[27];
	int nodein[27], nodeout[27];
	int bufnumber;
//  FTabs mpiin;
//  FTabs mpiout;
  int nSnaps;
  FTabs * Snaps;
  int * iSnaps;
  CudaStream_t kernelStream;
  CudaStream_t inStream;
  CudaStream_t outStream;
  CudaEvent_t kernelEv[4];
  CudaEvent_t inEv[28];
  CudaEvent_t outEv[28];
  CudaEvent_t mpiEv[28];
public:
  int Iter;
  int Snap;
  real_t settings[<?%d nrow(Settings) ?>];  
  lbRegion region;
  MPIInfo mpi;
  Lattice (lbRegion region);
  ~Lattice ();
  void MPIInit (MPIInfo);
  void Color(uchar4 *);
  int Offset(int,int,int);
  void FlagOverwrite(flag_t *, lbRegion);
  void Init();
  void listTabs(int*n, size_t ** size, void *** ptr, size_t * maxsize);
  int save(char * filename);
  int load(char * filename);

//  inline void Run()  { container->Run(borderStream,interiorStream);  };
//  inline void RunG() { container->RunG(borderStream,interiorStream); };
  void BeforeIt();
  void AfterIt();
	int getSnap(int );
  void        IterateT(int);
  void        IterateTill(int,int);
  void        Iteration(int, int, int, int);
  void inline Iterate()  { IterateT(ITER_NORM);   };
  void inline IterateG() { IterateT(ITER_GLOBS);  };
  void inline Stream()   { IterateT(ITER_STREAM); };
//  void GetRegion(int, int, int, int, Node *);
//  void GetRegion(lbRegion, Node *);
//  void SetRegion(int, int, int, int, Node *);
  void GetFlags(lbRegion, flag_t *);
<?R for (d in rows(DensityAll)) { ?>
	void Get_<?%s d$nicename ?>(lbRegion over, real_t * tab);
	void Set_<?%s d$nicename ?>(lbRegion over, real_t * tab);
<?R } ?>

<?R for (i in 1:nrow(Quantities)) { q = Quantities[i,,drop=F]; ifdef(q$adjoint);?>
	void Get<?%s q$name ?>(lbRegion over, <?%s q$type ?> * tab, real_t scale);
	inline void Get<?%s q$name ?>(lbRegion over, <?%s q$type ?> * tab) { Get<?%s q$name ?>(over, tab, 1.0); };
	<?R tp = "double" ?>
	void Get<?%s q$name ?>_<?%s tp ?>(lbRegion over, <?%s tp ?> * tab, int row);
<?R }; ifdef() ?>

  void getGlobals(real_t * tab); 

<?R for (i in 1:nrow(Settings)) { v = Settings[i,]; ?>
	void <?%s v$FunName ?>(real_t);<?R } ?>
};

#endif
#define LATTICE_H 1
