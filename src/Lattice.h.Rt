<?R
        source("conf.R")
	c_header();
?>
#ifndef LATTICE_H
#include "Consts.h"
#include "cross.h"
#include <vector>
#include <utility>
#include "ZoneSettings.h"
#include "SyntheticTurbulence.h"
#include "Sampler.h"
class lbRegion;
class LatticeContainer;

#define ITER_STREAM   0x000
#define ITER_NORM     0x001
#define ITER_ADJOINT  0x002
#define ITER_OPT      0x003
#define ITER_TYPE     0x003
#define ITER_NO       0x000
#define ITER_GLOBS    0x010
#define ITER_OBJ      0x020
#define ITER_INIT     0x030
#define ITER_STEADY   0x040
#define ITER_INTEG    0x070
#define ITER_LASTGLOB 0x080
#define ITER_SKIPGRAD 0x100
const int maxSnaps=33;

/// Class for computations
/**
  Class for all the memory allocation, storage, calculation
  recording for unsteady adjoint etc.
*/
class Lattice {
private:
  LatticeContainer * container; ///< Main Container object
  real_t *mpiin[27], *mpiout[27]; ///< MPI Buffers
  real_t *gpuin[27], *gpuout[27], *gpubuf[27], *gpubuf2[27]; ///< GPU Buffers
  size_t bufsize[27]; ///< Sizes of the Buffers
  int nodein[27], nodeout[27]; ///< MPI Ranks of sources and destinations for Buffers
  int bufnumber; ///< Number of non-NULL Buffers
  int nSnaps; ///< Number of Snapshots
  FTabs * Snaps; ///< Snapshots
  int * iSnaps; ///< Snapshot number (Now)
#ifdef ADJOINT
  FTabs * aSnaps; ///< Adjoint Snapshots
#endif
  CudaStream_t kernelStream; ///< CUDA Stream for kernel runs
  CudaStream_t inStream; ///< CUDA Stream for CPU->GPU momory copy
  CudaStream_t outStream; ///< CUDA Stream for GPU->CPU momory copy
  CudaEvent_t kernelEv[4]; ///< Not used TODO
  CudaEvent_t inEv[28]; ///< Not used TODO
  CudaEvent_t outEv[28]; ///< Not used TODO
  CudaEvent_t mpiEv[28]; ///< Not used TODO
  int reverse_save; ///< Flag stating if recording (Now)
public:
  ZoneSettings zSet;
  SyntheticTurbulence ST;
  Sampler *sample; //initializing sampler with zero size
  int ZoneIter;
  std::vector < std::pair < int, std::pair <int, std::pair<real_t, real_t> > > > settings_record; ///< List of settings changes during the recording
  unsigned int settings_i; ///< Index in settings_record that is on the CUDA const
  void push_setting(int,real_t,real_t); ///< Set the setting (and push to settings_record if recording)
  void pop_settings(); ///< Pop the setting from settings_record
  int Record_Iter; ///< Recorded iteration number (Now)
  int Iter; ///< Iteration (Now) - "real" time of the simulation
  int Snap, aSnap; ///< Snapshot and Adjoint Snapshot number (Now)
  real_t settings[SETTINGS];  ///< Table of Settings (Now)
  double globals[GLOBALS]; ///< Table of Globals
  lbRegion region; ///< Local lattice region
  MPIInfo mpi; ///< MPI information
  char snapFileName[STRING_LEN];
  Lattice (lbRegion region, MPIInfo, int);
  ~Lattice ();
  void MPIInit (MPIInfo);
  void Color(uchar4 *);
  int Offset(int,int,int);
  void FlagOverwrite(flag_t *, lbRegion);
  void CutsOverwrite(cut_t * Q, lbRegion over);
  void Init();
  void listTabs(FTabs&, int*n, size_t ** size, void *** ptr, size_t * maxsize);
  int save(FTabs&, const char * filename);
//  inline int save(const char * filename){ return save(container->in, filename); }
  int load(FTabs&, const char * filename);
//  inline int load(const char * filename){ return load(container->in, filename); }
  void saveSolution(const char * filename);
  void loadSolution(const char * filename);
  void startRecord();
  void rewindRecord();
  void stopRecord();
  void clearAdjoint();
  void clearDPar();
  int(* callback)(int, int, void*);
  void* callback_data;
  void Callback(int(*)(int, int, void*), void*);
  int segment_iterations;
  int total_iterations; ///< Total iteration number counter
  int callback_iter;
  int reset_iter;
  inline void MarkIteration() {
    total_iterations ++;
    if (callback) callback_iter = callback(segment_iterations, total_iterations, callback_data);
  }
  inline void FinalIteration() { 
	total_iterations = segment_iterations;
    if (callback) callback_iter = callback(segment_iterations, total_iterations, callback_data);
  }
  inline void InitialIteration(int segiter) {
    total_iterations = 0;
    segment_iterations = segiter;
    if (callback) callback_iter = callback(segment_iterations, total_iterations, callback_data);
  }
  void BeforeIt();
  void AfterIt();
  int getSnap(int );
  void        MPIStream_A();
  void        MPIStream_B(int );
  inline void MPIStream_B() { MPIStream_B(0); };
  
  void        Iterate(int, int);
  inline void        IterateT(int iter_type) {Iterate(1,iter_type);} ;
//  void        Iteration_Adj(int, int, int);
//  void        Iteration_Opt(int tab0, int tab1, int adjtab0, int adjtab1, int iter_type);
  void        IterateTill(int,int);
<?R for (n in names(Actions)) {
        a = Actions[[n]]
        if (n == "Iteration") {
                FunName = "Iteration"
        } else {
                FunName = paste("Action",n,sep="_")
        } ?>
        void <?%s FunName ?>_Adj(int, int, int, int, int); 
        void <?%s FunName ?>_Opt(int, int, int, int, int); 
        void <?%s FunName ?>(int, int, int); <?R
    } ?>
  void inline Iterate()  { IterateT(ITER_NORM);   };
  void inline IterateG() { IterateT(ITER_GLOBS);  };
  void inline Stream()   { IterateT(ITER_STREAM); };
  void GetFlags(lbRegion, flag_t *);
<?R for (d in rows(DensityAll)) { ?>
  void Get_<?%s d$nicename ?>(real_t * tab);
  void Clear_<?%s d$nicename ?>();
  void Set_<?%s d$nicename ?>(real_t * tab);
  void Get_<?%s d$nicename ?>_Adj(real_t * tab);
  void Clear_<?%s d$nicename ?>_Adj();
  void Set_<?%s d$nicename ?>_Adj(real_t * tab);
<?R }
    for (q in rows(Quantities)) { ifdef(q$adjoint); ?>
  void Get<?%s q$name ?>(lbRegion over, <?%s q$type ?> * tab, real_t scale);
  void GetSample<?%s q$name ?>(lbRegion over, real_t scale,real_t* tab);
  inline void Get<?%s q$name ?>(lbRegion over, <?%s q$type ?> * tab) { Get<?%s q$name ?>(over, tab, 1.0); };
  <?R tp = "double" ?>
  void Get<?%s q$name ?>_<?%s tp ?>(lbRegion over, <?%s tp ?> * tab, int row);
<?R }; ifdef() ?>
  void updateAllSamples();
  void getGlobals(real_t * tab); 
  void calcGlobals();
  void clearGlobals();
  void clearGlobals_Adj();
  double getObjective();
  void resetAverage();
  void setSetting(int i, real_t tmp);
<?R for (v in rows(Settings)) { ?>
	void <?%s v$FunName ?>(real_t);<?R
    } ?>
};

#define LATTICE_H 1
#endif
