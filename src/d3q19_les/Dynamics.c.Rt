<?R
	source("conf.R") 

f = PV(DensityAll$name[DensityAll$group=="f"])

rho = PV("rho")
J = PV(c("Jx","Jy","Jz"))
rho0 = 1

if (FALSE) {
	we = 0
	weJ = -475/63
	wxx = 0
} else {
	we = 3
	weJ = -11/2
	wxx = -1/2
}

pxx = 1/(3*rho0) * (J[1]*J[1]*2 - J[2] * J[2] - J[3] * J[3]) 
pww = 1/(rho0) * (J[2] * J[2] - J[3] * J[3]) 
pxy = 1/(rho0) * (J[1]*J[2]) 
pyz = 1/(rho0) * (J[2]*J[3]) 
pxz = 1/(rho0) * (J[1]*J[3]) 

Req = rbind(
	rho,
	-11*rho + 19/rho0*sum(J*J),
	we*rho + weJ/rho0*sum(J*J),
	J[1],
	-2/3*J[1],
	J[2],
	-2/3*J[2],
	J[3],
	-2/3*J[3],
	pxx*3,
	wxx*pxx*3,
	pww,
	wxx*pww,
	pxy,
	pyz,
	pxz,
	0,
	0,
	0
)

U = MRTMAT[,selU]
#f = PV(Density$name)
R = PV(paste("R",0:18,sep=""))



R[1] = rho
R[c(4,6,8)] = J
R[-c(1,4,6,8)] = PV(paste("R",0:14,sep=""))
selR = c(2,3,5,7,9:19)


SecondMoments = cbind(U**2,U[,1]*U[,2],U[,2]*U[,3],U[,3]*U[,1])
Qtens = R[selR] %% (MRTMAT.inv %*% SecondMoments)[selR,]
Qnorm2 = sum(Qtens * Qtens * c(1,1,1,2,2,2))
tau_t = PV("tau_t")


#R[[1]] = rho[[1]]
#R[[4]] = J[[1]]
#R[[6]] = J[[2]]
#R[[8]] = J[[3]]


renum = c(19, 1, 2, 3, 4, 5, 6, 7, 11, 8, 12, 9, 13, 10, 14, 15, 17, 16, 18)

I = rep(0, 19)
I[renum] = 1:19

if (FALSE) {
Sy = rbind(
	PV(0),
	PV(1.19),
	PV(1.4),
	PV(0),
	PV(1.2),
	PV(0),
	PV(1.2),
	PV(0),
	PV(1.2),
	PV("omega"),
	PV(1.4),
	PV("omega"),
	PV(1.4),
	PV("omega"),
	PV("omega"),
	PV("omega"),
	PV(1.98),
	PV(1.98),
	PV(1.98)
)
	
} else {
Sy = rbind(
	PV(0),
	PV(1),
	PV(1),
	PV(0),
	PV(1),
	PV(0),
	PV(1),
	PV(0),
	PV(1),
	PV("omega"),
	PV(1),
	PV("omega"),
	PV(1),
	PV("omega"),
	PV("omega"),
	PV("omega"),
	PV(1),
	PV(1),
	PV(1)
)
}


calcRhoJ = rbind(
        rho == sum(f),
        J == f %% U
)

calcRfromF = R == f %% MRTMAT
calcReq = R == Req
calcFfromR = f == R %% MRTMAT.inv
calcFeq = f == Req %% MRTMAT.inv
?>

CudaDeviceFunction real_t getRho(){
	return <?R C(sum(f)) ?>;
}

CudaDeviceFunction real_t getW(){
	return w;
}

CudaDeviceFunction vector_t getU(){
	real_t d = getRho();
	vector_t u;
<?R C(PV(c("u.x","u.y", "u.z")) == f %% U) ?>
	u.x /= d;
	u.y /= d;
	u.z /= d;
	return u;
}

CudaDeviceFunction float2 Color() {
        float2 ret;
        vector_t u = getU();
        ret.x = sqrt(u.x*u.x + u.y*u.y + u.z*u.z);
        if (NodeType == NODE_Solid){
                ret.y = 0;
        } else {
                ret.y = 1;
        }
        return ret;
}

CudaDeviceFunction void Collision()
{

}


CudaDeviceFunction void BounceBack()
{
     real_t uf;
<?R
	uf = PV("uf")
	by(Density, Density$group, function(d) {
		i = order(d$dx,d$dy,d$dz)
		j = order(-d$dx,-d$dy,-d$dz)
		if (any(d[i,c("dx","dy","dz")]!=-d[j,c("dx","dy","dz")])) stop("Density directions are not fully symetric!");
		V = cbind(i,j);
		sel = V[,1] > V[,2]
		V = V[sel,, drop=F]
		if (nrow(V) > 0) {
		f = PV(d$name)
		apply(V,1,function(x) {
			w = list(
				uf==f[x[1]],
				f[x[1]]==f[x[2]],
				f[x[2]]==uf
			)
			for (h in w) C(h)
		})
		}
	NULL})
?>}

CudaDeviceFunction void EVelocity()
{

}

CudaDeviceFunction void eqWVelocity()
{
}


<?R
	X = U[,1]
	Y = U[,2]
	Z = U[,3]
?>

<?R Inlet = function() { ?>
	Nxy = (<?R C(sum(f[X == 0 & Y > 0]) - sum(f[X == 0 & Y < 0])) ?>)/2.;
	Nxz = (<?R C(sum(f[X == 0 & Z > 0]) - sum(f[X == 0 & Z < 0])) ?>)/2.;

	f<?%d -1 + I[ 1] ?> = f<?%d -1 + I[ 2] ?> + rho * ux / 3.;
	f<?%d -1 + I[ 8] ?> = f<?%d -1 + I[11] ?> + rho * ux / 6. + Nxy;
	f<?%d -1 + I[ 7] ?> = f<?%d -1 + I[12] ?> + rho * ux / 6. - Nxy;
	f<?%d -1 + I[ 9] ?> = f<?%d -1 + I[14] ?> + rho * ux / 6. - Nxz;
	f<?%d -1 + I[10] ?> = f<?%d -1 + I[13] ?> + rho * ux / 6. + Nxz;
<?R } ?>

CudaDeviceFunction void WVelocity()
{
     real_t rho, Nxy, Nxz;
//	real_t t = Y/75.0;
//	t = 4*t*(1-t);
	vector_t ST = SyntheticTurbulence(0);

	real_t ux = Velocity +ST.x*Turbulence;

<?R
	C(rho == sum(f[X <  0]),float=F)
	C(rho == sum(f[X == 0]) + 2 * rho, float=F)
?>
	rho = rho / (1. - ux);

<?R Inlet(); ?>
}

CudaDeviceFunction void WPressure()
{
     real_t rho, Nxy, Nxz;
	real_t ux;
	rho = Density;
<?R
	ux = PV("ux")
	C(ux == sum(f[X <  0]),float=F)
	C(ux == sum(f[X == 0]) + 2 * ux, float=F)
?>
	ux = 1. - ux / rho;
<?R Inlet(); ?>
}

CudaDeviceFunction void WPressureLimited()
{
     real_t rho, Nxy, Nxz, SF, ux;
<?R
	SF = PV("SF")
	C(SF == sum(f[X <  0]),float=F)
	C(SF == sum(f[X == 0]) + 2 * SF, float=F)
?>
	rho = Density;
	ux = 1. - SF / rho;
	if (ux > Velocity) {
		ux = Velocity;
		rho = SF / (1. - ux);
	}	
<?R Inlet(); ?>
}



CudaDeviceFunction void EPressure()
{
     real_t rho = 1.0;
     real_t Nxy, Nxz;
     real_t ux;
<?R
	ux = PV("ux")
	C(ux == sum(f[X >  0]),float=F)
	C(ux == sum(f[X == 0]) + 2 * ux, float=F)
?>
	ux =  -1. + ux / rho;

	Nxy = (<?R C(sum(f[X == 0 & Y > 0]) - sum(f[X == 0 & Y < 0])) ?>)/2;
	Nxz = (<?R C(sum(f[X == 0 & Z > 0]) - sum(f[X == 0 & Z < 0])) ?>)/2;

	f<?%d -1 + I[ 2] ?> = f<?%d -1 + I[ 1] ?> - rho * ux / 3.0;
	f<?%d -1 + I[11] ?> = f<?%d -1 + I[ 8] ?> - rho * ux / 6.0 - Nxy;
	f<?%d -1 + I[12] ?> = f<?%d -1 + I[ 7] ?> - rho * ux / 6.0 + Nxy;
	f<?%d -1 + I[14] ?> = f<?%d -1 + I[ 9] ?> - rho * ux / 6.0 + Nxz;
	f<?%d -1 + I[13] ?> = f<?%d -1 + I[10] ?> - rho * ux / 6.0 - Nxz;
}

CudaDeviceFunction void Run() {
//	printf("Run %d %d -> (%d,%d)\n", CudaBlock.x, CudaBlock.y, X, Y);
    switch (NodeType & NODE_BOUNDARY) {
	case NODE_WPressureL:
		WPressureLimited();
		break;
	case NODE_WPressure:
		WPressure();
		break;
	case NODE_WVelocity:
		WVelocity();
		break;
	case NODE_EPressure:
		EPressure();
		break;
	case NODE_Wall:
		BounceBack();
                break;
    }
    switch (NodeType & NODE_COLLISION) {
	case NODE_BGK:
		Collision();
		break;
	case NODE_MRT:
		CollisionMRT();
		break;
    }
    if (NodeType & NODE_DESIGNSPACE) {
            AddToMaterialPenalty(w*(1-w));
    }
    if (NodeType == 0) {
            <?R for (d in Density$name[!Density$parameter]) { ?><?%s d ?> = <?R } ?> 0.0;
    }
}

CudaDeviceFunction void SetEquilibrum(real_t rho, real_t Jx, real_t Jy, real_t Jz)
{
	<?R
		C(calcFeq);
	?>
	Jx /= rho;
	Jy /= rho;
	Jz /= rho;
	w = 1;
}

CudaDeviceFunction void Init() {
	vector_t ST = SyntheticTurbulence(0);
	SetEquilibrum(1.0, Velocity + ST.x*Turbulence, 0.+ST.y*Turbulence, 0.+ST.z*Turbulence);
	if ((NodeType & NODE_BOUNDARY) == NODE_Solid) {
		w = 0.0;
	}
}

CudaDeviceFunction void CollisionMRT()
{
	real_t Jx,Jy,Jz, rho, omT, pr, totpr, vx, omega, tau_t;
	real_t <?R cat(ToC(R[selR]), sep=",") ?>;

<?R
#        Sy = PV(paste("S",1:19,"",sep=""))

#C( calcRhoJ )
C( calcRfromF ,float =F);
#   C( calcReq[selR] , eqstring = "-=" )
#   C( f == (R * Sy)[selR] %% MRTMAT.inv[selR,] , eqstring = "-=");

cr = calcReq[selR]
   Mw = colSums(MRTMAT**2)
for (i in selR) {
?>	<?%s ToC(R[i]) ?> = <?%s ToC(R[i] - Req[i]) ?> ;
<?R
}
C(tau_t == Qnorm2)
?>
tau_t = 18 * sqrt(tau_t) * Smag;
tau_t = tau0*tau0 + tau_t;
tau_t = sqrt(tau_t);
tau_t = (tau_t + tau0)/2;
omega = 1/tau_t;
<?R
for (i in selR) {
?>	<?%s ToC(R[i]) ?> = (<?%s ToC(Sy[i]*(-1)+1) ?>)*(<?%s ToC(R[i]) ?> );
<?R
}
?>
//	omT = sqrt(Jx*Jx+Jy*Jy+Jz*Jz);
//	omT = exp(log(w)*omT);
        omT = exp(log(w+0.0001)*Theta);
        Jx *= omT;
        Jy *= omT;  
        Jz *= omT;
        if ((NodeType & NODE_OBJECTIVE) == NODE_Outlet) {
           pr = (rho-1.0)/3.0;
           totpr = pr + (Jx*Jx+Jy*Jy+Jz*Jz)*0.5/rho;
           vx = Jx/rho;
           AddToFlux( Jx );
           AddToEnergyFlux( vx * totpr );
           AddToPressureFlux( vx * pr );
           AddToPressureDiff( pr );
        }
        if ((NodeType & NODE_OBJECTIVE) == NODE_Inlet) {
           pr = (rho-1.0)/3.0;
           totpr = pr + (Jx*Jx+Jy*Jy+Jz*Jz)*0.5/rho;
           vx = -Jx/rho;
           AddToFlux( Jx );
           AddToEnergyFlux( vx * totpr );
           AddToPressureFlux( vx * pr );
           AddToPressureDiff( -pr );
        }
                                                                        
<?R
for (i in selR) {
?>	<?%s ToC(R[i]) ?> += <?%s ToC(Req[i]) ?>;
<?R
}
for (i in 1:length(R)) {
?>	<?%s ToC(R[i]) ?> /= <?%f Mw[i] ?>;
<?R
}
   C( f == R %% t(MRTMAT) , float=F);

?>
}
