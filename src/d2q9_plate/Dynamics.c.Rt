<?R
	source("conf.R") 
	c_header();
	f = PV(Density$name)
	U = as.matrix(Density[,c("dx","dy")])

	u = PV(paste("u[",1:2-1,"]",sep=""))
	uf = PV("uf")
	d = PV("d")
	usq = PV("usq")
	omega = PV("omega")
        uf1 = uf;
        uf2 = uf;
        uf3 = uf;
	t1 = 4/9
	t2 = 1/9
	t3 = 1/36
	c_squ = 1/3
	wi = c(t1,t2,t2,t2,t2,t3,t3,t3,t3)
	tn = diag(wi)
	bounce = c(0,3,4,1,2,7,8,5,6)

	c_sq = 1/3
	
	Feq = function( d = PV("d"), u = PV(paste("u[",1:2-1,"]",sep="")) ) {
          wi*((u %*% t(U))*( 1/ c_sq) + ((u %*% t(U)) * (u %*% t(U)))*(1/(c_sq*c_sq*2)) - sum(u*u)*(1/(c_sq*2)) + 1)*d
        }
?>

#define S2 1.3333
#define S3 1.0
#define S5 1.0
#define S7 1.0
#define S8 omega
#define S9 omega


CudaDeviceFunction real_t getRho(){
	return <?R C(sum(f)) ?> ;
}
    
CudaDeviceFunction vector_t getU(){
	real_t d = <?R C(sum(f)) ?>;
	vector_t u;
<?R C(PV(c("u.x","u.y")), f %*% U) ?>
	u.x /= d;
	u.y /= d;
	u.z = 0.0;
	return u;
}

CudaDeviceFunction real_t getSolid(){
	real_t px = X - PX;
	real_t py = Y - PY;
	real_t dx = px*cos(PR) + py*sin(PR);
	real_t dy =-px*sin(PR) + py*cos(PR);
	real_t w = calcW(dx,dy);
	return w;
}


CudaDeviceFunction float2 Color() {
        float2 ret;
        vector_t u = getU();
        ret.x = sqrt(u.x*u.x + u.y*u.y);
        ret.y = 1-getSolid();
        return ret;
}

CudaDeviceFunction void SetEquilibrum(real_t d, real_t u[2])
{
<?R
	u = PV(paste("u[",1:2-1,"]",sep=""))
	d = PV("d")
	c_sq = 1/3
        C( f, wi*((u %*% t(U))*( 1/ c_sq) + ((u %*% t(U)) * (u %*% t(U)))*(1/(c_sq*c_sq*2)) - sum(u*u)*(1/(c_sq*2)) + 1)*d)
?>
}

CudaDeviceFunction void Init() {
	real_t u[2] = {Velocity,0.};
	real_t d = Density;
	SetEquilibrum(d,u);
}

CudaDeviceFunction void Run() {
    switch (NodeType & NODE_BOUNDARY) {
	case NODE_Solid:
	case NODE_Wall:
		BounceBack();
		break;
	case NODE_EVelocity:
		EVelocity();
		break;
	case NODE_WPressure:
		WPressure();
		break;
	case NODE_WVelocity:
		WVelocity();
		break;
	case NODE_EPressure:
		EPressure();
		break;
    }
    if (NodeType & NODE_MRT)
    {
		CollisionMRT();
    }
}

CudaDeviceFunction void BounceBack()
{
     real_t uf;
<?R
  V = cbind(1:9, bounce+1)
  sel = V[,1] > V[,2]
  V = V[sel,]
  for (i in 1:nrow(V))
  {
        C( uf , f[V[i,1]] )
        C( f[V[i,1]] , f[V[i,2]] )
        C( f[V[i,2]] , uf )
   }
?>
}

CudaDeviceFunction void EVelocity()
{
        real_t rho, ru;
	real_t ux0 = Velocity;
	rho = ( f0 + f2 + f4 + 2.*(f1 + f5 + f8) ) / (1. + ux0);
	ru = rho * ux0;
	f3 = f1 - (2./3.) * ru;
	f7 = f5 - (1./6.) * ru + (1./2.)*(f2 - f4);
	f6 = f8 - (1./6.) * ru + (1./2.)*(f4 - f2);
}

CudaDeviceFunction void WPressure()
{
        real_t ru, ux0;
	real_t rho = Density;
	ux0 = -1. + ( f0 + f2 + f4 + 2.*(f3 + f7 + f6) ) / rho;
	ru = rho * ux0;

	f1 = f3 - (2./3.) * ru;
	f5 = f7 - (1./6.) * ru + (1./2.)*(f4 - f2);
	f8 = f6 - (1./6.) * ru + (1./2.)*(f2 - f4);
}

CudaDeviceFunction void WVelocity()
{
        real_t rho, ru;
	real_t u[2] = {Velocity,0.};
	rho = ( f0 + f2 + f4 + 2.*(f3 + f7 + f6) ) / (1. - u[0]);
	ru = rho * u[0];
	f1 = f3 + (2./3.) * ru;
	f5 = f7 + (1./6.) * ru + (1./2.)*(f4 - f2);
	f8 = f6 + (1./6.) * ru + (1./2.)*(f2 - f4);
}

CudaDeviceFunction void EPressure()
{
        real_t ru, ux0;
	real_t rho = Density;
	ux0 = -1. + ( f0 + f2 + f4 + 2.*(f1 + f5 + f8) ) / rho;
	ru = rho * ux0;

	f3 = f1 - (2./3.) * ru;
	f7 = f5 - (1./6.) * ru + (1./2.)*(f2 - f4);
	f6 = f8 - (1./6.) * ru + (1./2.)*(f4 - f2);
}

#define S4 1.3333
#define S5 1.0
#define S6 1.0
#define S7 1.0
#define S8 omega
#define S9 omega

CudaDeviceFunction real_t calcW0(real_t d) {
	d = d + SM_M;
	if (SM == 0) {
		if (d < 0) return 0;
		return 1;
	} else {
		d = d / SM;
		if (d < -1) return 0;
		if (d > 1) return 1;
		return ((3-d*d)*d+2)/4;
	}
}

CudaDeviceFunction real_t calcW(real_t dx, real_t dy) {
	real_t ret = 1;
	ret = ret * calcW0(PDX-2*dx);
	ret = ret * calcW0(PDX+2*dx);
	ret = ret * calcW0(PDY-2*dy);
	ret = ret * calcW0(PDY+2*dy);
	return ret;
}

CudaDeviceFunction void CollisionMRT()
{
	real_t u[2], usq, d, R[6], Q, tau, omega;
	vector_t F;
<?R
        R = PV(c(
		"d",
		paste("u[",1:2-1,"]",sep=""),
		paste("R[",1:6-1,"]",sep="")
	))
        Sy = c(
		PV(c(0,0,0)),
		PV(paste("S",c(2,3,5,7,8,9),"",sep=""))
	)

M = matrix(c(
      1,  1,  1,  1,  1,  1,  1,  1,  1,
      0,  1,  0, -1,  0,  1, -1, -1,  1,
      0,  0,  1,  0, -1,  1,  1, -1, -1,
     -4, -1, -1, -1, -1,  2,  2,  2,  2,
      4, -2, -2, -2, -2,  1,  1,  1,  1,
      0, -2,  0,  2,  0,  1, -1, -1,  1,
      0,  0, -2,  0,  2,  1,  1, -1, -1,
      0,  1, -1,  1, -1,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  1, -1,  1, -1), 9,9);

	C( R , f %*% M , float=F);

	d = PV("d");
	dw = d^(-1)
	C(usq,  sum(u*u)*dw);
	usq = PV("usq")
	u = PV(c("u[0]","u[1]"))
	Req = c(
		d,
		u,
		d*(-2)+usq*3,
		d - usq*3,
		u[1]*(-1),
		u[2]*(-1),
		u[1]*u[1]*dw-u[2]*u[2]*dw,
		u[1]*u[2]*dw
	)
        Sy = PV(paste("S",1:19,"",sep=""))
	selR = c(4,5,6,7,8,9);
#	cr = calcReq[selR]
	Mw = colSums(M**2)

	C( R[selR] ,(R - Req)[selR] )

?>
Q=0;
Q += 2.*R[5]*R[5];
Q += (R[0]*R[0] + 9*R[4]*R[4])/18.;
Q = 18.* sqrt(Q) * Smag;

tau = tau0*tau0 + Q;
tau = sqrt(tau);
tau = (tau + tau0)/2;
omega = 1/tau;

<?R
for (i in selR) {
?>	<?%s ToC(R[i]) ?> = (1.-<?%s ToC(Sy[i]) ?>)*(<?%s ToC(R[i]) ?> );
<?R
}
?>

// F = getF();
// u[0] = u[0]+F.x*(-2./3.) + (GravitationX)*d;
// u[1] = u[1]+F.y*(-2./3.) + (GravitationY)*d;

real_t px = X - PX;
real_t py = Y - PY;
real_t dx = px*cos(PR) + py*sin(PR);
real_t dy =-px*sin(PR) + py*cos(PR);

real_t w = calcW(dx,dy);

//dx = fabs(dx*2);
//dy = fabs(dy*2);

real_t Vx = PX_DT - PR_DT*py;
real_t Vy = PY_DT + PR_DT*px;
real_t Fx = w*(Vx - u[0]);
real_t Fy = w*(Vy - u[1]);
AddToForceX(Fx);
AddToForceY(Fy);
AddToMoment(Fx*py-Fy*px);
AddToPowerX(PX_DT*Fx);
AddToPowerY(PY_DT*Fy);
AddToPowerR(PR_DT*(-Fx*py+Fy*px));
AddToPower(Fx*Vx + Fy*Vy);
u[0] = u[0] + Fx;
u[1] = u[1] + Fy;

<?R
	C(usq , sum(u*u)*dw);
	C(R[selR] , Req[selR], eq=" += ");
	C(R , PV(Mw), eq=" /= ", float=F);
	C( f , R %*% t(M) , float=F);
?>
}


