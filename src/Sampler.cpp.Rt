
#include "mpi.h"
#include "utils.h"
#include "Consts.h"
#include "Global.h"
#include "cross.h"
#include "types.h"
#include <math.h>
#include <stdlib.h>
#include "Sampler.h"
<?R
       	source("conf.R")
       	c_header();
?>

int Sampler::initCSV(const char *name) //Initializing a csv file for time evolution of a point
     {
     filename = name;
    // if (mpi.rank == 0) {
 	    FILE * f = NULL;
            f = fopen(filename, "wt");
    	     assert( f != NULL );
            fprintf(f,"\"Iteration\",\"Time_si\"");
            <?R for (q in rows(Quantities)) { ifdef(q$adjoint); ?>
            if (quant->in("<?%s q$name ?>")) 
		//dosomething 
            <?R }; ifdef(); ?> 
     fclose(f); 
     return 0;
     //}
}
int Sampler::writeHistory(int iter) {
     printf("Updating sample point history");
     FILE* f = fopen(filename,"at");
     fprintf(f,"%d\t",iter);
     <?R for (q in rows(Quantities)) { ifdef(q$adjoint); ?>
	if (quant->in("<?%s q$name ?>")) {
		<?%s q$type ?> tmp;
		CudaMemcpy(&tmp,&gpu_buffer[location["<?%s q$name ?>"]],sizeof(<?%s q$type ?>),cudaMemcpyDeviceToHost);
		csvWriteElement(f,tmp);  }
	<?R }; ifdef(); ?> 
     fclose(f);
     return 0;
 }
int Sampler::Allocate(name_set* nquantities,int iter)
{
int i = 0;
quant = nquantities;
<?R for (q in rows(Quantities)) { ifdef(q$adjoint); ?>
if (quant->in("<?%s q$name ?>"))
 {	
	location["<?%s q$name ?>"] = i;	
	i++;
	<?R if (q$vector) {?>
	i = i + 2;
	<?R }; ?> 
}
size = i*iter;
<?R }; ifdef(); ?>
CudaMalloc((void**)&gpu_buffer, size*sizeof(real_t)); //Assuming quantites can be vectors made from real_t/normal values only 
return 0;
}
