<?R
	source("models.R")
	Models = get.models();
	Models$model.md = ifelse(Models$in.group == 1,
		paste0(Models$path,".md"),
		paste0(Models$path,"/",Models$name,".md")
	)
	destinations=c("CLB");
?>
# MODELS: 
#	<?%s paste(Models$name,collapse=", ") ?>

#######################################################################################################################

all: <?%s paste(Models$name,collapse=" ") ?> 

.PHONY: all clean dummy <?%s paste(Models$name,collapse="/kernel_stats_20 ") ?>


SOURCE_PLAN+=Global.cpp CartLattice.cpp vtkLattice.cpp vtkOutput.cpp vtuOutput.h vtuOutput.cpp cross.cu cuda.cu CartLatticeAccess.hpp CudaUtils.hpp CudaUtils.cu
SOURCE_PLAN+=Dynamics.c Dynamics_sp.c Solver.cpp pugixml.cpp Geometry.cpp unit.cpp
SOURCE_PLAN+=ZoneSettings.cpp SyntheticTurbulence.cpp Sampler.cpp
SOURCE_PLAN+=toArb.h toArb.cpp ArbConnectivity.hpp ArbLattice.hpp ArbLattice.cpp PartitionArbLattice.hpp PartitionArbLattice.cpp UtilTypes.hpp
SOURCE_PLAN+=main.cpp
SOURCE_PLAN+=Global.h gpu_anim.h LatticeData.hpp LatticeBase.hpp LatticeBase.cpp cross.h cross.hpp StorageConversions.h
SOURCE_PLAN+=CartLattice.h Region.h vtkLattice.h vtkOutput.h CartLatticeContainer.h CartLatticeLauncher.h CartLatticeLauncher.hpp CartConnectivity.hpp
SOURCE_PLAN+=ArbLatticeAccess.hpp ArbLatticeContainer.hpp ArbLatticeLauncher.h ArbLatticeLauncher.hpp Lattice.hpp
SOURCE_PLAN+=gl_helper.h types.h Consts.h Solver.h pugixml.hpp pugiconfig.hpp Node.hpp
SOURCE_PLAN+=Geometry.h utils.h utils.cpp unit.h ZoneSettings.h SyntheticTurbulence.h Sampler.h spline.h TCLBForceGroupCommon.h
SOURCE_PLAN+=RemoteForceInterface.cpp RemoteForceInterface.h RemoteForceInterface.hpp
SOURCE_PLAN+=TCLBForceGroupCommon.h MPMD.hpp empty.cpp Particle.hpp lammps.cpp
SOURCE_PLAN+=SolidTree.h SolidAll.h SolidGrid.h
SOURCE_PLAN+=SolidContainer.h
SOURCE_PLAN+=xpath_modification.cpp xpath_modification.h
SOURCE_PLAN+=hdf5Lattice.cpp hdf5Lattice.h
SOURCE_PLAN+=glue.hpp
SOURCE_PLAN+=mpitools.hpp
SOURCE_PLAN+=pinned_allocator.hpp
SOURCE_PLAN+=compare.cpp
SOURCE_PLAN+=simplepart.cpp
SOURCE_PLAN+=GetThreads.h GetThreads.cpp
SOURCE_PLAN+=range_int.hpp
SOURCE_PLAN+=Lists.h Lists.cpp Things.h
<?R
	h = dir("src/Handlers","[.](h|cpp)(|.Rt)$")
	h = sub(".Rt","",h)
	h = paste("Handlers",h,sep="/");
?>
SOURCE_PLAN+=<?R cat(h,sep=" ") ?>
SOURCE_PLAN+=CommonHandler.h Handlers.h
SOURCE_PLAN+=Factory.h HandlerFactory.h
SOURCE_PLAN+=SUMMARY
SOURCE_PLAN+=docs-by-doxygen/conf.doxygen
SOURCE_PLAN+=docs-by-doxygen/cfd-go-logo.png
SOURCE_PLAN+=docs-by-doxygen/README.md
SOURCE_ADJ =Dynamics_b.c ADTools.cu Dynamics_adj.c Dynamics_b.h types_b.h ADpre_.h ADpre__b.h
SOURCE_REST=makefile dep.mk
ADDITIONALS=README.md dictionary.h

SOURCE_PLAN+=Catalyst.cpp
SOURCE_PLAN+=Catalyst.h

ifdef CPU
	SOURCE_ALL=$(SOURCE_PLAN:.cu=.cpp)
else
	SOURCE_ALL=$(SOURCE_PLAN)
endif

AOUT=main

rm-files:
	@echo "  RM         ALL"
	@./tools/clear

rm:rm-files configure
	true

clean: <?%s paste(Models$name, "clean", sep="/", collapse=" ") ?>
	
wiki/Models.md : src/Models.md.Rt <?%s paste("wiki/", Models$model.md, sep="", collapse=" ") ?>
	@echo "  RT         $@"
	@$(MKPATH) $@
	@$(RT) -q -f $< -I $(TOOLS),$(SRC) -w wiki/ -o $@ "MODELS=\"<?%s paste(Models$name,collapse=",")?>\"" || rm $@

schemas : wiki/catalog.xml <?%s paste("wiki/schema/", Models$name, ".xsd", sep="", collapse=" ") ?>

wiki/catalog.xml : src/catalog.xml.Rt
	@echo "  RT         $@"
	@$(MKPATH) $@
	@$(RT) -q -f $< -I $(TOOLS),$(SRC) -w wiki/ -o $@ "MODELS=\"<?%s paste(Models$name,collapse=",")?>\"" || rm $@

wiki/% : src/%.Rt
	@echo "  RT         $@"
	@$(MKPATH) $@
	@$(RT) -q -f $< -I $(TOOLS),$(SRC) -w wiki/ -o $@ || rm $@

<?R
	by(Models, Models$group, function(m) {
		if (length(m$opts[[1]]) > 0) {
			mat = do.call(rbind,m$opts)
			mat = ifelse(mat!=0, "X","-")
			mat = as.data.frame(mat)
			row.names(mat) = m$name
		} else {
			mat = as.character(m$name)
		}
?>

<?%s m$group[1] ?>/all : <?%s m$name ?>

<?%s m$group[1] ?>/list :
<?R 
		f = textConnection("to.echo","w")		
		sink(f)
		print(mat)
		sink(); close(f)
		cat(paste("\t@echo '",to.echo,"'\n",sep=""),sep="")
	})
?>

###############################################################################
######       AUTO GENERATED CASES for RT                                 ######
###############################################################################

<?R
for (d in destinations) {
	for (i in 1:nrow(Models)) {
		m = Models$name[i];
		model_path = Models$path[i];
		adjoint = Models$adjoint[i]
		opts = Models$opts[[i]]
		dest = paste(d,"/",m,"/",sep="")
		src = "$(SOURCE_ALL)"
		if (adjoint) src = paste(src, "$(SOURCE_ADJ)")
		src_all = paste(src, "$(SOURCE_REST)")
		src = paste("$(addprefix ",dest,",",src,")",sep="");
		src_all = paste("$(addprefix ",dest,",",src_all,")",sep="");
		src_all = paste(dest,src_all)
		add = paste("$(addprefix ",dest,"/,$(ADDITIONALS))",sep="")
		src_all = paste(src_all,add)

		options_r = NULL
		if (adjoint) options_r = c(options_r, "ADJOINT = 1")
		options_r = c(options_r, paste0("MODEL=\"",m,"\""))
		options_r = c(options_r, "Options=list(")
		if (length(opts) > 0) {
			options_r = c(options_r,
				paste0("  ",
					names(opts),
					" = ",
					ifelse(opts==0,"FALSE","TRUE"),
					ifelse(seq_along(opts) != length(opts),",","")
				)
			)
		}
		options_r = c(options_r, ")")
?>

<?%s m ?>: <?%s d ?>/<?%s m ?>/main
	@echo "  DONE       $@"

<?%s m ?>/kernel_stats_20:
	ptxas -v --gpu-name=sm_20 <?%s d ?>/<?%s m ?>/cuda.ptx 

<?%s m ?>/source: <?%s src_all ?>
	@echo "  DONE       $@"

<?%s m ?>/clean: <?%s d ?>/<?%s m ?>/makefile
	@echo "  CLEAN      $@"
	@cd <?%s d ?>/<?%s m ?>; $(MAKE) clean

.PHONY: <?%s m ?>/clean


<?%s m ?>/vc: <?%s m ?>/source <?%s d ?>/<?%s m ?>/solver.vcproj
	@echo "  DONE       $@"

<?%s m ?>/summary: <?%s d ?>/<?%s m ?>/SUMMARY
	@echo ""
	@echo "----------------------------------------"
	@echo "    Summary of model <?%s m ?>"
	@echo "----------------------------------------"
	@echo ""
	@cat <?%s d ?>/<?%s m ?>/SUMMARY	

<?%s m ?>/docs: <?%s m ?>/source
	@cd <?%s d ?>/<?%s m ?>; doxygen docs-by-doxygen/conf.doxygen
	@echo "  DONE       $@"
	@echo "  Open CLB/<?%s m ?>/docs-by-doxygen/output/html/index.html in your browser."
	
<?%s d ?>/<?%s m ?>/main:<?%s src_all ?>
	@cd <?%s d ?>/<?%s m ?>; $(MAKE)

<?%s d ?>/<?%s m ?>/ :
	@$(MKPATH) $@

wiki/<?%s Models$model.md[i] ?>:$(SRC)/Model.md.Rt $(SRC)/conf.R <?%s d ?>/<?%s m ?>/options.R <?%s model_path ?>/*
	@echo "  RT         $@ (model)"
	@$(MKPATH) $@
	-@$(RT) -q -f $< -I $(TOOLS),$(SRC),<?%s model_path ?> -w wiki/ -o $@ -i options.R || rm $@

wiki/schema/<?%s m ?>.xsd:$(SRC)/schema.xsd.Rt $(SRC)/conf.R <?%s d ?>/<?%s m ?>/options.R doc/elements.yaml <?%s model_path ?>/*
	@echo "  RT         $@ (model)"
	@$(MKPATH) $@
	@$(RT) -q -f $< -I $(TOOLS),$(SRC),<?%s model_path ?> -w ./ -o $@ -i options.R || mv $@ $@~

# for model <?%s m ?> and destination <?%s d ?>

<?%s d ?>/<?%s m ?>/Dynamics_b.c <?%s d ?>/<?%s m ?>/Dynamics_b.h <?%s d ?>/<?%s m ?>/types_b.h <?%s d ?>/<?%s m ?>/ADpre_.h <?%s d ?>/<?%s m ?>/ADpre__b.h : <?%s d ?>/<?%s m ?>/tapenade.run

.INTERMEDIATE : tapenade.run

<?%s d ?>/<?%s m ?>/tapenade.run : tools/makeAD <?%s d ?>/<?%s m ?>/Dynamics.c <?%s d ?>/<?%s m ?>/ADpre.h <?%s d ?>/<?%s m ?>/ADpre_b.h <?%s d ?>/<?%s m ?>/Dynamics.h <?%s d ?>/<?%s m ?>/Consts.h <?%s d ?>/<?%s m ?>/types.h <?%s d ?>/<?%s m ?>/ADset.sh <?%s d ?>/<?%s m ?>/ADpost.sed
	@echo "  TAPENADE   $<"
	@(cd <?%s d ?>/<?%s m ?>; ../../tools/makeAD "$(TAPENADE)")

<?%s d ?>/<?%s m ?>/dep.mk:tools/dep.R <?%s src ?>
	@echo "  AUTO-DEP   $@"
	@$(RS) $< --args -d "<?%s d ?>/<?%s m ?>"

<?%s d ?>/<?%s m ?>/makefile:$(SRC)/makefile.Rt $(wildcard <?%s model_path ?>/*.R) $(SRC)/conf.R <?%s d ?>/<?%s m ?>/options.R <?%s src_all ?>
	@echo "  RT         $@"
	@$(MKPATH) $@
	@$(RT) -q -f $< -I $(TOOLS),$(SRC),<?%s model_path ?> -w <?%s d ?>/<?%s m ?>/ -o $@ -i options.R || mv $@ $@~

<?%s d ?>/<?%s m ?>/options.R:<?%s d ?>/config.R <?%s model_path ?>/conf.mk 
	@echo "  GEN        $@"
	@$(MKPATH) $@
	@echo '# Auto generated from makefile' >$@
	@cat $< >$@ <?R
		for (l in options_r) { ?>
	@echo '<?%s l ?>' >> $@ <?R
		} ?>

<?%s d ?>/<?%s m ?>/%:$(SRC)/%.Rt $(wildcard <?%s model_path ?>/*.R) $(SRC)/conf.R <?%s d ?>/<?%s m ?>/options.R
	@echo "  RT         $@"
	@$(MKPATH) $@
	@$(RT) -q -f $< -I $(TOOLS),$(SRC),<?%s model_path ?> -w <?%s d ?>/<?%s m ?>/ -o $@ $(RTOPT) -i options.R || mv $@ $@~

<?%s d ?>/<?%s m ?>/%.cpp:$(SRC)/%.cu.Rt $(wildcard <?%s model_path ?>/*.R) $(SRC)/conf.R <?%s d ?>/<?%s m ?>/options.R
	@echo "  RT         $@"
	@$(MKPATH) $@
	@$(RT) -q -f $< -I $(TOOLS),$(SRC),<?%s model_path ?> -w <?%s d ?>/<?%s m ?>/ -o $@ $(RTOPT) -i options.R || mv $@ $@~

<?%s d ?>/<?%s m ?>/%.cpp:$(SRC)/%.cu $(wildcard <?%s model_path ?>/*.R) $(SRC)/conf.R <?%s d ?>/<?%s m ?>/options.R
	@echo "  CP         $@"
	@$(MKPATH) $@
	@$(CP) $< $@

<?%s d ?>/<?%s m ?>/%:<?%s model_path ?>/%.Rt $(wildcard <?%s model_path ?>/*.R) $(SRC)/conf.R <?%s d ?>/<?%s m ?>/options.R $(wildcard <?%s model_path ?>/*.Rt)
	@echo "  RT         $@ (model)"
	@$(MKPATH) $@
	@$(RT) -q -f $< -I $(TOOLS),$(SRC),<?%s model_path ?> -w <?%s d ?>/<?%s m ?>/ -o $@ $(RTOPT) -i options.R || rm $@

<?%s d ?>/<?%s m ?>/%.code:<?%s model_path ?>/%.Rt $(wildcard <?%s model_path ?>/*.R) $(SRC)/conf.R <?%s d ?>/<?%s m ?>/options.R $(wildcard <?%s model_path ?>/*.Rt)
	@echo "  RT         $@ (model)"
	@$(MKPATH) $@
	@$(RT) -q -c -f $< -I $(TOOLS),$(SRC),<?%s model_path ?> -w <?%s d ?>/<?%s m ?>/ -o $@ -i options.R || rm $@

<?%s d ?>/<?%s m ?>/%:<?%s model_path ?>/%
	@echo "  CP         $@ (model)"
	@$(MKPATH) $@
	@$(CP) $< $@

<?%s d ?>/<?%s m ?>/%:$(SRC)/%
	@echo "  CP         $@"
	@$(MKPATH) $@
	@$(CP) $< $@

<?R } ?>

#configure:$(SRC)/configure.ac
#	@echo "  AUTOCONF   $@"
#	@autoconf -o $@ $< && rm -r autom4te.cache 2>/dev/null

#<?%s d ?>/%:$(SRC)/%
#	@echo "  CP         $@"
#	@$(CP) $< $@

<?%s d ?>/%:$(SRC)/%.Rt
	@echo "  RT         $@"
	@$(MKPATH) $@
	@$(RT) -q -f $< -I $(TOOLS) -w $(SRC)/ -o $@ || rm $@

<?R } ?>

%_sp.c:%.c
	@echo "  SP-CONST   $@"
	@$(MKPATH) $@
	@cat $< | sed -E 's/([^a-zA-Z0-9][0-9]+\.[0-9]*([eE][-+]?[0-9]+)?)[fL]+/\1f/g' > $@




