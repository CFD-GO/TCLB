<?R 
	source("models.R")
	Models = get.models();
	Models$model.md = ifelse(Models$in.group == 1,
		paste0(Models$path,".md"),
		paste0(Models$path,"/",Models$name,".md")
	)
	destinations=c("CLB");
?>
# MODELS: 
#	<?%s paste(Models$name,collapse=", ") ?>

#######################################################################################################################

all: <?%s paste(Models$name,collapse=" ") ?> 

.PHONY: all clean dummy <?%s paste(Models$name,collapse="/kernel_stats_20 ") ?>


SOURCE_PLAN += Global.cpp vtkLattice.cpp vtkOutput.cpp cross.cu
SOURCE_PLAN += Solver.cpp pugixml.cpp Geometry.cpp def.cpp unit.cpp
SOURCE_PLAN += ZoneSettings.cpp SyntheticTurbulence.cpp Sampler.cpp
SOURCE_PLAN += main.cpp
SOURCE_PLAN += Global.h gpu_anim.h Region.h vtkLattice.h vtkOutput.h cross.h cross.hpp
SOURCE_PLAN += gl_helper.h types.h Consts.h Solver.h pugixml.hpp pugiconfig.hpp
SOURCE_PLAN += Geometry.h def.h utils.h unit.h ZoneSettings.h SyntheticTurbulence.h Sampler.h spline.h TCLBForceGroupCommon.h
SOURCE_PLAN += RemoteForceInterface.cpp RemoteForceInterface.h RemoteForceInterface.hpp
SOURCE_PLAN += TCLBForceGroupCommon.h MPMD.hpp empty.cpp Particle.hpp lammps.cpp
SOURCE_PLAN += BallTree.h BallTree.hpp BallTree.cpp
SOURCE_PLAN += xpath_modification.cpp xpath_modification.h
SOURCE_PLAN += LatticeBase.cpp LatticeBase.h
SOURCE_PLAN += hdf5Lattice.cpp hdf5Lattice.h
SOURCE_PLAN += glue.hpp
SOURCE_PLAN += mpitools.hpp
SOURCE_PLAN += pinned_allocator.hpp
SOURCE_PLAN += Lists.h
SOURCE_PLAN += compare.cpp
SOURCE_PLAN += CommonHandler.h Handlers.h
SOURCE_PLAN += Factory.h HandlerFactory.h
SOURCE_PLAN += conf.doxygen
<?R
	h = dir("src/Handlers","[.](h|cpp)(|.Rt)$")
	h = sub(".Rt","",h)
	h = paste("Handlers",h,sep="/");
?>
SOURCE_PLAN+=<?R cat(h,sep=" ") ?>

SOURCE_MODEL += Lattice.cu cuda.cu LatticeContainer.inc.cpp LatticeAccess.inc.cpp
SOURCE_MODEL += Dynamics.c Dynamics_sp.c LatticeContainer.h Lattice.h
SOURCE_MODEL += Dynamics.h ModelConsts.h Lists.cpp
SOURCE_MODEL += makefile dep.mk

SOURCE_ADJ =templates/Dynamics_b.c ADTools.cu templates/Dynamics_adj.c templates/Dynamics_b.h types_b.h ADpre_.h ADpre__b.h
SOURCE_REST=

SOURCE_PLAN+=Catalyst.cpp
SOURCE_PLAN+=Catalyst.h

ifdef CPU
	SOURCE_PLAN_C=$(SOURCE_PLAN:.cu=.cpp)
	SOURCE_MODEL_C=$(SOURCE_MODEL:.cu=.cpp)
else
	SOURCE_PLAN_C=$(SOURCE_PLAN)
	SOURCE_MODEL_C=$(SOURCE_MODEL)
endif

AOUT=main

rm-files:
	@echo "  RM         ALL"
	@./tools/clear

rm:rm-files configure
	true

clean: <?%s paste(Models$name, "clean", sep="/", collapse=" ") ?>
	
wiki/Models.md : src/Models.md.Rt <?%s paste("wiki/", Models$model.md, sep="", collapse=" ") ?>
	@echo "  RT         $@ (model)"
	@$(MKPATH) $@
	@$(RT) -q -f $< -I $(TOOLS),$(SRC) -w wiki/ -o $@ "MODELS=\"<?%s paste(Models$name,collapse=",")?>\"" || rm $@

wiki/% : src/%.Rt
	@echo "  RT         $@"
	@$(MKPATH) $@
	@$(RT) -q -f $< -I $(TOOLS),$(SRC) -w wiki/ -o $@ || rm $@


travis : .travis.yml

.travis.yml : src/travis.yml.Rt models/* models/*/* models/*/*/* src/models.R
	@echo "  RT         $@"
	@$(MKPATH) $@
	@tools/RT -q -f $< -o $@ -I $(TOOLS),$(SRC)


<?R
	by(Models, Models$group, function(m) {
		if (length(m$opts[[1]]) > 0) {
			mat = do.call(rbind,m$opts)
			mat = ifelse(mat==1, "X","-")
			mat = as.data.frame(mat)
			row.names(mat) = m$name
		} else {
			mat = as.character(m$name)
		}
?>

<?%s m$group[1] ?>/all : <?%s m$name ?>

<?%s m$group[1] ?>/list :
<?R 
		f = textConnection("to.echo","w")		
		sink(f)
		print(mat)
		sink(); close(f)
		cat(paste("\t@echo '",to.echo,"'\n",sep=""),sep="")
	})
?>

###############################################################################
######       AUTO GENERATED CASES for RT                                 ######
###############################################################################

<?R
for (d in destinations) {
?>

<?%s d ?>/%:$(SRC)/%
	@echo "  CP         $@"
	@$(MKPATH) $@
	@$(CP) $< $@

<?%s d ?>/%:$(SRC)/%.Rt
	@echo "  RT         $@"
	@$(MKPATH) $@
	@$(RT) -q -f $< -I $(TOOLS),$(SRC) -w <?%s d ?>/ -o $@ $(RTOPT) || mv $@ $@~

<?%s d ?>/%.cpp:$(SRC)/%.cu.Rt
	@echo "  RT         $@"
	@$(MKPATH) $@
	@$(RT) -q -f $< -I $(TOOLS),$(SRC) -w <?%s d ?>/ -o $@ $(RTOPT) || mv $@ $@~

<?%s d ?>/%.cpp:$(SRC)/%.cu
	@echo "  CP         $@"
	@$(MKPATH) $@
	@$(CP) $< $@

<?R
	for (i in 1:nrow(Models)) {
		m = Models$name[i];
		model_path = Models$path[i];
		adjoint = Models$adjoint[i]
		opts = Models$opts[[i]]
		dest = paste(d,"/",m,"/",sep="")
		src = paste0("$(SOURCE_PLAN_C) $(addprefix ", m, "/,$(SOURCE_MODEL_C))")
		if (adjoint) src = paste(src, "$(SOURCE_ADJ)")
		src_all = paste(src, "$(SOURCE_REST)")
		src = paste("$(addprefix ",d,"/,",src,")",sep="");
		src_all = paste("$(addprefix ",d,"/,",src_all,")",sep="");
		src_all = paste(dest,src_all)
		rtopt = NULL
		if (adjoint) rtopt = c(rtopt, "MODEL=TRUE")
		rtopt = c(rtopt, paste0("MODEL=\\\"",m,"\\\""))
		if (length(opts) > 0) {
			opts = ifelse(opts==0,"FALSE","TRUE")
			opts = paste0(names(opts),"=",opts,collapse=",")
		} else {
			opts = ""
		}
		opts = paste0("\"Options=list(",opts,")\"")
		rtopt = c(rtopt,opts)
		#paste0(names(opts),"=",a,collapse=",")
?>

<?%s m ?>: <?%s d ?>/<?%s m ?>/main
	@echo "  DONE       $@"

<?%s m ?>/source: <?%s src_all ?>
	@echo "  DONE       $@"

<?%s m ?>/clean: <?%s d ?>/<?%s m ?>/makefile
	@echo "  CLEAN      $@"
	@cd <?%s d ?>/<?%s m ?>; $(MAKE) clean

.PHONY: <?%s m ?>/clean


<?%s m ?>/vc: <?%s m ?>/source <?%s d ?>/<?%s m ?>/solver.vcproj
	@echo "  DONE       $@"

<?%s m ?>/summary: <?%s d ?>/<?%s m ?>/SUMMARY
	@echo ""
	@echo "----------------------------------------"
	@echo "    Summary of model <?%s m ?>"
	@echo "----------------------------------------"
	@echo ""
	@cat <?%s d ?>/<?%s m ?>/SUMMARY	

<?%s m ?>/doc: <?%s m ?>/source
	@cd <?%s d ?>/<?%s m ?>; doxygen conf.doxygen
	@echo "  DONE       $@"

<?%s d ?>/<?%s m ?>/main:<?%s src_all ?>
	@cd <?%s d ?>; $(MAKE) -f <?%s m ?>/makefile

<?%s d ?>/<?%s m ?>/ :
	@$(MKPATH) $@

wiki/<?%s Models$model.md[i] ?>:$(SRC)/Model.md.Rt $(SRC)/conf.R <?%s model_path ?>/*
	@echo "  RT         $@ (model)"
	@$(MKPATH) $@
	-@$(RT) -q -f $< -I $(TOOLS),$(SRC),<?%s model_path ?> -w wiki/ -o $@ <?%s rtopt ?> || rm $@

# for model <?%s m ?> and destination <?%s d ?>

<?%s d ?>/<?%s m ?>/Dynamics_b.c <?%s d ?>/<?%s m ?>/Dynamics_b.h <?%s d ?>/<?%s m ?>/types_b.h <?%s d ?>/<?%s m ?>/ADpre_.h <?%s d ?>/<?%s m ?>/ADpre__b.h : <?%s d ?>/<?%s m ?>/tapenade.run

.INTERMEDIATE : tapenade.run

<?%s d ?>/<?%s m ?>/tapenade.run : tools/makeAD <?%s d ?>/<?%s m ?>/Dynamics.c <?%s d ?>/<?%s m ?>/ADpre.h <?%s d ?>/<?%s m ?>/ADpre_b.h <?%s d ?>/<?%s m ?>/templates/Dynamics.h <?%s d ?>/<?%s m ?>/Consts.h <?%s d ?>/<?%s m ?>/types.h <?%s d ?>/<?%s m ?>/ADset.sh <?%s d ?>/<?%s m ?>/ADpost.sed
	@echo "  TAPENADE   $<"
	@(cd <?%s d ?>/<?%s m ?>; ../../tools/makeAD)

<?%s d ?>/<?%s m ?>/dep.mk:tools/dep.R <?%s src ?>
	@echo "  AUTO-DEP   $@"
	@cd <?%s d ?>/<?%s m ?>; $(RS) ../../$<

<?%s d ?>/<?%s m ?>/makefile:$(SRC)/makefile.Rt <?%s model_path ?>/Dynamics.R $(SRC)/conf.R <?%s src_all ?>
	@echo "  RT         $@"
	@$(MKPATH) $@
	@$(RT) -q -f $< -I $(TOOLS),$(SRC),<?%s model_path ?> -w <?%s d ?>/<?%s m ?>/ -o $@ <?%s rtopt ?> || mv $@ $@~

<?%s d ?>/<?%s m ?>/%:$(SRC)/templates/%.Rt <?%s model_path ?>/Dynamics.R $(SRC)/conf.R
	@echo "  RT         $@ (model)"
	@$(MKPATH) $@
	@$(RT) -q -f $< -I $(TOOLS),$(SRC),<?%s model_path ?> -w <?%s d ?>/<?%s m ?>/ -o $@ $(RTOPT) <?%s rtopt ?> || mv $@ $@~

<?%s d ?>/<?%s m ?>/%.cpp:$(SRC)/templates/%.cu.Rt <?%s model_path ?>/Dynamics.R $(SRC)/conf.R
	@echo "  RT         $@ (model)"
	@$(MKPATH) $@
	@$(RT) -q -f $< -I $(TOOLS),$(SRC),<?%s model_path ?> -w <?%s d ?>/<?%s m ?>/ -o $@ $(RTOPT) <?%s rtopt ?> || mv $@ $@~

<?%s d ?>/<?%s m ?>/%:<?%s model_path ?>/%.Rt <?%s model_path ?>/Dynamics.R $(SRC)/conf.R
	@echo "  RT         $@ (model)"
	@$(MKPATH) $@
	@$(RT) -q -f $< -I $(TOOLS),$(SRC),<?%s model_path ?> -w <?%s d ?>/<?%s m ?>/ -o $@ $(RTOPT) <?%s rtopt ?> || mv $@ $@~

<?%s d ?>/<?%s m ?>/%.cpp:<?%s model_path ?>/%.cu.Rt <?%s model_path ?>/Dynamics.R $(SRC)/conf.R
	@echo "  RT         $@ (model)"
	@$(MKPATH) $@
	@$(RT) -q -f $< -I $(TOOLS),$(SRC),<?%s model_path ?> -w <?%s d ?>/<?%s m ?>/ -o $@ $(RTOPT) <?%s rtopt ?> || mv $@ $@~

<?%s d ?>/<?%s m ?>/%:<?%s model_path ?>/%
	@echo "  CP         $@ (model)"
	@$(MKPATH) $@
	@$(CP) $< $@

<?%s d ?>/<?%s m ?>/%:$(SRC)/templates/%
	@echo "  CP         $@"
	@$(MKPATH) $@
	@$(CP) $< $@

<?R } ?>

#configure:$(SRC)/configure.ac
#	@echo "  AUTOCONF   $@"
#	@autoconf -o $@ $< && rm -r autom4te.cache 2>/dev/null

#<?%s d ?>/%:$(SRC)/%
#	@echo "  CP         $@"
#	@$(CP) $< $@

<?%s d ?>/%:$(SRC)/%.Rt
	@echo "  RT         $@"
	@$(MKPATH) $@
	@$(RT) -q -f $< -I $(TOOLS) -w $(SRC)/ -o $@ || rm $@

<?R } ?>

%_sp.c:%.c
	@echo "  SP-CONST   $@"
	@$(MKPATH) $@
	@cat $< | sed -r 's/([^a-zA-Z0-9][0-9]+\.[0-9]*([eE][-+]?[0-9]+)?)[fL]+/\1f/g' > $@




