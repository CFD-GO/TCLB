<?R 
	source("models.R")
	Models = get.models();
	Models$model.md = ifelse(Models$in.group == 1,
		paste0(Models$path,".md"),
		paste0(Models$path,"/",Models$name,".md")
	)
	destinations=c("CLB");
?>
# MODELS: 
#	<?%s paste(Models$name,collapse=", ") ?>

#######################################################################################################################



DEST=CLB
SRC=src
BIN=bin


$(DEST)/dep.mk : tools/dep.R
	@echo "  AUTO-DEP   $@"
	@$(RS) $<


include $(DEST)/config.mk
include src/lists.mk
include $(DEST)/handlers.mk
include $(DEST)/dep.mk

all: <?%s paste(Models$name,collapse=" ") ?> 

.PHONY: all clean dummy <?%s paste(Models$name,collapse="/kernel_stats_20 ") ?>

<?R
	d = "$(DEST)"
	by(Models, Models$group, function(m) {
		if (length(m$opts[[1]]) > 0) {
			mat = do.call(rbind,m$opts)
			mat = ifelse(mat==1, "X","-")
			mat = as.data.frame(mat)
			row.names(mat) = m$name
		} else {
			mat = as.character(m$name)
		}
?>

<?%s m$group[1] ?>/all : <?%s m$name ?>

<?%s m$group[1] ?>/list :
<?R 
		f = textConnection("to.echo","w")		
		sink(f)
		print(mat)
		sink(); close(f)
		cat(paste("\t@echo '",to.echo,"'\n",sep=""),sep="")
	})
?>

###############################################################################
######       AUTO GENERATED CASES for RT                                 ######
###############################################################################

<?R
	for (i in 1:nrow(Models)) {
		m = Models$name[i];
		model_path = Models$path[i];
		adjoint = Models$adjoint[i]
		opts = Models$opts[[i]]
		dest = paste(d,"/",m,"/",sep="")
		src = paste0("$(SOURCE_PLAN_C) $(addprefix ", m, "/,$(SOURCE_MODEL_C))")
		if (adjoint) src = paste(src, "$(SOURCE_ADJ)")
		src_all = paste(src, "$(SOURCE_REST)")
		src = paste("$(addprefix ",d,"/,",src,")",sep="");
		src_all = paste("$(addprefix ",d,"/,",src_all,")",sep="");
		src_all = paste(dest,src_all)
		rtopt = NULL
		if (adjoint) rtopt = c(rtopt, "MODEL=TRUE")
		rtopt = c(rtopt, paste0("MODEL=\\\"",m,"\\\""))
		if (length(opts) > 0) {
			opts = ifelse(opts==0,"FALSE","TRUE")
			opts = paste0(names(opts),"=",opts,collapse=",")
		} else {
			opts = ""
		}
		opts = paste0("\"Options=list(",opts,")\"")
		rtopt = c(rtopt,opts)
		#paste0(names(opts),"=",a,collapse=",")
?>

.PHONY: <?%s m ?>/clean

<?%s m ?>: $(BIN)/<?%s m ?>
	@echo "  DONE       $@"

<?%s m ?>/source: <?%s src_all ?>
	@echo "  DONE       $@"

<?%s m ?>/clean: $(DEST)/<?%s m ?>/makefile
	@echo "  CLEAN      $@"
	@cd $(DEST)/<?%s m ?>; $(MAKE) clean

<?%s m ?>/summary: $(DEST)/<?%s m ?>/SUMMARY
	@echo ""
	@echo "----------------------------------------"
	@echo "    Summary of model <?%s m ?>"
	@echo "----------------------------------------"
	@echo ""
	@cat $(DEST)/<?%s m ?>/SUMMARY	

<?%s m ?>/doc: <?%s m ?>/source
	@cd $(DEST)/<?%s m ?>; doxygen conf.doxygen
	@echo "  DONE       $@"


$(BIN)/<?%s m ?>: $(addprefix $(DEST)/, $(SRC_MAIN__OBJ_PRM)) $(addprefix $(DEST)/<?%s m ?>/, $(SRC_MODEL_OBJ_PRM))
	@echo "  LINKING    $@"
	$(CXX) $^ -o $@ $(LD_OPT)

wiki/<?%s Models$model.md[i] ?>:$(SRC)/Model.md.Rt $(SRC)/conf.R <?%s model_path ?>/*
	@echo "  RT         $@ (model)"
	@$(MKPATH) $@
	-@$(RT) -q -f $< -I $(TOOLS),$(SRC),<?%s model_path ?> -w wiki/ -o $@ <?%s rtopt ?> || rm $@

# for model <?%s m ?> and destination $(DEST)

$(DEST)/<?%s m ?>/Dynamics_b.c $(DEST)/<?%s m ?>/Dynamics_b.h $(DEST)/<?%s m ?>/types_b.h $(DEST)/<?%s m ?>/ADpre_.h $(DEST)/<?%s m ?>/ADpre__b.h : $(DEST)/<?%s m ?>/tapenade.run

.INTERMEDIATE : tapenade.run

$(DEST)/<?%s m ?>/tapenade.run : tools/makeAD $(DEST)/<?%s m ?>/Dynamics.c $(DEST)/<?%s m ?>/ADpre.h $(DEST)/<?%s m ?>/ADpre_b.h $(DEST)/<?%s m ?>/templates/Dynamics.h $(DEST)/<?%s m ?>/Consts.h $(DEST)/<?%s m ?>/types.h $(DEST)/<?%s m ?>/ADset.sh $(DEST)/<?%s m ?>/ADpost.sed
	@echo "  TAPENADE   $<"
	@(cd $(DEST)/<?%s m ?>; ../../tools/makeAD)

$(DEST)/<?%s m ?>/dep.mk:tools/dep.R <?%s src ?>
	@echo "  AUTO-DEP   $@"
	@cd $(DEST)/<?%s m ?>; $(RS) ../../$<

$(DEST)/<?%s m ?>/%: $(SRC)/templates/%.Rt <?%s model_path ?>/Dynamics.R $(SRC)/conf.R
	@echo "  RT         $@ (model)"
	@$(MKPATH) $@
	@$(RT) -q -f $< -I $(TOOLS),$(SRC),<?%s model_path ?> -w $(DEST)/<?%s m ?>/ -o $@ $(RTOPT) <?%s rtopt ?> || mv $@ $@~

$(DEST)/<?%s m ?>/%:<?%s model_path ?>/%.Rt <?%s model_path ?>/Dynamics.R $(SRC)/conf.R
	@echo "  RT         $@ (model)"
	@$(MKPATH) $@
	@$(RT) -q -f $< -I $(TOOLS),$(SRC),<?%s model_path ?> -w $(DEST)/<?%s m ?>/ -o $@ $(RTOPT) <?%s rtopt ?> || mv $@ $@~

$(DEST)/<?%s m ?>/%:<?%s model_path ?>/%
	@echo "  CP         $@ (model)"
	@$(MKPATH) $@
	@$(CP) $< $@

$(DEST)/<?%s m ?>/%:$(SRC)/templates/%
	@echo "  CP         $@"
	@$(MKPATH) $@
	@$(CP) $< $@

<?R } ?>

$(DEST)/%:$(SRC)/%
	@echo "  CP         $@"
	@$(MKPATH) $@
	@$(CP) $< $@

$(DEST)/%:$(SRC)/%.Rt
	@echo "  RT         $@"
	@$(MKPATH) $@
	@$(RT) -q -f $< -I $(TOOLS),$(SRC) -w $(DEST)/ -o $@ $(RTOPT) || mv $@ $@~


.SUFFIXES: .cpp .cu .o

ifdef CPU

define compile =
	@echo "  G++        $< (from src)"
	@$(CXX) -c $< -o $@ $(CPP_OPT) $(OPT)
endef

define compile_cu =
	@echo "  G++        $< -- tamto"
	@cp $< $<.cpp
	@$(CXX) -c $<.cpp -o $@ $(CPP_OPT) $(OPT); rm $<.cpp
endef

%.o : %.cpp
	$(compile)
%.o : %.cu
	$(compile_cu)

else

%.o:%.cpp
	@echo "  G++        $<"
	@$(CXX) -c $< -o $@ $(CPP_OPT) $(OPT)

%.o:%.cu
	@echo "  NVCC       $<"
	@$(NVCC) --disable-warnings -c $< -o $@ --compiler-options="$(OPT)" $(NV_OPT)

endif

CLB/%/Dynamics_sp.c CLB/%/DynamicsS_b.c CLB/%/Dynamics_b.c CLB/%/Dynamics_adj.c :
	@echo "  MISSING    $@
	@touch $@


#%_sp.c:%.c
#	@echo "  SP-CONST   $@"
#	@$(MKPATH) $@
#	@cat $< | sed -r 's/([^a-zA-Z0-9][0-9]+\.[0-9]*([eE][-+]?[0-9]+)?)[fL]+/\1f/g' > $@




