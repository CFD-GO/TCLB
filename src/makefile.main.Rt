<?R 
	l = dir(path="src");
	d = sapply(paste("src",l,sep="/"),function(x){file.info(x)$isdir});
	models=l[d]
	
	Models = do.call(rbind, lapply(models,function (m) {
		pt = paste("src",m,sep="/");
		cf = paste("src",m,"conf.mk",sep="/");
		if (file.exists(cf)) {
			source(cf);
		} else {
			ADJOINT=0;
			return(NULL)
		}
		data.frame(name=m, adjoint=(ADJOINT != 0), path=pt)
	}))
	
	rm(l,d) 
	destinations=c("CLB");
?>
# MODELS: 
#	<?%s paste(Models$name,collapse=", ") ?>

#######################################################################################################################

all: <?%s paste(Models$name,collapse=" ") ?>

.PHONY: all clean dummy

TOOLS = tools
RT = $(TOOLS)/RT
RS = R --slave --quiet --vanilla -f
INDENT = tools/myindent
ADMOD = tools/ADmod.R
MAKEHEADERS = tools/makeheaders

RTOPT=
RTOPT_ADJ=ADJOINT=1
SRC=src
DEST=CLB

SOURCE_ALL+=Global.cpp Lattice.cu vtkLattice.cpp vtkOutput.cpp cross.cu cuda.cu LatticeContainer.cu LatticeAccess.cu
SOURCE_ALL+=Dynamics.c Dynamics_sp.c inter.cpp Solver.cpp Handlers.cpp pugixml.cpp Geometry.cpp def.cpp unit.cpp
SOURCE_ALL+=ZoneSettings.cpp
SOURCE_ALL+=main.cpp
SOURCE_ALL+=Global.h gpu_anim.h LatticeContainer.h Lattice.h Region.h vtkLattice.h vtkOutput.h cross.h
SOURCE_ALL+=gl_helper.h Dynamics.h Dynamics.hp types.h Consts.h Solver.h Handlers.h pugixml.hpp pugiconfig.hpp
SOURCE_ALL+=Geometry.h def.h utils.h unit.h ZoneSettings.h
SOURCE_ALL+=SUMMARY
SOURCE_ALL+=conf.doxygen
SOURCE_ADJ =Dynamics_b.c ADTools.cu Dynamics_adj.c Dynamics_b.hp Dynamics_b.h types_b.h ADpre_.h Dynamics_adj.hp ADpre__b.h
SOURCE_REST=makefile dep.mk
ADDITIONALS=config.mk.in config.h.in README.md dictionary.h

AOUT=main

clear:
	@echo "  RM         ALL"
	@./tools/clear

clean:
	@echo "  RM         ALL"
	@./tools/clear

$(MAKEHEADERS):tools/makeheaders.c
	gcc -o $@ $<


###############################################################################
######       AUTO GENERATED CASES for RT                                 ######
###############################################################################

<?R
for (d in destinations) {
	for (i in 1:nrow(Models)) {
		m = Models$name[i];
		adjoint = Models$adjoint[i]
		dest = paste(d,"/",m,"/",sep="")
		src = "$(SOURCE_ALL)"
		if (adjoint) src = paste(src, "$(SOURCE_ADJ)")
		src_all = paste(src, "$(SOURCE_REST)")
		src = paste("$(addprefix ",dest,",",src,")",sep="");
		src_all = paste("$(addprefix ",dest,",",src_all,")",sep="");
		src_all = paste(dest,src_all)
		add = paste("$(addprefix ",d,"/,$(ADDITIONALS))",sep="")
		src_all = paste(src_all,add)
?>
<?%s m ?>:  | <?%s d ?>/<?%s m ?>

<?%s m ?>: <?%s d ?>/<?%s m ?> <?%s d ?>/<?%s m ?>/main
	@echo "  DONE       $@"

<?%s m ?>/source:  | <?%s d ?>/<?%s m ?>

<?%s m ?>/source: <?%s d ?>/<?%s m ?> <?%s src_all ?>
	@echo "  DONE       $@"

<?%s m ?>/doc: <?%s m ?>/source
	@cd <?%s d ?>/<?%s m ?>; doxygen conf.doxygen
	@echo "  DONE       $@"

<?%s d ?>/<?%s m ?>/main:<?%s src_all ?>
	@cd <?%s d ?>/<?%s m ?>; $(MAKE)

<?%s d ?>/<?%s m ?> :
	mkdir -p $@

# for model <?%s m ?> and destination <?%s d ?>

<?%s d ?>/<?%s m ?>/Dynamics_b.c <?%s d ?>/<?%s m ?>/Dynamics_b.h <?%s d ?>/<?%s m ?>/types_b.h <?%s d ?>/<?%s m ?>/ADpre_.h <?%s d ?>/<?%s m ?>/ADpre__b.h : <?%s d ?>/<?%s m ?>/tapenade.run

.INTERMEDIATE : tapenade.run

<?%s d ?>/<?%s m ?>/tapenade.run : <?%s d ?>/<?%s m ?>/Dynamics.c <?%s d ?>/<?%s m ?>/ADpre.h <?%s d ?>/<?%s m ?>/ADpre_b.h <?%s d ?>/<?%s m ?>/Dynamics.h <?%s d ?>/<?%s m ?>/Consts.h <?%s d ?>/<?%s m ?>/types.h <?%s d ?>/<?%s m ?>/ADset.sh
	@echo "  TAPENADE   $<"
	@(cd $<; ../../tools/makeAD)

<?%s d ?>/<?%s m ?>/dep.mk:tools/dep.R <?%s src ?>
	@echo "  AUTO-DEP   $@"
	@cd <?%s d ?>/<?%s m ?>; $(RS) ../../$<

<?%s d ?>/<?%s m ?>/%:$(SRC)/%.Rt $(SRC)/<?%s m ?>/Dynamics.R $(SRC)/conf.R
	@echo "  RT         $@"
	@$(RT) -q -f $< -I $(TOOLS),$(SRC),$(SRC)/<?%s m ?> -w <?%s d ?>/<?%s m ?>/ -o $@ $(RTOPT)<?R if (adjoint) {?> $(RTOPT_ADJ)<?R }?> MODEL=\"<?%s m ?>\" || rm $@
	@$(INDENT) $@

<?%s d ?>/<?%s m ?>/%:$(SRC)/<?%s m ?>/%.Rt $(SRC)/<?%s m ?>/Dynamics.R $(SRC)/conf.R
	@echo "  RT         $@ (model)"
	@$(RT) -q -f $< -I $(TOOLS),$(SRC),$(SRC)/<?%s m ?> -w <?%s d ?>/<?%s m ?>/ -o $@ $(RTOPT)<?R if (adjoint) {?> $(RTOPT_ADJ)<?R }?> MODEL=\"<?%s m ?>\" || rm $@
	@$(INDENT) $@

#<?%s d ?>/<?%s m ?>/makefile:<?%s d ?>/<?%s m ?> <?%s d ?>/<?%s m ?>/makefile.in <?%s d ?>/<?%s m ?>/configure
#	@echo "  CONFIGURE  $@"
#	@(cd $<; ./configure)

<?%s d ?>/<?%s m ?>/%:$(SRC)/<?%s m ?>/%
	@echo "  CP         $@ (model)"
	@cp $< $@

<?%s d ?>/<?%s m ?>/%:$(SRC)/%
	@echo "  CP         $@"
	@cp $< $@

<?R } ?>

configure:$(SRC)/configure.ac
	@echo "  AUTOCONF   $@"
	@autoconf -o $@ $< && rm -r autom4te.cache 2>/dev/null

<?%s d ?>/%:$(SRC)/%
	@echo "  CP         $@"
	@cp -r $< $@

<?%s d ?>/%:$(SRC)/%.Rt
	@echo "  RT         $@"
	@$(RT) -q -f $< -I $(TOOLS) -w $(SRC)/ -o $@ $(RTOPT) || rm $@
	@$(INDENT) $@

<?R } ?>



%.hp:%.c $(MAKEHEADERS)
	@echo "  MKHEADERS  $<"
	@cp $< $<.cpp; $(MAKEHEADERS) $<.cpp && sed 's/extern//' $<.hpp > $@
	@rm $<.cpp $<.hpp

%.hp:%.cpp $(MAKEHEADERS)
	@echo "  MKHEADERS  $<"
	@cp $< $<.cpp; $(MAKEHEADERS) $<.cpp && sed 's/extern//' $<.hpp > $@
	@rm $<.cpp $<.hpp

%_sp.c:%.c
	@echo "  SP-CONST   $@"
	@cat $< | sed -r 's/[-+]?[0-9]+\.[0-9]*([eE][-+]?[0-9]+)?/&f/g' > $@

