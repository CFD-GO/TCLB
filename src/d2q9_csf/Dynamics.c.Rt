<?R
# #############
# Phase field advection based on "Conservative phase-field lattice Boltzmann model for interface tracking equation"
# CSF multiphase model implemented and authored by M. Dzikowski 2016
# Maintainer: Michal Dzikowski @mdzik
# #############

	source("conf.R") 
	c_header();
	
	source("lib/feq.R")
	source("lib/boundary.R")

    U = t(as.matrix(   rbind( Density$dx[Density$group=='f'], Density$dy[Density$group=='f'] ) ))
	EQ = MRT_eq(U, ortogonal=FALSE)
        wi = subst(EQ$Req, Jx=0, Jy=0, Jz=0)
        wi = subst(wi, rho=1)
        wi = gapply(wi,function(x) x$.M, simplify=TRUE)
        wi = wi %*% solve(EQ$mat)
	wi = as.vector(wi)

	W0 = solve(EQ$mat) %*% diag(1/wi) %*% solve(t(EQ$mat))
	i = rev(1:nrow(W0))
	H = chol(W0[i,i])[i,i]
	H = H * c(1,sqrt(3)/3,sqrt(3)/3,sqrt(2),sqrt(2),1,sqrt(6)/3,sqrt(6)/3,2)
	B = EQ$mat %*% t(H)

	EQ = MRT_eq(U, mat=B)

	

	f = PV(Density$name[Density$group=='f'])
	rho = PV("rho")
	J = PV("J",c("x","y"))
    u = PV(c("u.x","u.y"))


# things related to h
    h = PV(Density$name[Density$group=='h'])
    pf = PV("pf")
    phi = PV(paste("phi(",-U[,1],",",-U[,2],")"))
    n = PV(c("n.x","n.y"))
    c_sq = 1/3.
    Bh = PV('Bh')
    W = PV("IntWidth")	
    n = c(PV('n.x'),PV('n.y'))
    
    EQ_h = MRT_eq(U,mat=B)
    EQ_h$feq = ( subst( subst(EQ_h$feq, Jx = rho*PV('u.x'), Jy = rho*PV('u.y')), rho=pf ) )
    
    mob = PV("Mobility")
    Bh = 3*mob * (1.-4.*pf*pf)*W 

    EQ_h$feq = EQ_h$feq +  Bh * wi * n %*% t(U)
    EQ_h$Req = EQ_h$feq %*% EQ_h$mat  

    
    k01 = PV("k01")
    k10 = PV("k10")
    UN = t(U[1:9,])
    wis = rep(1./9., 9)
    wis[1] = wis[1] - 1
    phis = PV(paste('phi(',UN[1,],',',UN[2,],')'))   
    
#	d = PV(Density$name[Density$group=='d'])

?>

#define pi 3.141592653589793116

vector_t normal;
real_t curvature;
vector_t gradient;
bool near_wall;
CudaDeviceFunction void  InitPhisStencil(){
    //calculate phi
    CalcPhi();


    //calculate gradient and normal
    vector_t n, nw;// = getGradientPhi();
    n.x = 0;
    n.y = 0;
    nw.x = 0;
    nw.y = 0;
    bool inwall = false;
   <?R
    for (j in 1:9) {
    ?> 
        if (<?R C(phis[j]) ?>  != -999) {
            n.x = n.x + <?R C(phis[j]*U[j,1]) ?>;
            n.y = n.y + <?R C( phis[j]*U[j,2]) ?>;
        } else {
            nw.x = nw.x + <?R C(U[j,1]) ?>;
            nw.y = nw.y + <?R C(U[j,2]) ?>;
            inwall = true;
        }
    <?R } ?>
  
    real_t ln = sqrt(n.x*n.x + n.y*n.y);    
    if(ln == 0.){
        n.x = 0.;
        n.y = 0.;
    } else {
        n.x /= ln;
        n.y /= ln;
    }

    if (inwall){
        ln = sqrt(nw.x*nw.x + nw.y*nw.y);    
        if(ln == 0.){
            nw.x = 0.;
            nw.y = 0.;
        } else {
            nw.x /= ln;
            nw.y /= ln;
        }
   
        ln = n.x*nw.x + n.y*nw.y;

        n.x = n.x - nw.x * ln;
        n.y = n.y - nw.y * ln;
        
        ln = sqrt(n.x*n.x + n.y*n.y);    
        if(ln == 0.){
            n.x = 0.;
            n.y = 0.;
        } else {
            n.x /= ln;
            n.y /= ln;
        }
    }

    normal = n;
    gradient.x = normal.x * ln;
    gradient.y = normal.y * ln;
    near_wall = inwall;

    //calculate curvature
    
    real_t nx[3][3];
     real_t ny[3][3];
     real_t temp = 0;
    <?R
    #gradient
    for (i in 0:2) {
        for (j in 0:2){
            n = c( PV( "nx[",i,"][",j,"]"), PV("ny[",i,"][",j,"]" ) ) 
            C( n,  PV("phi(",i+U[,1]-1,",",j+U[,2]-1,")") %*%(c(wi)*U) )
            C( PV("temp"), n %*% n )
    #normal
            ?>
            temp = 1./ sqrt(temp);
            nx[ <?%s i ?>  ][ <?%s j ?>] *= temp;
            ny[ <?%s i ?>  ][ <?%s j ?>] *= temp;
            <?R

        }
    }


    #div
    
        nxs = PV("nx[",1+U[,1],"][",1+U[,2],"]" ) * c(wi)
        nys = PV("ny[",1+U[,1],"][",1+U[,2],"]" ) * c(wi)
        temp2 = nxs %*% U[,1] + nys %*% U[,2]
        C(PV("temp"), 3 * ( temp2[1] + temp2[2] ) )
    
    ?>
    curvature =  -temp;

}



CudaDeviceFunction real_t getRho(){
    if (NodeType & NODE_BOUNDARY) {
        return 1+Pressure*3;
    } else {
    	return <?R C(sum(f)) ?> ;
    }
}

CudaDeviceFunction vector_t getU(){
	real_t d = getRho();
	vector_t u;
<?R 
    C(PV(c("u.x","u.y")) , f %*% U)
?>
	vector_t F;
	F = getF();
    u.x = u.x+F.x*0.5;
    u.y = u.y+F.y*0.5;
	u.x /= d;
	u.y /= d;
	u.z = 0;
	return u;
}

//only for paraview: do not use, inefficient!!
CudaDeviceFunction real_t getPhaseField(){
        InitPhisStencil();
    	return phi ;
}
    
//only for paraview: do not use, inefficient!!
CudaDeviceFunction vector_t getNormal(){
    InitPhisStencil();
    return normal;

}
//only for paraview: do not use, inefficient!!
CudaDeviceFunction real_t getCurvature(){
    InitPhisStencil();
    return curvature;

}
CudaDeviceFunction vector_t getF() {
    real_t rho = getRho();
    real_t pf = <?R C(sum(h)) ?> ;
    vector_t Force = getInterfaceForce();

    //bouncy
    Force.x += GravitationX_l + (pf - 0.5)/(-1)*(GravitationX - GravitationX_l);
    Force.y += GravitationY_l + (pf - 0.5)/(-1)*(GravitationY - GravitationY_l);


    return Force;

}

CudaDeviceFunction vector_t getInterfaceForce() {
	vector_t F = gradient;
    real_t curv = curvature;
    real_t phi_l = phi ;
    if (phi_l * phi_l < 0.248) { 
  
       
    if (near_wall){
        real_t scale =  IntWidth * (1-4*phi_l*phi_l);

        F = getNormal();
        F.x = F.x * scale;
        F.y = F.y * scale;
    }

    F.z = 0;
    F.x =  SurfaceTensionRate * curv  *  F.x; // exp(- SurfaceTensionDecay * phi_l*phi_l);
    F.y =  SurfaceTensionRate * curv  *  F.y;// exp(- SurfaceTensionDecay * phi_l*phi_l);
    } else {
        F.x = 0;
        F.y = 0;
        F.z = 0;
    }
	return F;
}



CudaDeviceFunction float2 Color() {
        float2 ret;
        vector_t u = getU();
        ret.x = sqrt(u.x*u.x + u.y*u.y);
        if (NodeType == NODE_Solid){
                ret.y = 0;
        } else {
                ret.y = 1;
        }
        return ret;
}

CudaDeviceFunction void SetEquilibrum(real_t rho, real_t Jx, real_t Jy, real_t pf)
{
<?R
	feq = EQ$Req %*% solve(EQ$mat)
	C( f, feq)
    u = PV(c('Jx/rho', 'Jy/rho'))
    C( h,  wi*((u %*% t(U))*( 1/ c_sq) + ((u %*% t(U)) * (u %*% t(U)))*(1/(c_sq*c_sq*2)) - sum(u*u)*(1/(c_sq*2)) + 1)*pf  )
?>
}

CudaDeviceFunction void Init() {
	real_t rho, ux, uy, C;
	rho = (1+Pressure*3);
	ux=0;
	uy=0;
	ux = Velocity+ux;
    C = PhaseField; 
	SetEquilibrum(
		rho,
		ux*rho,
		uy*rho,
        C
	);
    <?R
#       C(d,1)
    ?>
}

CudaDeviceFunction void CalcPhi() {
    if ( (NodeType & NODE_BOUNDARY) == NODE_SSymmetry ){
       real_t ret = 0;
       <?R 
        ret = PV("ret")
        for (j in (1:9)[ U[,2] > 0 ]) {
            op_i = (1:9)[U[,2]+U[j,2] == 0 & U[,1]-U[j,1] == 0] 
            C( ret , ret + h[op_i])                 
        }
        sel = (1:9)[U[,2]<=0]
        C(ret , ret + h[sel])            
       ?>
       phi =  ret;

   }

   if ( (NodeType & NODE_BOUNDARY) == NODE_NSymmetry ){
        real_t ret = 0;
        <?R 
        ret = PV("ret")

        for (j in (1:9)[ U[,2] < 0 ]) {
            op_i = (1:9)[U[,2]+U[j,2] == 0 & U[,1]-U[j,1] == 0] 
            C( ret , ret + h[op_i])                
        }
        sel = (1:9)[U[,2]>=0]
        C(ret , ret + h[sel])     
        ?>
        phi =  ret;

   }


   if ((NodeType & NODE_BOUNDARY) == NODE_Wall) {
        phi =  -999;
   } else {
    	phi =  <?R C(sum(h)) ?> ;
   }  
    
    
}

CudaDeviceFunction void Run() {
    InitPhisStencil();

    switch (NodeType & NODE_BOUNDARY) {
	case NODE_Solid:
	case NODE_Wall:
		BounceBack();
		break;
	case NODE_EVelocity:
		EVelocity();
		break;
	case NODE_WPressure:
		WPressure();
		break;
	case NODE_WVelocity:
		WVelocity();
		break;
	case NODE_EPressure:
		EPressure();
		break;
    case NODE_NSymmetry:
       <?R Symmetry(2,-1) ?>
        break;
    case NODE_SSymmetry:
       <?R Symmetry(2,1) ?>
        break;

    }
    if (NodeType & NODE_MRT)
    {
		CollisionMRT();
    }
}

CudaDeviceFunction void BounceBack()
{
<?R FullBounceBack() ?>
}


CudaDeviceFunction void EVelocity()
{
    {
<?R 
    ZouHeRewrite(EQ,   f, c(1,0), type="velocity")
?>
    }
    {
<?R
    ZouHeRewrite(EQ_h, h, c(1,0), type="pressure", rhs=PV('PhaseField'))
?>
    }
}
CudaDeviceFunction void EPressure()
{
   {
<?R 
    ZouHeRewrite(EQ,   f, c(1,0), type="pressure")
?>
    }
    {
<?R
    ZouHeRewrite(EQ_h, h, c(1,0), type="pressure", rhs=PV('PhaseField'))
?>
    }
}



CudaDeviceFunction void WPressure()
{
   {
<?R 
    ZouHeRewrite(EQ,   f, c(-1,0), type="pressure")
?>
    }
    {
<?R
    ZouHeRewrite(EQ_h, h, c(-1,0), type="pressure", rhs=PV('PhaseField'))
?>
    }
}

CudaDeviceFunction void WVelocity()
{
   {
<?R 
    ZouHeRewrite(EQ,   f, c(-1,0), type="velocity")
?>
    }
    {
<?R
    ZouHeRewrite(EQ_h, h, c(-1,0), type="pressure", rhs=PV('PhaseField'))
?>
    }
}




CudaDeviceFunction void CollisionMRT()
{
    vector_t n = normal;
    real_t pf = <?R C(sum(h)) ?> ;
<?R
	MI = solve(EQ$mat)
	P = MI %*% diag(1/wi) %*% t(MI)

	R = PV("R", 1:nrow(U)-1);
	selR = EQ$order > 1
	R[!selR] = EQ$Req[!selR]
?>
	real_t <?R C(R,sep=",") ?>;
	real_t gamma  = 1-( omega_l + (pf - 0.5)/(-1)*(omega - omega_l));
    real_t gamma2 = gamma;
<?R
	S = PV("S",1:nrow(U)-1);
	
    S[EQ$order <= 2] = PV("gamma")
	S[EQ$order >  2] = PV("gamma2")


	C( R, f %*% EQ$mat );
	C( R[selR], (R - EQ$Req)[selR]);


	C( R[selR], (R * S)[selR]);

?>
    //Jx = Jx + rho*GravitationX ;
    //Jy = Jy + rho*GravitationY ; 
    vector_t F = getF();
    Jx = Jx + F.x ;
    Jy = Jy + F.y ; 
<?R


	C( R[selR], (R + EQ$Req)[selR]);

	C( f, R %*% solve(EQ$mat), float=F);


    # part related to h
?> 
    real_t d = <?R C(sum(f)) ?>;
    vector_t u;
    u.x = (Jx + 0.5 * F.x) / d;
    u.y = (Jy + 0.5 * F.y) / d;
    real_t omega_ph =  1/( 3 * Mobility + 0.5); 
    real_t Bh;

<?R
#u = PV(c('u.x', 'u.y'))
#   n = PV(c('n.x', 'n.y'))
#    mob = PV("M")
    omega_ph=PV("omega_ph")
#    C( Bh, 3*mob * (1.-4.*pf*pf)*(W) )
    C( h, (1-omega_ph )*h + omega_ph * EQ_h$feq )

?>
//    vector_t du = getBoundaryForcing();
//    du.x *= 0.3;
//    du.y *= 0.3;
 //   vector_t wd = getWallDirection();
 //   real_t lwd = sqrt(wd.x*wd.x + wd.y*wd.y);
 //   vector_t zero;
 //   zero.x = 0;
 //   zero.y = 0;
 /*   real_t sd;
    sd = d[0];
    for (int i = 1; i <9; i++ ){
        sd = d[i] > sd ? d[i] : sd;
    }*/
    <?R
#    sd =  PV('sd')
#    C( d, sd* PV('WallDistanceRatio') )
    ?>

    
}
