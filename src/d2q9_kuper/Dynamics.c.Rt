<?R
	source("conf.R") ;
	c_header();
    library(polyAlgebra);
?>
/**
#define S4 1.3333
#define S5 1.0
#define S6 1.0
#define S7 1.0
#define S8 omega
#define S9 omega
**/

<?R

U = as.matrix(Density[Density$group=="f",c("dx","dy")])
f  = PV(Density$name[Density$group=="f"])
ph = PV(paste("phi(",-U[,1],",",-U[,2],")"))

	u = PV(paste("u[",1:2-1,"]",sep=""))
	uf = PV("uf")
	d = PV("d")
	usq = PV("usq")
	omega = PV("omega")
        uf1 = uf;
        uf2 = uf;
        uf3 = uf;
	t1 = 4/9
	t2 = 1/9
	t3 = 1/36
	c_squ = 1/3
	tn = diag(c(t1,t2,t2,t2,t2,t3,t3,t3,t3))
	bounce = c(0,3,4,1,2,7,8,5,6)
?>

CudaDeviceFunction real_t getRho(){
	return <?R C(sum(f)) ?>;
}

CudaDeviceFunction vector_t getU(){
	real_t d = getRho();
	vector_t u;
<?R 
    C(PV(c("u.x","u.y")) , f %*% U)
?>
	vector_t F;
	F = getF();
    u.x = u.x+F.x*0.5;
    u.y = u.y+F.y*0.5;
	u.x /= d;
	u.y /= d;
	u.z = 0;
	return u;
}

CudaDeviceFunction vector_t getF() {
	vector_t F;
	real_t R[9];
    if ((NodeType & NODE_BOUNDARY) == NODE_Wall  )    {
        F.x=0;
        F.y=0;
        <?R
            Force = PV(c("F.x","F.y"));
            C(Force, 2.* f %*% U);
        ?>
    } else {
        F.x = 0;
        F.y = 0;
        F.z = 0;
    }
        <?R
            R = PV(c(paste("R[",1:9-1,"]",sep="")))
            C(R , ph);
        ?>
         switch(NodeType & NODE_BOUNDARY){
             case NODE_NSymmetry:
             <?R
                reflect_to =  c(8,4,7) + 1;
                reflect_from = c(5,2,6) + 1;
                for (i in 1:3)
                {
                    C( R[reflect_to[i]], R[reflect_from[i]] )
                }
            ?>
            break;

             case NODE_SSymmetry:
             <?R
                reflect_to = c(5,2,6) + 1;
                reflect_from = c(8,4,7) + 1;
                for (i in 1:3)
                {
                    C( R[reflect_to[i]], R[reflect_from[i]] )
                }
            ?>
            break;


            case NODE_ESymmetry:
             <?R
                reflect_to =  c(6,3,7) + 1;
                reflect_from = c(5,1,8) + 1;
                for (i in 1:3)
                {
                    C( R[reflect_to[i]], R[reflect_from[i]] )
                }
            ?>
            break;
     
        }       
        <?R
            Force = PV(c("F.x","F.y"));
	        gs = c(0,1,1,1,1,1/4,1/4,1/4,1/4);
            A = PV("MagicA")
        	C(R[-1] , (R * R * A + R * R[1] * (A*(-2)+1))[-1],float=F)
        	C(Force , Force -(0.666666666666666666)*(R*gs) %*% U)
        ?>
//	    F.x = F.x + -2./3. * F.x;
//        F.y = F.x + -2./3. * F.y;
//        F.x = 0;
//        F.y = 0;
//}

    F.z = 0;
	return F;
}

CudaDeviceFunction real_t getP(){
	double a2 = 3.852462271644162;
    double b2 = 0.1304438860971524 * 4.0 ;
    double c2 = 2.785855170470555;
    double t = Temperature;
    double p;
	double rho2;
    switch(NodeType & NODE_BOUNDARY){
        case NODE_NSymmetry:
            NSymmetry();
        break;
        case NODE_SSymmetry:
            SSymmetry();
        break;
        case NODE_ESymmetry:
            ESymmetry();
        break;
	}
	rho2 = <?R C(sum(f)) ?>;
    if (((NodeType & NODE_BOUNDARY) != 0x0 ) 
            &&  ((NodeType & NODE_BOUNDARY) != NODE_NSymmetry) 
            &&  ((NodeType & NODE_BOUNDARY) != NODE_SSymmetry)   
            &&  ((NodeType & NODE_BOUNDARY) != NODE_ESymmetry)   
    )  {
        rho2 = Density;
	}

	p =((rho2*(-pow(b2,3)*pow(rho2,3)/64.+b2*b2*rho2*rho2/16.+b2*rho2/4.+1)*t*c2)/pow(1-b2*rho2/4.,3)-a2*rho2*rho2);
	return Magic*p;
//      return phi(0,0);
}

CudaDeviceFunction void BounceBack()
{
     real_t uf;

<?R
  V = cbind(1:9, bounce+1)
  sel = V[,1] > V[,2]
  V = V[sel,]
  for (i in 1:nrow(V))
  {
	C(uf, f[V[i,1]])
    C(f[V[i,1]], f[V[i,2]])
    C(f[V[i,2]], uf)
	
	
   }
?>
    AddToWallForceX(<?%s ToC(f %*% U[,1]) ?>);
	AddToWallForceY(<?%s ToC(f %*% U[,2]) ?>);
}

//CudaDeviceFunction void MovingWall()
//{
//	real_t rho, ru;
//	real_t ux0 = MovingWallVelocity;
//	rho = f0 + f1 + f3 + 2.*(f7 + f4 + f8);
//	ru = rho * ux0;
//	f2 = f4;
//	f6 = f8 - (1./2.) * ru - (1./2.)*(f3 - f1);
//	f5 = f7 + (1./2.) * ru + (1./2.)*(f3 - f1);
//}
//

CudaDeviceFunction void MovingWall()
{
	real_t rho, ru;
	real_t U_0 = MovingWallVelocity;
    #define U_1 0.
                                     
//#WWWWWWWWWWWWWWWWWW  f_6  WWWWWWWWWWWWWWWWWWWW
f6 = (1.0/6.0)*(-3*(U_1 - 1)*(f0 + 2*f3 + 2*f4 + 2*f7) + (3*U_0 + 2*U_1 - 3)*(f0 + f1 + f3 + 2*f4 + 2*f7 + 2*f8))/(U_1 - 1);
//#WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW
      
//#WWWWWWWWWWWWWWWWWW  f_2  WWWWWWWWWWWWWWWWWWWW
f2 = -(2*U_1*f0 + 2*U_1*f1 + 2*U_1*f3 + U_1*f4 + 4*U_1*f7 + 4*U_1*f8 + 3*f4)/(3*U_1 - 3);
//#WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW
                                  
//#WWWWWWWWWWWWWWWWWW  f_5  WWWWWWWWWWWWWWWWWWWW
f5 = (-U_0*(f0 + f1 + f3 + 2*f4 + 2*f7 + 2*f8) - 1.0/2.0*(U_1 - 1)*(f0 + 2*f3 + 2*f4 + 2*f7) + (U_1 - 1)*(-f1 + f3 + f7 - f8) + (1.0/6.0)*(3*U_0 + 2*U_1 - 3)*(f0 + f1 + f3 + 2*f4 + 2*f7 + 2*f8))/(U_1 - 1);
//#WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW
                  
//#WWWWWWWWWWWWWWWWWW  rho  WWWWWWWWWWWWWWWWWWWW
//rho = -(f0 + f1 + f3 + 2*f4 + 2*f7 + 2*f8)/(U_1 - 1);
//#WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW


}



CudaDeviceFunction void MovingWallN()
{
	real_t rho, ru;
    real_t ux0 = MovingWallVelocity;
	rho = f0 + f1 + f3 + 2.*(f6 + f2 + f5);
	ru = rho * ux0;
	f4 = f2;
	f8 = f6 + (1./2.) * ru + (1./2.)*(f3 - f1);
	f7 = f5 - (1./2.) * ru - (1./2.)*(f3 - f1);
}


// 0 1 2 3 4 5 6 7 8
// 1 5 2 6 3 7 4 8 0

CudaDeviceFunction void EVelocity()
{
     real_t rho, ru;
	 real_t ux0 = InletVelocity;
	rho = ( f0 + f2 + f4 + 2.*(f1 + f5 + f8) ) / (1. + ux0);
	ru = rho * ux0;
	f3 = f1 - (2./3.) * ru;
	f7 = f5 - (1./6.) * ru + (1./2.)*(f2 - f4);
	f6 = f8 - (1./6.) * ru + (1./2.)*(f4 - f2);
}

// rho + rho*u = f0 + f2 + f4 + 2.*(f1 + f5 + f8)
// rho - rho*u = f0 + f2 + f4 + 2.*(f3 + f7 + f6)

CudaDeviceFunction void WPressure()
{
     real_t ru;
	 real_t rho = Density;
	ru = rho - ( f0 + f2 + f4 + 2.*(f3 + f7 + f6) );

	f1 = f3 + (2./3.) * ru;
	f5 = f7 + (1./6.) * ru - (1./2.)*(f2 - f4);
	f8 = f6 + (1./6.) * ru + (1./2.)*(f2 - f4);
}

CudaDeviceFunction void eqWVelocity()
{
     real_t rho;
	 real_t u[2] = {InletVelocity,0.};
	rho = ( f0 + f2 + f4 + 2.*(f3 + f7 + f6) ) / (1. - u[0]);
	SetEquilibrum(rho,u);
}

CudaDeviceFunction void WVelocity()
{
	real_t rho2;
	 real_t u[2] = {InletVelocity,0.};
	rho2 = Density;
	SetEquilibrum(rho2,u);
}

CudaDeviceFunction void EPressure()
{
        real_t ru;
	 real_t rho = Density;
	ru = ( f0 + f2 + f4 + 2.*(f1 + f5 + f8) ) - rho;

	f3 = f1 - (2./3.) * ru;
	f7 = f5 - (1./6.) * ru + (1./2.)*(f2 - f4);
	f6 = f8 - (1./6.) * ru - (1./2.)*(f2 - f4);
}



CudaDeviceFunction void CalcPhi() {
	 double a2 = 3.852462271644162;
         double b2 = 0.1304438860971524 * 4.0 ;
         double c2 = 2.785855170470555;
         double t = Temperature;
        double p;
	double rho2;
    switch(NodeType & NODE_BOUNDARY){
        case NODE_NSymmetry:
            NSymmetry();
        break;
        case NODE_SSymmetry:
            SSymmetry();
        break;
        case NODE_ESymmetry:
            ESymmetry();
        break;
	}
	rho2 = <?R C(sum(f)) ?>;
    if (((NodeType & NODE_BOUNDARY) != 0x0 ) 
            &&  ((NodeType & NODE_BOUNDARY) != NODE_NSymmetry) 
            &&  ((NodeType & NODE_BOUNDARY) != NODE_SSymmetry)   
            &&  ((NodeType & NODE_BOUNDARY) != NODE_ESymmetry)   
    )  {
        rho2 = Density;
	}

	p =((rho2*(-pow(b2,3)*pow(rho2,3)/64.+b2*b2*rho2*rho2/16.+b2*rho2/4.+1)*t*c2)/pow(1-b2*rho2/4.,3)-a2*rho2*rho2);
	p = Magic*p;

	phi = FAcc * sqrt( -p + rho2/(3.) );
}

CudaDeviceFunction void Run() {
    switch (NodeType & NODE_BOUNDARY) {
	case NODE_Solid:
		break;
	case NODE_Wall:
		BounceBack();
		break;
	case NODE_MovingWall:
		MovingWall();
		break;
//	case NODE_NMovingWall:
//		MovingWallN();
//		break;
	case NODE_EVelocity:
		EVelocity();
		break;
	case NODE_WPressure:
		WPressure();
		break;
	case NODE_WVelocity:
		WVelocity();
		break;
	case NODE_EPressure:
		EPressure();
		break;
     case NODE_NSymmetry:
        NSymmetry();
    break;
     case NODE_SSymmetry:
        SSymmetry();
        break;
    case NODE_ESymmetry:
        ESymmetry();
        break;

    }
    switch (NodeType & NODE_COLLISION) {
        case NODE_BGK:
        case NODE_MRT:
                CollisionMRT();
                break;
    }
//	CalcPhi();
}
CudaDeviceFunction void NSymmetry()
{
// *******************
// Symmetry BC for TOP WALL
// *******************    
<?R
  reflect_to =  c(4,7,8) + 1;
  reflect_from = c(2,6,5) + 1;
  for (i in 1:3)
  {
	C( f[reflect_to[i]], f[reflect_from[i]] )
#    C( phi[reflect_to[i]], phi[reflect_from[i]] )
  }
?>
}
CudaDeviceFunction void SSymmetry()
{
// *******************
// Symmetry BC for BOTTOM WALL
// *******************    
<?R
  reflect_to = c(2,6,5) + 1;
  reflect_from = c(4,7,8) + 1;
 
  for (i in 1:3)
  {
	C( f[reflect_to[i]], f[reflect_from[i]] )
#    C( phi[reflect_to[i]], phi[reflect_from[i]] )
  }
?>
}
CudaDeviceFunction void ESymmetry()
{
// *******************
// Symmetry BC for RIGHT WALL
// *******************    
<?R
  reflect_to =  c(6,3,7) + 1;
  reflect_from = c(5,1,8) + 1;
  for (i in 1:3)
  {
	C( f[reflect_to[i]], f[reflect_from[i]] )
#    C( phi[reflect_to[i]], phi[reflect_from[i]] )
  }
?>
}
CudaDeviceFunction void SetEquilibrum( real_t d,  real_t u[2])
{	real_t usq, uf;
<?R
    C(usq , sum(u*u)*(1/c_squ)) ?>
<?R
	for (i in 1:9) {
         cat("//--",i,"-------------------------------------------------\n")
         w2 = list(
                 c( uf1, (u %*% t(U) * (1/c_squ))[i]),
                 c(uf2 , uf1 + (uf1*uf1+usq*(-1))*0.5 + 1),
                 c(uf3 , d * uf2),
                 c(f[i] , uf3 * tn[i,i])
         )
         for (h in w2) C(h[1],h[2])
        }
?>

}

CudaDeviceFunction void Init() {
	real_t u[2] = {InletVelocity,0.};
	real_t rho2;
	rho2 = Density;
	SetEquilibrum(rho2,u);
	CalcPhi();
}

CudaDeviceFunction float2 Color() {
        float2 ret;
        vector_t u = getU();
        ret.x = sqrt(u.x*u.x + u.y*u.y);
//	ret.x = (getRho()-1);
//	ret.x=wb;
        if (getRho()<1){
                ret.y = 0;
        } else {
                ret.y = 1;
        }
//	ret.y=w;
        return ret;
}


CudaDeviceFunction void CollisionMRT()
{
	real_t M[9];
	real_t rho, ux, uy;
<?R
# Calculating equlibrium density set
    	source("lib/feq.R")
        rho = PV("rho")
        u = PV(c("ux","uy"))
        feq = MRT_feq(U, rho, u*rho );
        R = PV("M[",1:9-1,"]")
#        OMEGA = c(
#		PV(rep(0,3)),
#		PV(rep("omega2",4)),
#		PV(rep("omega",2))
#	)
        OMEGA = PV("S",1:9-1,"")

	M = matrix(c(
	      1,  1,  1,  1,  1,  1,  1,  1,  1,
	      0,  1,  0, -1,  0,  1, -1, -1,  1,
	      0,  0,  1,  0, -1,  1,  1, -1, -1,
	     -4, -1, -1, -1, -1,  2,  2,  2,  2,
	      4, -2, -2, -2, -2,  1,  1,  1,  1,
	      0, -2,  0,  2,  0,  1, -1, -1,  1,
	      0,  0, -2,  0,  2,  1,  1, -1, -1,
	      0,  1, -1,  1, -1,  0,  0,  0,  0,
	      0,  0,  0,  0,  0,  1, -1,  1, -1), 9,9);

	C( rho, sum(f) )
	C( u, f %*% U * ( rho^(-1) ) )
?>

//	real_t omega = 1.0-1.0/(3*nu + 0.5);
//	real_t omega2 = omega;
<?R
	C( R, (f-feq) %*% M * OMEGA );
?>
    vector_t F = getF();
    ux = ux+F.x/rho + (GravitationX );
    uy = uy+F.y/rho + (GravitationY ); 
    
<?R
	C( R, R + feq %*% M);
	C( R, R * (1/ diag(t(M) %*% M)));
	C( f, R %*% t(M) );
?>
}


