<?R
	source("conf.R") ;
	c_header();
?>
#define S4 1.3333
#define S5 1.0
#define S6 1.0
#define S7 1.0
#define S8 omega
#define S9 omega

<?R
	f = PV(Density$name[Density$group=="f"])
	U = as.matrix(Density[Density$group=="f",c("dx","dy")])


	u = PV(paste("u[",1:2-1,"]",sep=""))
	uf = PV("uf")
	d = PV("d")
	usq = PV("usq")
	omega = PV("omega")
        uf1 = uf;
        uf2 = uf;
        uf3 = uf;
	t1 = 4/9
	t2 = 1/9
	t3 = 1/36
	c_squ = 1/3
	wi = c(t1,t2,t2,t2,t2,t3,t3,t3,t3)
	tn = diag(wi)
	bounce = c(0,3,4,1,2,7,8,5,6)
?>

CudaDeviceFunction real_t getRho(){
	return <?R C(sum(f)) ?>;
}
    
CudaDeviceFunction vector_t getU(){
	real_t d = getRho();
	vector_t u;
<?R C(PV(c("u.x","u.y")), f %*% U) ?>
	u.x /= d;
	u.y /= d;
	u.z = 0;
	return u;
}

CudaDeviceFunction real_t getW(){
	return w;
}

CudaDeviceFunction void BounceBack()
{
     real_t uf;
<?R
  V = cbind(1:9, bounce+1)
  sel = V[,1] > V[,2]
  V = V[sel,]
  for (i in 1:nrow(V))
  {
	C(uf,f[V[i,1]])
        C(f[V[i,1]],f[V[i,2]])
        C(f[V[i,2]],uf)
   }
?>
}

// 0 1 2 3 4 5 6 7 8
// 1 5 2 6 3 7 4 8 0

CudaDeviceFunction void EVelocity()
{
     real_t rho, ru;
	const real_t ux0 = Velocity;
	rho = ( f0 + f2 + f4 + 2.*(f1 + f5 + f8) ) / (1. + ux0);
	ru = rho * ux0;
	f3 = f1 - (2./3.) * ru;
	f7 = f5 - (1./6.) * ru + (1./2.)*(f2 - f4);
	f6 = f8 - (1./6.) * ru + (1./2.)*(f4 - f2);
}

CudaDeviceFunction void WPressure()
{
     real_t ru, ux0;
	const real_t rho = 1.0;
	ux0 = -1. + ( f0 + f2 + f4 + 2.*(f3 + f7 + f6) ) / rho;
	ru = rho * ux0;

	f1 = f3 - (2./3.) * ru;
	f5 = f7 - (1./6.) * ru + (1./2.)*(f4 - f2);
	f8 = f6 - (1./6.) * ru + (1./2.)*(f2 - f4);
}

CudaDeviceFunction void eqWVelocity()
{
     real_t rho;
	const real_t u[2] = {Velocity,0.};
	rho = ( f0 + f2 + f4 + 2.*(f3 + f7 + f6) ) / (1. - u[0]);
	SetEquilibrum(rho,u);
}

CudaDeviceFunction void WVelocity()
{
     real_t rho, ru;
	const real_t u[2] = {Velocity,0.};
	rho = ( f0 + f2 + f4 + 2.*(f3 + f7 + f6) ) / (1. - u[0]);
//	AddToObjective(rho);
	ru = rho * u[0];
	f1 = f3 + (2./3.) * ru;
	f5 = f7 + (1./6.) * ru + (1./2.)*(f4 - f2);
	f8 = f6 + (1./6.) * ru + (1./2.)*(f2 - f4);
}

CudaDeviceFunction void EPressure()
{
     real_t ru, ux0;
	const real_t rho = 1.0;
	ux0 = -1. + ( f0 + f2 + f4 + 2.*(f1 + f5 + f8) ) / rho;
	ru = rho * ux0;

	f3 = f1 - (2./3.) * ru;
	f7 = f5 - (1./6.) * ru + (1./2.)*(f2 - f4);
	f6 = f8 - (1./6.) * ru + (1./2.)*(f4 - f2);
}


CudaDeviceFunction void Run() {
//	printf("Run %d %d -> (%d,%d)\n", CudaBlock.x, CudaBlock.y, X, Y);
//    AddToObjective(w*(1-w)/10);
    switch (NodeType & NODE_BOUNDARY) {
	case NODE_Solid:
	case NODE_Wall:
		BounceBack();
		break;
	case NODE_EVelocity:
		EVelocity();
		break;
	case NODE_WPressure:
		WPressure();
		break;
	case NODE_WVelocity:
		WVelocity();
		break;
	case NODE_EPressure:
		EPressure();
		break;
    }
    switch (NodeType & NODE_COLLISION) {
        case NODE_BGK:
                break;   
        case NODE_MRT:
                CollisionMRT();
                break;
    }
}

CudaDeviceFunction void SetEquilibrum(const real_t d, const real_t u[2])
{	real_t usq, uf;
<?R
        u = PV("u[",1:2-1,"]")
        d = PV("d")
        c_sq = 1/3 
        C( f, wi*((u %*% t(U))*( 1/ c_sq) + ((u %*% t(U)) * (u %*% t(U)))*(1/(c_sq*c_sq*2)) - sum(u*u)*(1/(c_sq*2)) + 1)*d)
?>
}

CudaDeviceFunction void Init() {
	w = 1;
	real_t u[2] = {Velocity,0.};
	real_t d = 1.0;
	SetEquilibrum(d,u);
}

CudaDeviceFunction float2 Color() {
        float2 ret;
        vector_t u = getU();
        ret.x = sqrt(u.x*u.x + u.y*u.y);
//	ret.x=wb;
//        if (NodeType == NODE_Solid){
//                ret.y = 0;
//        } else {
//                ret.y = 1;
//        }
	ret.y=w;
        return ret;
}

CudaDeviceFunction void CollisionMRT()
{
	real_t u[2], usq, d, R[6], Q, tau, omega, ux, tp;
<?R
        R = PV(c(
		"d",
		paste("u[",1:2-1,"]",sep=""),
		paste("R[",1:6-1,"]",sep="")
	))
        Sy = c(
		PV(c(0,0,0)),
		PV(paste("S",c(2,3,5,7,8,9),"",sep=""))
	)

M = matrix(c(
      1,  1,  1,  1,  1,  1,  1,  1,  1,
      0,  1,  0, -1,  0,  1, -1, -1,  1,
      0,  0,  1,  0, -1,  1,  1, -1, -1,
     -4, -1, -1, -1, -1,  2,  2,  2,  2,
      4, -2, -2, -2, -2,  1,  1,  1,  1,
      0, -2,  0,  2,  0,  1, -1, -1,  1,
      0,  0, -2,  0,  2,  1,  1, -1, -1,
      0,  1, -1,  1, -1,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  1, -1,  1, -1), 9,9);

C( R, f %*% M );
	d = PV("d");
	dw = d ^(-1 )
	C(usq, sum(u*u)*dw);
	usq = PV("usq")
	u = PV(c("u[0]","u[1]"))
	Req = c(
		d,
		u,
		d*(-2)+usq*3,
		d - usq*3,
		u[1]*(-1),
		u[2]*(-1),
		u[1]*u[1]*dw-u[2]*u[2]*dw,
		u[1]*u[2]*dw
	)
        Sy = PV(paste("S",1:19,"",sep=""))
	selR = c(4,5,6,7,8,9);
#	cr = calcReq[selR]
	Mw = colSums(M**2)
	C( R[selR], (R - Req)[selR])
?>
Q=0;
Q += 2.*R[5]*R[5];
Q += (R[0]*R[0] + 9*R[4]*R[4])/18.;
Q = 18.* sqrt(Q) * Smag;

tau = tau0*tau0 + Q;
tau = sqrt(tau);
tau = (tau + tau0)/2;
omega = 1/tau;


if ((NodeType & NODE_OBJECTIVE) == NODE_Inlet) {
	ux = u[0]/d;
	tp = usq/2+(d-1)/3;
	AddToPressDiff(-d);
	AddToInletPressureIntegral(d);
	AddToTotalPressureFlux(ux*tp);
}
if ((NodeType & NODE_OBJECTIVE) == NODE_Outlet) {
	ux = u[0]/d;
	tp = usq/2.+(d-1)/3.;
	AddToPressDiff(d);
	AddToOutletFlux(ux);
	AddToTotalPressureFlux(ux*tp);
}
u[0] = u[0]*w;
u[1] = u[1]*w;
//u[0]=u[0]+0.001;
<?R
	C(usq, sum(u*u)*dw);
for (i in selR) {
?>	<?%s ToC(R[i]) ?> = (1.-<?%s ToC(Sy[i]) ?>)*<?%s ToC(R[i]) ?> + (<?%s ToC(Req[i]) ?>);
<?R
}
for (i in 1:length(R)) {
?>	<?%s ToC(R[i]) ?> /= <?%f Mw[i] ?>;
<?R
}
   C( f, R %*% t(M) , float=F);

?>
}


CudaDeviceFunction real_t getQ()
{
	real_t u[2], usq, d, R[6];
<?R
	C( R, f %*% M );
	C(usq, sum(u*u)*dw);
	C( R[selR], (R - Req)[selR])
?>
real_t Q=0;
Q += 2.*R[5]*R[5];
Q += (R[0]*R[0] + 9.*R[4]*R[4])/18.;
real_t tau = tau0*tau0 + Q;
tau = sqrt(tau);
tau = (tau + tau0)/2;
real_t omega = 1/tau;
return omega;
}
