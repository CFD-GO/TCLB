<?R
	source("conf.R") 
    source("lib/boundary.R")
    source("lib/feq.R")
#	load("SUMMARY.Rdata")
	c_header();
	U = as.matrix(Density[,c("dx","dy")])


	EQ = MRT_eq(U, ortogonal=FALSE)
    wi = subst(EQ$Req, Jx=0, Jy=0, Jz=0)
    wi = subst(wi, rho=1)
    wi = gapply(wi,function(x) x$.M, simplify=TRUE)
    wi = wi %*% solve(EQ$mat)
	wi = as.vector(wi)

	W = solve(EQ$mat) %*% diag(1/wi) %*% solve(t(EQ$mat))
	i = rev(1:nrow(W))
	H = chol(W[i,i])[i,i]
	H = H * c(1,sqrt(3)/3,sqrt(3)/3,sqrt(2),sqrt(2),1,sqrt(6)/3,sqrt(6)/3,2)
	B = EQ$mat %*% t(H)


#u = PV("u[",1:2-1,"]")
	uf = PV("uf")
	d = PV("d")
	usq = PV("usq")
	omega = PV("omega")
   	c_squ = 1/3
	tn = diag(wi)

	f = PV(Density$name) 
	f_clean = PV(Density$name) 

	c_sq = 1/3
	
    drho = PV("drho")
    u = PV(c("u.x","u.y"))

	Feq = function( d, u ) {
       wi*((u %*% t(U))*( 1/ c_sq) + ((u %*% t(U)) * (u %*% t(U)))*(1/(c_sq*c_sq*2)) - sum(u*u)*(1/(c_sq*2)) + d)
    }        

	EQ = MRT_eq(U, mat=B)

    feq0 = Feq(drho,u) 
    EQ$feq = Feq(drho,u)
    EQ$Req = Feq(drho,u) %*% EQ$mat

?>


CudaDeviceFunction real_t getRho(){
	return <?R C(sum(f_clean)) ?> ;
}
    
CudaDeviceFunction vector_t getU(){
//	real_t d = <?R C(sum(f)) ?>;
	vector_t u;
<?R C(PV(c("u.x","u.y")), f %*% U) ?>
//	u.x /= d;
//	u.y /= d;
    u.x += GravitationX*0.5;
    u.y += GravitationY*0.5;
	u.z = 0.0;
	return u;
}

CudaDeviceFunction float2 Color() {
        float2 ret;
        vector_t u = getU();
        ret.x = sqrt(u.x*u.x + u.y*u.y);
        if (NodeType == NODE_Solid){
                ret.y = 0;
        } else {
                ret.y = 1;
        }
        return ret;
}

CudaDeviceFunction void SymmetryTop()
{
// *******************
// Symmetry BC for TOP WALL
// *******************    
<?R
  reflect_to =  c(4,7,8) + 1;
  reflect_from = c(2,6,5) + 1;
  for (i in 1:3)
  {
	C( f_clean[reflect_to[i]], f_clean[reflect_from[i]] )
  }
?>
}

CudaDeviceFunction void SymmetryBottom()
{
// *******************
// Symmetry BC for BOTTOM WALL
// *******************    
<?R
  reflect_from =  c(4,7,8) + 1;
  reflect_to = c(2,6,5) + 1;
  for (i in 1:3)
  {
	C( f_clean[reflect_to[i]], f_clean[reflect_from[i]] )
  }
?>
}





CudaDeviceFunction void SetEquilibrum(real_t drho, real_t ub[2])
{
    vector_t u;
<?R
    C(u,PV(c("ub[1]","ub[2]")))
    C( f_clean, f_clean - f + EQ$feq )
?>
}

CudaDeviceFunction void Init() {
	real_t u[2] = {Velocity,0.};
	real_t d = Density;
	SetEquilibrum(d,u);
}

CudaDeviceFunction void Run() {
    switch (NodeType & NODE_BOUNDARY) {
	case NODE_Solid:
	case NODE_Wall:
		BounceBack();
		break;
	case NODE_EVelocity:
		EVelocity();
		break;
	case NODE_WPressure:
		WPressure();
		break;
	case NODE_WVelocity:
		WVelocity();
		break;
	case NODE_EPressure:
		EPressure();
		break;
	case NODE_TopSymmetry:
		SymmetryTop();
		break;
	case NODE_BottomSymmetry:
		SymmetryBottom();
		break;
    }
    if (NodeType & NODE_MRT)
    {
		CollisionMRT();
    }
}

CudaDeviceFunction void BounceBack()
{
<?R FullBounceBack() ?>
}

CudaDeviceFunction void EVelocity()
{
vector_t u;
<?R 
#ZouHeNew(EQ,f, 1, -1, 1,  known="ux") 
?>
}

CudaDeviceFunction void WPressure()
{
double drho = Density;
vector_t u;


<?R ZouHeNew(EQ,f, 1, 1, 1,  known="drho") ?>
}

CudaDeviceFunction void WVelocity()
{
double ux = Velocity;
<?R 
#ZouHeNew(EQ,f, 1, 1, 1, known="ux") 
?>
}

CudaDeviceFunction void EPressure()
{
double drho = Density;
vector_t u;

<?R ZouHeNew(EQ,f, 1, -1, 1,  known="drho") ?> 
}

CudaDeviceFunction void CollisionMRT()
{
	real_t M[9];
	real_t drho, usq;
    vector_t u;

<?R
    

        
        R = PV("M[",1:9-1,"]")
        drho = PV("drho") 
#        OMEGA = c(
#		PV(rep(0,3)),
#		PV(rep("omega2",4)),
#		PV(rep("omega",2))
#	)
#        OMEGA = PV("S",1:9-1,"")
    OMEGA = PV(c(0,0,0, "S3", "S4", "S56", "S56", "S78", "S78"))
#	M = EQ$mat;
	M = matrix(c(
	      1,  1,  1,  1,  1,  1,  1,  1,  1,
	      0,  1,  0, -1,  0,  1, -1, -1,  1,
	      0,  0,  1,  0, -1,  1,  1, -1, -1,
	     -4, -1, -1, -1, -1,  2,  2,  2,  2,
	      4, -2, -2, -2, -2,  1,  1,  1,  1,
	      0, -2,  0,  2,  0,  1, -1, -1,  1,
	      0,  0, -2,  0,  2,  1,  1, -1, -1,
	      0,  1, -1,  1, -1,  0,  0,  0,  0,
	      0,  0,  0,  0,  0,  1, -1,  1, -1), 9,9);

    C( drho, sum(f) )    
#	C( drho, sum(f)-1 )
	C( u, f %*% U  )
?>
    

switch (NodeType & NODE_OBJECTIVE) {
case NODE_Outlet:
    <?R 
        usq=PV('usq')
        C(usq,sum(u%*%u))
    ?>
	AddToOutletFlux(u.x);
	AddToPressureLoss(-u.x*(drho/3. + usq/2.));
	break;
case NODE_Inlet:
    <?R
        usq=PV('usq')
        C(usq,sum(u%*%u))
    ?>



	AddToInletFlux(u.x);
	AddToPressureLoss(u.x*((drho)/3. + usq/2.));
	break;
}


//	real_t omega = 1.0-1.0/(3*nu + 0.5);
//	real_t omega2 = omega;
<?R
	C( R, (f-EQ$feq) %*% M * OMEGA );
?>
    u.x = u.x + GravitationX ;
    u.y = u.y + GravitationY ; 
    
<?R
	C( R, R + EQ$feq %*% M);
	C( R, R * (1/ diag(t(M) %*% M)));
C( f_clean, f_clean - f +  R %*% t(M) );
#C(f,f+(1+OMEGA[8])*( feq0-f  ) )
?>

}




