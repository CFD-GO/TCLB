<?R
	source("conf.R") 
#	load("SUMMARY.Rdata")
	c_header();
#	f = PV(Density[Density$group=='f']$name)
#	U = as.matrix(Density[Density$group=='f',c("dx","dy")])
    U = as.matrix(Density[Density$group=="f",c("dx","dy")])
    f  = PV(Density$name[Density$group=="f"])
	u = PV("u[",1:2-1,"]")
	uf = PV("uf")
	d = PV("d")
	usq = PV("usq")
	omega = PV("omega")
        uf1 = uf;
        uf2 = uf;
        uf3 = uf;
	t1 = 4/9
	t2 = 1/9
	t3 = 1/36
	c_squ = 1/3
	wi = c(t1,t2,t2,t2,t2,t3,t3,t3,t3)
	tn = diag(wi)
	bounce = c(0,3,4,1,2,7,8,5,6)

	c_sq = 1/3
	
	Feq = function( d = PV("d"), u = PV("u[",1:2-1,"]") ) {
          wi*((u %*% t(U))*( 1/ c_sq) + ((u %*% t(U)) * (u %*% t(U)))*(1/(c_sq*c_sq*2)) - sum(u*u)*(1/(c_sq*2)) + 1)*d
        }
?>


CudaDeviceFunction real_t getRho(){
	return <?R C(sum(f)) ?> ;
}
    
CudaDeviceFunction vector_t getU(){
	real_t d = <?R C(sum(f)) ?>;
	vector_t u;
<?R C(PV(c("u.x","u.y")), f %*% U) ?>
    u.x /= d;
	u.y /= d;
<?R if ( any( DensityAll$group=="BC" ) ) { ?>
    u.x += BC[0]*0.5;
    u.y += BC[1]*0.5;
<?R } ?>
    u.x += GravitationX*0.5;
    u.y += GravitationY*0.5;
	u.z = 0.0;
	return u;
}

CudaDeviceFunction float2 Color() {
        float2 ret;
        vector_t u = getU();
        ret.x = sqrt(u.x*u.x + u.y*u.y);
        if (NodeType == NODE_Solid){
                ret.y = 0;
        } else {
                ret.y = 1;
        }
        return ret;
}

CudaDeviceFunction void SymmetryTop()
{
// *******************
// Symmetry BC for TOP WALL
// *******************    
<?R
  reflect_to =  c(4,7,8) + 1;
  reflect_from = c(2,6,5) + 1;
  for (i in 1:3)
  {
	C( f[reflect_to[i]], f[reflect_from[i]] )
  }
?>
}

CudaDeviceFunction void SymmetryBottom()
{
// *******************
// Symmetry BC for BOTTOM WALL
// *******************    
<?R
  reflect_from =  c(4,7,8) + 1;
  reflect_to = c(2,6,5) + 1;
  for (i in 1:3)
  {
	C( f[reflect_to[i]], f[reflect_from[i]] )
  }
?>
}





CudaDeviceFunction void SetEquilibrum(real_t d, real_t u[2])
{
<?R
	u = PV("u[",1:2-1,"]")
	d = PV("d")
	c_sq = 1/3
        C( f, wi*((u %*% t(U))*( 1/ c_sq) + ((u %*% t(U)) * (u %*% t(U)))*(1/(c_sq*c_sq*2)) - sum(u*u)*(1/(c_sq*2)) + 1)*d)
?>
}

CudaDeviceFunction void Init() {
	real_t u[2] = {Velocity,0.};
	real_t d = Density;
	SetEquilibrum(d,u);
<?R if ( any( DensityAll$group=="BC" ) ) { ?>
   BC[0] = 0;
   BC[1] = 0;
<?R } ?>


}

CudaDeviceFunction void Run() {
    switch (NodeType & NODE_BOUNDARY) {
	case NODE_Solid:
	case NODE_Wall:
		BounceBack();
		break;
	case NODE_EVelocity:
		EVelocity();
		break;
	case NODE_WPressure:
		WPressure();
		break;
	case NODE_WVelocity:
		WVelocity();
		break;
	case NODE_EPressure:
		EPressure();
		break;
	case NODE_TopSymmetry:
		SymmetryTop();
		break;
	case NODE_BottomSymmetry:
		SymmetryBottom();
		break;
    }
    if (NodeType & NODE_MRT)
    {
		CollisionMRT();
    }
}

CudaDeviceFunction void BounceBack()
{
     real_t uf;
<?R
  V = cbind(1:9, bounce+1)
  sel = V[,1] > V[,2]
  V = V[sel,]
  for (i in 1:nrow(V))
  {
	C(uf, f[V[i,1]])
        C(f[V[i,1]], f[V[i,2]])
        C(f[V[i,2]], uf)
	
   }
?>
}

CudaDeviceFunction void EVelocity()
{
        real_t rho, ru;
	real_t ux0 = Velocity;
	rho = ( f[0] + f[2] + f[4] + 2.*(f[1] + f[5] + f[8]) ) / (1. + ux0);
	ru = rho * ux0;
	f[3] = f[1] - (2./3.) * ru;
	f[7] = f[5] - (1./6.) * ru + (1./2.)*(f[2] - f[4]);
	f[6] = f[8] - (1./6.) * ru + (1./2.)*(f[4] - f[2]);
}

CudaDeviceFunction void WPressure()
{
        real_t ru, ux0;
	real_t rho = Density;
	ux0 = -1. + ( f[0] + f[2] + f[4] + 2.*(f[3] + f[7] + f[6]) ) / rho;
	ru = rho * ux0;

	f[1] = f[3] - (2./3.) * ru;
	f[5] = f[7] - (1./6.) * ru + (1./2.)*(f[4] - f[2]);
	f[8] = f[6] - (1./6.) * ru + (1./2.)*(f[2] - f[4]);
}

CudaDeviceFunction void WVelocity()
{
        real_t rho, ru;
	real_t u[2] = {Velocity,0.};
	rho = ( f[0] + f[2] + f[4] + 2.*(f[3] + f[7] + f[6]) ) / (1. - u[0]);
	ru = rho * u[0];
	f[1] = f[3] + (2./3.) * ru;
	f[5] = f[7] + (1./6.) * ru + (1./2.)*(f[4] - f[2]);
	f[8] = f[6] + (1./6.) * ru + (1./2.)*(f[2] - f[4]);
}

CudaDeviceFunction void EPressure()
{
        real_t ru, ux0;
	real_t rho = Density;
	ux0 = -1. + ( f[0] + f[2] + f[4] + 2.*(f[1] + f[5] + f[8]) ) / rho;
	ru = rho * ux0;

	f[3] = f[1] - (2./3.) * ru;
	f[7] = f[5] - (1./6.) * ru + (1./2.)*(f[2] - f[4]);
	f[6] = f[8] - (1./6.) * ru + (1./2.)*(f[4] - f[2]);
}

CudaDeviceFunction void CollisionMRT()
{
	real_t M[9];
	real_t rho, ux, uy, usq;
    
<?R
# Calculating equlibrium density set
    	source("lib/feq.R")
        rho = PV("rho")
        u = PV(c("ux","uy"))
        feq = MRT_feq(U, rho, u*rho );
        R = PV("M[",1:9-1,"]")
#        OMEGA = c(
#		PV(rep(0,3)),
#		PV(rep("omega2",4)),
#		PV(rep("omega",2))
#	)
#        OMEGA = PV("S",1:9-1,"")
    OMEGA = PV(c(0,0,0, "S3", "S4", "S56", "S56", "S78", "S78"))
	M = matrix(c(
	      1,  1,  1,  1,  1,  1,  1,  1,  1,
	      0,  1,  0, -1,  0,  1, -1, -1,  1,
	      0,  0,  1,  0, -1,  1,  1, -1, -1,
	     -4, -1, -1, -1, -1,  2,  2,  2,  2,
	      4, -2, -2, -2, -2,  1,  1,  1,  1,
	      0, -2,  0,  2,  0,  1, -1, -1,  1,
	      0,  0, -2,  0,  2,  1,  1, -1, -1,
	      0,  1, -1,  1, -1,  0,  0,  0,  0,
	      0,  0,  0,  0,  0,  1, -1,  1, -1), 9,9);

	C( rho, sum(f) )
	C( u, f %*% U * ( rho^(-1) ) )
?>
    

switch (NodeType & NODE_OBJECTIVE) {
case NODE_Outlet:
    <?R 
        usq=PV('usq')
        C(usq,sum(u%*%u))
    ?>
	AddToOutletFlux(ux/rho);
	AddToPressureLoss(-ux/rho*((rho-1.)/3. + usq/rho/2.));
	break;
case NODE_Inlet:
    <?R
        usq=PV('usq')
        C(usq,sum(u%*%u))
    ?>



	AddToInletFlux(ux/rho);
	AddToPressureLoss(ux/rho*((rho-1.)/3. + usq/rho/2.));
	break;
}


//	real_t omega = 1.0-1.0/(3*nu + 0.5);
//	real_t omega2 = omega;
<?R
	C( R, (f-feq) %*% M * OMEGA );
?>
  
<?R if ( any( DensityAll$group=="BC" ) ) { ?>
    ux = ux + GravitationX +  BC[0] ;
    uy = uy + GravitationY +  BC[1] ; 
<?R } else { ?>
    ux = ux + GravitationX;
    uy = uy + GravitationY; 
<?R } ?>



<?R
	C( R, R + feq %*% M);
	C( R, R * (1/ diag(t(M) %*% M)));
	C( f, R %*% t(M) );
?>

}




