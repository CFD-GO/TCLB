
#define S2 1.3333
#define S3 1.0
#define S5 1.0
#define S7 1.0
#define S8 omega
#define S9 omega

<?R 
	source("conf.R") 


	u = PV(paste("u[",1:2-1,"]",sep=""))
	uf = PV("uf")
	d = PV("d")
	usq = PV("usq")
	omega = PV("omega")
        uf1 = uf;
        uf2 = uf;
        uf3 = uf;
#	omega = 1.0

	fT = PV(Density$name[1:9+9])



t1 = 4/9
t2 = 1/9
t3 = 1/36
c_squ = 1/3

tn = diag(c(t1,t2,t2,t2,t2,t3,t3,t3,t3))
bounce = c(0,3,4,1,2,7,8,5,6)

?>

CudaDeviceFunction type_f getRho(){
	return <?R C(sum(f)) ?> ;
}

CudaDeviceFunction type_f getT(){
	return <?R C(sum(fT)) ?> ;
}
    
CudaDeviceFunction type_v getU(){
	type_f d = <?R C(sum(f)) ?>;
	type_v u;
<?R C(PV(c("u.x","u.y")) == f %% U) ?>
//	u.x /= d;
//	u.y /= d;
	u.z = 0.0;
	return u;
}

CudaDeviceFunction float2 Color() {
        float2 ret;
//        type_v u = getU();
//        ret.x = sqrt(u.x*u.x + u.y*u.y);

	ret.x = (<?R C(sum(fT)) ?>);
	ret.x = ret.x/111;
//	ret.x = wb;
	if (NodeType == NODE_Solid) ret.y = 0; else ret.y= 1;
        return ret;
}


CudaDeviceFunction void BounceBack()
{
     type_f uf;
     #define dump 1
<?R
  V = cbind(1:9, bounce+1)
  sel = V[,1] > V[,2]
  V = V[sel,]
  for (i in 1:nrow(V))
  {
	w = list(
           uf==f[V[i,1]],
           f[V[i,1]]==f[V[i,2]],
           f[V[i,2]]==uf
	)
	for (h in w) C(h)
	w = list(
           uf==fT[V[i,1]],
           fT[V[i,1]]==fT[V[i,2]]*PV("dump"),
           fT[V[i,2]]==uf*PV("dump")
	)
	for (h in w) C(h)
   }
?>
}

// 0 1 2 3 4 5 6 7 8
// 1 5 2 6 3 7 4 8 0

CudaDeviceFunction void EVelocity()
{
     type_f rho, ru;
	const type_f ux0 = InletVelocity;
	rho = ( f[0] + f[2] + f[4] + 2.*(f[1] + f[5] + f[8]) ) / (1. + ux0);
	ru = rho * ux0;
	f[3] = f[1] - (2./3.) * ru;
	f[7] = f[5] - (1./6.) * ru + (1./2.)*(f[2] - f[4]);
	f[6] = f[8] - (1./6.) * ru + (1./2.)*(f[4] - f[2]);
}

CudaDeviceFunction void WPressure()
{
     type_f ru, ux0;
	type_f rho = InletDensity;
	ux0 = -1. + ( f[0] + f[2] + f[4] + 2.*(f[3] + f[7] + f[6]) ) / rho;
	ru = rho * ux0;

	f[1] = f[3] - (2./3.) * ru;
	f[5] = f[7] - (1./6.) * ru + (1./2.)*(f[4] - f[2]);
	f[8] = f[6] - (1./6.) * ru + (1./2.)*(f[2] - f[4]);
	#define rho_bar (InletTemperature)
	rho = 6.*( rho_bar - (T[0] + T[2] + T[4] + T[3] + T[7] + T[6]) );
	T[1] = (1./9.) * rho;
	T[5] = (1./36.) * rho;
	T[8] = (1./36.) * rho;
}

CudaDeviceFunction void eqWVelocity()
{
     type_f rho;
	const type_f u[2] = {InletVelocity,0.};
	rho = ( f[0] + f[2] + f[4] + 2.*(f[3] + f[7] + f[6]) ) / (1. - u[0]);
	SetEquilibrum(rho,u);
}

CudaDeviceFunction void WVelocity()
{
     type_f rho, ru;
	const type_f u[2] = {InletVelocity,0.};
	rho = ( f[0] + f[2] + f[4] + 2.*(f[3] + f[7] + f[6]) ) / (1. - u[0]);
	ru = rho * u[0];
	f[1] = f[3] + (2./3.) * ru;
	f[5] = f[7] + (1./6.) * ru + (1./2.)*(f[4] - f[2]);
	f[8] = f[6] + (1./6.) * ru + (1./2.)*(f[2] - f[4]);
#define rho_bar (InletTemperature)
	rho = 6.*( rho_bar - (T[0] + T[2] + T[4] + T[3] + T[7] + T[6]) );
	T[1] = (1./9.) * rho;
	T[5] = (1./36.) * rho;
	T[8] = (1./36.) * rho;

}

CudaDeviceFunction void EPressure()
{
     type_f ru, ux0;
	type_f rho = 1.0;
	ux0 = -1. + ( f[0] + f[2] + f[4] + 2.*(f[1] + f[5] + f[8]) ) / rho;
	ru = rho * ux0;

	f[3] = f[1] - (2./3.) * ru;
	f[7] = f[5] - (1./6.) * ru + (1./2.)*(f[2] - f[4]);
	f[6] = f[8] - (1./6.) * ru + (1./2.)*(f[4] - f[2]);

	rho = 6.*( T[1] + T[5] + T[8] );///(1-3*ux0);
	T[3] = (1./ 9.) * rho;
	T[7] = (1./36.) * rho;
	T[6] = (1./36.) * rho;
}

CudaDeviceFunction void Run() {
    switch (NodeType & NODE_BOUNDARY) {
	case NODE_Solid:
	case NODE_Wall:
		BounceBack();
		break;
	case NODE_EVelocity:
		EVelocity();
		break;
	case NODE_WPressure:
		WPressure();
		break;
	case NODE_WVelocity:
		WVelocity();
		break;
	case NODE_EPressure:
		EPressure();
		break;
    }
    if ((NodeType & NODE_MRT))
    {
		CollisionMRT();
    }
}

CudaDeviceFunction void SetEquilibrum(const type_f d, const type_f u[2])
{	type_f usq, uf;
<?R C(usq == sum(u*u)*(1/c_squ)) ?>
<?R
	for (i in 1:9) {
         cat("//--",i,"-------------------------------------------------\n")
         w2 = list(
                 uf1 == (u %% t(U) * (1/c_squ))[i],
                 uf2 == uf1 + (uf1*uf1+usq*(-1))*0.5 + 1,
                 uf3 == d * uf2,
                 f[i] == uf3 * tn[i,i]
         )
         for (h in w2) C(h)
        }
?>

}

CudaDeviceFunction void Init() {
	type_f u[2] = {InletVelocity,0.};
	type_f d = 1.0;
	SetEquilibrum(d,u);
//	for (int i =0; i<9;i++) T[i] = 0;
	<?R for (i in 1:9) { ?>
		T[<?%d i-1 ?>] = InitTemperature*<?%f tn[i,i] ?>;
	<?R }?>
}


CudaDeviceFunction void CollisionMRT()
{
	type_f u[2], usq, d, R[6], uf;
<?R
        R = PV(c(
		"d",
		paste("u[",1:2-1,"]",sep=""),
		paste("R[",1:6-1,"]",sep="")
	))
        Sy = rbind(
		PV(c(0,0,0)),
		PV(paste("S",c(2,3,5,7,8,9),"",sep=""))
	)

M = matrix(c(
      1,  1,  1,  1,  1,  1,  1,  1,  1,
      0,  1,  0, -1,  0,  1, -1, -1,  1,
      0,  0,  1,  0, -1,  1,  1, -1, -1,
     -4, -1, -1, -1, -1,  2,  2,  2,  2,
      4, -2, -2, -2, -2,  1,  1,  1,  1,
      0, -2,  0,  2,  0,  1, -1, -1,  1,
      0,  0, -2,  0,  2,  1,  1, -1, -1,
      0,  1, -1,  1, -1,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  1, -1,  1, -1), 9,9);


	C( R == f %% M );
	C( usq == sum(u*u) );
?>

R[0] = R[0]*(1-S2)  +  S2*(-2. * d + 3. * usq);
R[1] = R[1]*(1-S3)  +  S3*(d - 3.*usq);
R[2] = R[2]*(1-S5)  +  S5*(-u[0]);
R[3] = R[3]*(1-S7)  +  S7*(-u[1]);
R[4] = R[4]*(1-S8)  +  S8*(u[0]*u[0] - u[1]*u[1]);
R[5] = R[5]*(1-S9)  +  S9*(u[0]*u[1]);

<?R
	C( f == R %% solve(M) );
?>
type_f us[2];
	us[0] = u[0] / d;
	us[1] = u[1] / d;
<?R
	C( R == fT %% M );
?>
	if ((NodeType & NODE_ADDITIONALS) == NODE_Heater) d=100;

#define Tom omegaT
#define Tom2 omegaT

type_f omegaT = FluidAlfa;
omegaT = 1.0/(3*omegaT + 0.5);
R[0] = R[0]*(1-Tom2) + (-2*d)*Tom2;
R[1] = R[1]*(1-Tom2) + (d)*Tom2;
R[2] = R[2]*(1-Tom2) + (-us[0]*d)*Tom2;
R[3] = R[3]*(1-Tom2) + (-us[1]*d)*Tom2;
R[4] = R[4]*(1-Tom);
R[5] = R[5]*(1-Tom);
u[0] = u[0]*(1-Tom2) + (us[0]*d)*Tom2;
u[1] = u[1]*(1-Tom2) + (us[1]*d)*Tom2;

<?R
	C( fT == R %% solve(M) );
?>

    if ((NodeType & NODE_OBJECTIVE) == NODE_Outlet) AddToObjective(d*us[0]);

}


