<?R
	source("conf.R");
	c_header()
?>
/** \file LatticeContainer.h
  File defining LatticeContainer and some additional CUDA functions
*/
#include "SyntheticTurbulence.h"
#include "SolidContainer.h"

#ifndef SETTINGS_H
<?R
	for (v in rows(Settings)) { ?>
    CudaExternConstantMemory(real_t <?%s v$name ?>); <?R
	} ?>
    void initSettings();
    void setConstSetting(int i, real_t tmp);

#define SETTINGS_H 1
#endif


#ifndef LATTICECONTAINER_H

#include "Consts.h"

/// Container class used for storing all the data needed on GPU
/**
  Main class for storing the data needed on GPU and running kernels.
  LatticeContainer is the container class which
  owns all the data needed by the kernels on device
  like pointers to the global gpu memory etc.
  It defines push/pop functions allowing access
  to node data stored in memory.
*/
class LatticeContainer {
	public:
  FTabs in; ///< Main FTabs used for Primal iteration as input
  FTabs out; ///< Main FTabs used for Primal iteration as output
#ifdef ADJOINT
  FTabs adjout; ///< FTabs used for Adjoint iteration as output
  FTabs adjin; ///< FTabs used for Adjoint iteration as input
#endif
  flag_t * NodeType; ///< Table of flags/NodeTypes of all the nodes
  cut_t* Q; 
  size_t particle_data_size;
  real_t* particle_data;
  solidcontainer_t::finder_t solidfinder;
  real_t * Globals; ///< Pointer to the GPU table to store the calculated values of Globals
  int nx, ny, nz; ///< Size of the Lattice region
  int iter; ///< Iteration number
  real_t px,py,pz;
  int reset_iter; //< number of last average reset,for dynamics 
  int ZoneIndex;
  int MaxZones;
  real_t** ZoneSettings;
  real_t* ConstZoneSettings;
  STWaveSet ST;
  void Alloc (int,int,int);
  void Free();
  void ActivateCuts();
  CudaDeviceFunction void fill();
  
  CudaDeviceFunction flag_t getType(int x, int y, int z) const { return NodeType[(x + nx*(y + ny*z))]; }

  CudaDeviceFunction inline const real_t ZoneSetting(const int & s, const int & z) {
    const int i = s + ZONESETTINGS * z;
    const real_t * w = ZoneSettings[i];
    if (w == NULL) return ConstZoneSettings[i];
    return w[ZoneIndex];
  }

  CudaDeviceFunction inline const real_t ZoneSetting_DT(const int & s, const int & z) {
    const int i = s + ZONESETTINGS * z;
    const real_t * w = ZoneSettings[i + DT_OFFSET];
    if (w == NULL) return 0;
    return w[ZoneIndex];
  }

  CudaDeviceFunction inline real_t * ZoneSettingGrad(const int & s, const int & z) {
    const int i = s + ZONESETTINGS * z;
    real_t * w = ZoneSettings[i + GRAD_OFFSET];
    if (w == NULL) return & ConstZoneSettings[i + GRAD_OFFSET];
    return & w[ZoneIndex];
  }

  CudaDeviceFunction inline vector_t getST(real_t x, real_t y, real_t z) {
	return calc(ST, x,y,z);
  }

  void Color( uchar4 *optr );
  template<class N> inline void RunBorderT(CudaStream_t);
  template<class N> inline void RunInteriorT(CudaStream_t);
  template < eOperationType I, eCalculateGlobals G, eStage S > void RunBorder(CudaStream_t);
  template < eOperationType I, eCalculateGlobals G, eStage S > void RunInterior(CudaStream_t);

  void CopyToConst();

  inline void clearGlobals() {
        CudaMemset(Globals, 0, GLOBALS*sizeof(real_t));
  }

  <?R for (v in rows(Globals)) { ?>
/// Get [<?%s v$comment ?>] from GPU memory
        inline real_t get<?%s v$name ?>(){
                real_t ret;
                CudaMemcpy(&ret, &Globals[<?%s v$Index ?>],sizeof(real_t),CudaMemcpyDeviceToHost);
                return ret;
        }
  <?R } ?>
/// Get all the globals from GPU memory
	inline void getGlobals(real_t * tab) {
                CudaMemcpy(tab, Globals, GLOBALS * sizeof(real_t), CudaMemcpyDeviceToHost);
	}
};

template<class T> CudaGlobalFunction void Kernel();
template < eOperationType I, eCalculateGlobals G, eStage S > class InteriorExecutor;
template < eOperationType I, eCalculateGlobals G, eStage S > class BorderExecutor;

<?R
for (q in rows(Quantities)) { ifdef(q$adjoint);
        if (q$adjoint) {
          node = "Node_Adj"
        } else {
          node = "Node"
        }
?>
CudaGlobalFunction void get<?%s q$name ?>(lbRegion r, <?%s q$type ?> * tab, real_t scale); <?R
	for (tp in c("float","double"))
        { ?>
CudaGlobalFunction void get<?%s q$name ?>_<?%s tp ?>(lbRegion , <?%s tp ?> *, int);
<?R
	}
}
ifdef() ?>

void * BAlloc(size_t size);
void BPreAlloc(void **, size_t size);

static_assert(std::is_trivially_copyable<LatticeContainer>::value, "LatticeContainer must be trivially copyable");

#endif
#define LATTICECONTAINER_H 1
