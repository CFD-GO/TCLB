<?R
        source("conf.R")
	c_header();
?>

#include "pugixml.hpp"
#include "Global.h"
#include <mpi.h>
#ifdef GRAPHICS
	#include "gpu_anim.h"
#endif
#include "cross.h"
#include "Region.h"
#include "Node.h"
#include "LatticeContainer.h"
#include "Lattice.h"
#include "vtkLattice.h"
#include "Geometry.h"
#include "def.h"
#include "utils.h"
#include "unit.h"

#include <fstream>
#include <iostream>
#include <vector>
#include <iomanip>
#include <assert.h>
#include "Handlers.h"

#ifdef GRAPHICS
    const int desired_fps = 10;
#else
    const int desired_fps = 1;
#endif

using namespace std;

struct InfoBlock {
	char conffile[STRING_LEN];
	lbRegion region;
        lbRegion fileregion; // Size of input mesh
        char filename[STRING_LEN],fileformat[STRING_LEN];// Input file name and format
<?R
        for (i in 1:nrow(Settings)) { v = Settings[i,]; ?>
	real_t setting_<?%s v$name ?>;
	int ifset_<?%s v$name ?>; <?R
	}
?>
	int xsdim,ysdim;
        char wall; // Wall flat. 1-walls at top and bottom, 0- no wals, periodic boundary cond.
        flag_t collision_model; // Collision model (NODE_*)
	flag_t inlet_type;
        int MaxIter;
        char outpath[STRING_LEN];
	int        dataline_iter;
	int        vtk_iter;
	int mean_iter;
	int mean_margin;
	int lower_iter;
	int lower_iter_max;
	real_t lower_nu;
};

class Solver {
    public:
	InfoBlock info;
	MPIInfo mpi;
	MPI_Comm mpi_comm;
        CudaEvent_t     start, stop; // CUDA events
        Lattice * lattice; // Main lattice object
	lbRegion region;
        int iter; // Iteration Number
	ofstream * dataline_file;
	int LogIter;
	int solIter;
	int mpi_rank;
	int mpi_size;
	pugi::xml_node config, geom, mod, sol;
	pugi::xml_document configfile;
	std::vector<Handler> hands;
	int steps;
	int saveN, saveI;
	char ** saveFile;
	UnitEnv units;
	double LogScales[<?%d nrow(Globals) ?> + <?%d nrow(Settings) ?> + <?%d nrow(Scales) ?>];
	inline Solver() : mpi_comm(MPI_COMM_WORLD) { Init(); };
	inline Solver(MPI_Comm mpi_comm_) : mpi_comm(mpi_comm_) { Init(); };
	void Init();
	void saveInit(int n);
        inline void setWidth(int &w){region.nx = w;};
        inline void setHeight(int &h){region.ny = h;};
        inline int getWidth(){return region.nx;};
        inline int getHeight(){return region.ny;};
        inline void outIterFile(const char * name, const char * suffix, char * out) {
                sprintf(out, "%s_%s_P%02d_%08d%s", info.outpath, name, mpi_rank, iter, suffix);
        };
        inline void outGlobalFile(const char * name, const char * suffix, char * out) {
                sprintf(out, "%s_%s_P%02d%s", info.outpath, name, mpi_rank, suffix);
        };

	void setOutput(const char * out);
 	void loadParams(pugi::xml_node set);
	void setUnit(std::string, std::string, std::string);
	void Gauge();
	int Iterations(pugi::xml_node sol);
        void loadSolve(pugi::xml_node nsol);
	void setSteps(int mdl);
	int initLog(const char * filename);
	int writeLog(const char * filename);
	int writeVTK(const char * nm);
	int readConf(char * filename);
	int loadSize();
	int setSize(int,int,int);
	int MPIDivision();
	int InitAll();
	int RunMainLoop();
};   

