<?R
	source("conf.R")
	c_header();


# Creating variables for symbolic computations
	f = PV(DensityAll$name[DensityAll$group=="f"])
	g = PV(DensityAll$name[DensityAll$group=="g"])
	h = PV(DensityAll$name[DensityAll$group=="h"])
	rho =  PV("rho")
	u = PV(c("ux","uy"))
	rhoT = PV("rhoT")
	C = PV("C")
	tmp = PV("tmp")

# Extracting velocity set
	U = as.matrix(DensityAll[DensityAll$group=="f",c("dx","dy")])

# Calculating equlibrium density set
	source("MRT/feq.R")
	feq = MRT_feq(U, rho, u*rho );
	geq = MRT_feq(U, rhoT, u*rhoT );
	heq = MRT_feq(U, C, u*C );
?>

CudaDeviceFunction real_t getRho(){
	return <?R C(sum(f)) ?> ;
}

CudaDeviceFunction real_t getT(){
	return <?R C(sum(g)) ?> ;
}

CudaDeviceFunction real_t getC(){
	return <?R C(sum(h)) ?> ;
}
    
CudaDeviceFunction vector_t getU(){
	real_t d = <?R C(sum(f)) ?>;
	vector_t u;
	<?R C(PV(c("u.x","u.y")), f %*% U) ?>
	u.x /= d;
	u.y /= d;
	u.z = 0.0;
	return u;
}

CudaDeviceFunction float2 Color() {
        float2 ret;
//        vector_t u = getU();
//        ret.x = sqrt(u.x*u.x + u.y*u.y);

	ret.x = (<?R C(sum(g)) ?>);
	ret.x = ret.x/111;
//	ret.x = wb;
	if (NodeType == NODE_Solid) ret.y = 0; else ret.y= 1;
        return ret;
}


CudaDeviceFunction void BounceBack()
{
     real_t tmp;
<?R
by(Density, Density$group, function(D) {
	i = c("dx","dy","dz")
	D1 = D[,c("name",i)]
	D2 = D1
	D2[,i] = -D2[,i]
	D3 = merge(D1,D2,by=i)
	D3$name.x < D3$name.y
	D3 = D3[D3$name.x < D3$name.y,]
	for ( i in seq_len(nrow(D3))) {
		C( tmp, PV(D3$name.x[i]) )
		C( PV(D3$name.x[i]), PV(D3$name.y[i]) )
		C( PV(D3$name.y[i]), tmp )
	}
})
?>
}

// 0 1 2 3 4 5 6 7 8
// 1 5 2 6 3 7 4 8 0

CudaDeviceFunction void EVelocity()
{
     real_t rho, ru;
	const real_t ux0 = Velocity;
	rho = ( f[0] + f[2] + f[4] + 2.*(f[1] + f[5] + f[8]) ) / (1. + ux0);
	ru = rho * ux0;
	f[3] = f[1] - (2./3.) * ru;
	f[7] = f[5] - (1./6.) * ru + (1./2.)*(f[2] - f[4]);
	f[6] = f[8] - (1./6.) * ru + (1./2.)*(f[4] - f[2]);
}

CudaDeviceFunction void WPressure()
{
     real_t ru, ux0;
	real_t rho = 1.0+Pressure/3.0;
	ux0 = -1. + ( f[0] + f[2] + f[4] + 2.*(f[3] + f[7] + f[6]) ) / rho;
	ru = rho * ux0;

	f[1] = f[3] - (2./3.) * ru;
	f[5] = f[7] - (1./6.) * ru + (1./2.)*(f[4] - f[2]);
	f[8] = f[6] - (1./6.) * ru + (1./2.)*(f[2] - f[4]);
	#define rho_bar (Temperature)
	rho = 6.*( rho_bar - (g[0] + g[2] + g[4] + g[3] + g[7] + g[6]) );
	g[1] = (1./9.) * rho;
	g[5] = (1./36.) * rho;
	g[8] = (1./36.) * rho;
	rho = 6.*( Concentration - (h[0] + h[2] + h[4] + h[3] + h[7] + h[6]) );
	h[1] = (1./9.) * rho;
	h[5] = (1./36.) * rho;
	h[8] = (1./36.) * rho;
}


CudaDeviceFunction void WVelocity()
{
     real_t rho, ru;
	const real_t u[2] = {Velocity,0.};
	rho = ( f[0] + f[2] + f[4] + 2.*(f[3] + f[7] + f[6]) ) / (1. - u[0]);
	ru = rho * u[0];
	f[1] = f[3] + (2./3.) * ru;
	f[5] = f[7] + (1./6.) * ru + (1./2.)*(f[4] - f[2]);
	f[8] = f[6] + (1./6.) * ru + (1./2.)*(f[2] - f[4]);
#define rho_bar (Temperature)
	rho = 6.*( rho_bar - (g[0] + g[2] + g[4] + g[3] + g[7] + g[6]) );
	g[1] = (1./9.) * rho;
	g[5] = (1./36.) * rho;
	g[8] = (1./36.) * rho;
	rho = 6.*( Concentration - (h[0] + h[2] + h[4] + h[3] + h[7] + h[6]) );
	h[1] = (1./9.) * rho;
	h[5] = (1./36.) * rho;
	h[8] = (1./36.) * rho;

}

CudaDeviceFunction void EPressure()
{
     real_t ru, ux0;
	real_t rho = 1.0;
	ux0 = -1. + ( f[0] + f[2] + f[4] + 2.*(f[1] + f[5] + f[8]) ) / rho;
	ru = rho * ux0;

	f[3] = f[1] - (2./3.) * ru;
	f[7] = f[5] - (1./6.) * ru + (1./2.)*(f[2] - f[4]);
	f[6] = f[8] - (1./6.) * ru + (1./2.)*(f[4] - f[2]);

	rho = 6.*( g[1] + g[5] + g[8] );///(1-3*ux0);
	g[3] = (1./ 9.) * rho;
	g[7] = (1./36.) * rho;
	g[6] = (1./36.) * rho;
	rho = 6.*( h[1] + h[5] + h[8] );///(1-3*ux0);
	h[3] = (1./ 9.) * rho;
	h[7] = (1./36.) * rho;
	h[6] = (1./36.) * rho;
}

CudaDeviceFunction void Run() {
    switch (NodeType & NODE_BOUNDARY) {
	case NODE_Solid:
	case NODE_Wall:
		BounceBack();
		break;
	case NODE_EVelocity:
		EVelocity();
		break;
	case NODE_WPressure:
		WPressure();
		break;
	case NODE_WVelocity:
		WVelocity();
		break;
	case NODE_EPressure:
		EPressure();
		break;
    }
    if ((NodeType & NODE_MRT))
    {
		CollisionMRT();
    }
}

CudaDeviceFunction void Init() {
	real_t rho, ux, uy, rhoT, C;
	rho = 1.0;
	ux = Velocity;
	uy = 0;
	rhoT = Temperature;
	C = Concentration;
<?R
	C( f, feq );
	C( g, geq );
	C( h, heq );
?>
}


CudaDeviceFunction void CollisionMRT()
{
	real_t M[9];
	real_t rho, ux, uy, rhoT, C;
	real_t ax, ay, Q, dC;
<?R
        R = PV("M[",1:9-1,"]")
        OMEGA = c(
		PV(rep(0,3)),
		PV(rep("omega2",4)),
		PV(rep("omega",2))
	)
        OMEGA_T = PV("omegaT");
	OMEGA_C = PV("omegaC");


	M = matrix(c(
	      1,  1,  1,  1,  1,  1,  1,  1,  1,
	      0,  1,  0, -1,  0,  1, -1, -1,  1,
	      0,  0,  1,  0, -1,  1,  1, -1, -1,
	     -4, -1, -1, -1, -1,  2,  2,  2,  2,
	      4, -2, -2, -2, -2,  1,  1,  1,  1,
	      0, -2,  0,  2,  0,  1, -1, -1,  1,
	      0,  0, -2,  0,  2,  1,  1, -1, -1,
	      0,  1, -1,  1, -1,  0,  0,  0,  0,
	      0,  0,  0,  0,  0,  1, -1,  1, -1), 9,9);

	C( rho, sum(f) )
	C( u, f %*% U * ( rho^(-1) ) )
	C( rhoT, sum(g) )
	C( C, sum(h) )
?>
	ax=0;
	ay=0;
	Q=0;
	if ((NodeType & NODE_ADDITIONALS) == NODE_ForceTemperature) Q = Temperature - rhoT;
	dC=0;
	if ((NodeType & NODE_ADDITIONALS) == NODE_ForceConcentration) dC = Concentration - C;
	real_t omega = 1.0-1.0/(3*nu + 0.5);
	real_t omega2 = omega;
	real_t omegaT = 1.0-1.0/(3*FluidAlfa + 0.5);
	real_t omegaC = 1.0-1.0/(3*FluidAlfa + 0.5);
<?R
	C( R, (f-feq) %*% M * OMEGA );
?>
	ux += ax;
	uy += ay;
<?R
	C( R, R + feq %*% M);
	C( R, R * (1/ diag(t(M) %*% M)));
	C( f, R %*% t(M) );
?>
	ux -= ax/2.0;
	uy -= ay/2.0;
<?R
	C( R, (g-geq) %*% M * OMEGA_T );
?>
	rhoT += Q;
<?R
	C( R, R + geq %*% M);
	C( R, R * (1/ diag(t(M) %*% M)));
	C( g, R %*% t(M) );

	C( R, (h-heq) %*% M * OMEGA_T );
?>
	C += dC;
<?R
	C( R, R + heq %*% M);
	C( R, R * (1/ diag(t(M) %*% M)));
	C( h, R %*% t(M) );
?>
}


