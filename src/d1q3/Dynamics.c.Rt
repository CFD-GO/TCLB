<?R
	source("conf.R") 
?>

CudaDeviceFunction real_t getCp(){
	if ((NodeType & NODE_BOUNDARY) == NODE_Solid)
		return 100.0;
	else 
		return 1.0;
}

CudaDeviceFunction real_t getRho(){
	real_t Cp = getCp();
	return (<?R C(sum(f)) ?>)/Cp ;
}
    
CudaDeviceFunction vector_t getU(){
	vector_t u;
	u.x = f[1] - f[2];
	u.y = 0.0;
	u.z = 0.0;
	return u;
}

CudaDeviceFunction float2 Color() {
        float2 ret;
        real_t d = <?R C(sum(f)) ?>;
        ret.x = (d-InletDensity)/(1.0-InletDensity);
	ret.x = ret.x;
        if (NodeType == NODE_Solid){
                ret.y = 0;
        } else {
                ret.y = 1;
        }
        return ret;
}


CudaDeviceFunction void BounceBack()
{
	real_t uf;
	uf=f[2];
	f[2]=f[1];
	f[1]=uf;
}

CudaDeviceFunction void EVelocity()
{
}

CudaDeviceFunction void WPressure()
{
	real_t rho = InletDensity;
	f[1] = rho - f[0] - f[2];
}

CudaDeviceFunction void WVelocity()
{
}

CudaDeviceFunction void EPressure()
{
	const real_t rho = 1.0;
	f[2] = rho - f[0] - f[1];
}


CudaDeviceFunction void Run() {
    switch (NodeType & NODE_BOUNDARY) {
	case NODE_Wall:
		BounceBack();
		break;
	case NODE_EVelocity:
		EVelocity();
		break;
	case NODE_WPressure:
		WPressure();
		break;
	case NODE_WVelocity:
		WVelocity();
		break;
	case NODE_EPressure:
		EPressure();
		break;
    }
    if (NodeType & NODE_MRT)
    {
		CollisionMRT();
    }
}

CudaDeviceFunction void SetEquilibrum(const real_t d, const real_t u[2])
{	real_t usq, uf;
	real_t Cp = getCp();
	
	f[0]=d*Cp - 1./3.*d;
	f[1]=1./6.*d;
	f[2]=1./6.*d;
}

CudaDeviceFunction void Init() {
	real_t u[2] = {InletVelocity,0.};
	real_t d = 1.0;
	SetEquilibrum(d,u);
}


CudaDeviceFunction void CollisionMRT()
{
	real_t d, u, p;
	real_t Cp = getCp();
	
<?R
        R = PV(c("d","u","p"))

M = matrix(c(
      1,  1,  1, 
      0,  1, -1,
     -2,  1,  1), 3,3);

	C( R == f %% M, float=F);
?>
u = u*(1-omega)  +  omega*( 0 );
p = p*(1-omega)  +  omega*( -2*d+d/Cp);
<?R
	C( f == R %% solve(M));
?>
}


