<?R
	source("conf.R");
	c_header();
?>
#include "cbRunR.h"

#ifdef WITH_R

#define rNull Rcpp::NumericVector(0)
template <typename T> Rcpp::IntegerVector SingleInteger(T i) { Rcpp::IntegerVector v(1); v[0] = i; return v; }

RInside RunR::R;

class rWrapper { // Wrapper for all my R objects
public:
	Solver * solver;
	virtual SEXP Dollar(std::string name) { return rNull; };
	virtual void DollarAssign(std::string name, SEXP v) {};
	virtual std::string print() {
		char str[2048];
		sprintf(str,"rWrapper(%p)\n",solver);
		return std::string(str);
	}
	virtual SEXP Call(Rcpp::List) { ERROR("[R] Called a non-callable rSolver"); return rNull; }
	virtual ~rWrapper() { output("[R] Destroying wrapper");};
	template <class T>
	SEXP rWrap(T * ptr) {
	        Rcpp::XPtr< rWrapper > a(ptr);
		a->solver = solver;
		Rcpp::Function wraper("CLBFunctionWrap");
		Rcpp::Function ra = wraper(a);
	        ra.attr("class") = "CLB";
		ra.attr("xptr") = a;
	        return ra;
	}
};

class rSettings : public rWrapper {
public:
	std::string print() { return "Settings"; }
	SEXP Dollar(std::string name) {
	  return 0;
	}

	void DollarAssign(std::string name, SEXP v_) {
	  Rcpp::NumericVector v(v_);
	  <?R for (v in rows(Settings)) { ?>
	          if (name == "<?%s v$name?>") {
	                solver->lattice-><?%s v$FunName ?>(v[0]);
			return;
	          }
	  <?R } ?>
	  ERROR("[R] Unknown setting");
	}
};

class rParameters : public rWrapper {
public:
	std::string print() { return "Parameters"; }
	SEXP Dollar(std::string name) {
		lbRegion reg = solver->lattice->region;
		Rcpp::NumericVector ret(reg.size());
		Rcpp::IntegerVector retdim(3);
		retdim[0] = reg.nx;
		retdim[1] = reg.ny;
		retdim[2] = reg.nz;
		ret.attr("dim") = retdim;
	<?R 
	    for (d in rows(DensityAll)) if (d$parameter){ 
	?>
	    if (name == "<?%s d$nicename ?>") {
	        solver->lattice->Get_<?%s d$nicename ?>(&ret[0]); 
		return ret;
	    }
	<?R
	} 
	?>
		ERROR("[R] Unknown parameter");
		return Rcpp::NumericVector(0);
	}

	void DollarAssign(std::string name, SEXP v_) {
		Rcpp::NumericVector v(v_);
		if (v.size() != solver->region.size()) {
			ERROR("Wrong size of the parameter field!");
			return;
		}
	<?R 
	    for (d in rows(DensityAll)) if (d$parameter){ 
	?>
	    if (name == "<?%s d$nicename ?>") {
	        solver->lattice->Set_<?%s d$nicename ?>(&v[0]); 
		return;
	    }
	<?R
	} 
	?>
		ERROR("[R] Unknown parameter");
	}
};

class rAction : public rWrapper {
	std::string name;
public:
	std::string print() { return name + " (Action)"; }

	rAction(const char* name_): name(name_) {};
	SEXP Call(Rcpp::List args) {
		int Snap = solver->lattice->Snap;
		<?R for (n in names(Actions)) {
	        a = Actions[[n]]
	        if (n == "Iteration") {
	                FunName = "Iteration"
	        } else {
	                FunName = paste("Action",n,sep="_")
	        } ?>
		if (name == "<?%s n ?>") {
			solver->lattice-><?%s FunName ?>(Snap, (Snap+1) % 2, solver->iter_type);
			return rNull;
		}
		<?R } ?>
		ERROR("[R] Unknown Action");
		return rNull;
	}
};

class rActions : public rWrapper {
	std::string print() { return "Actions"; }
public:
	SEXP Dollar(std::string name) {
		return rWrap(new rAction(name.c_str()));
	}
};

class rGeometry : public rWrapper {
public:
	std::string print() { return "Geometry"; }

	void DollarAssign(std::string name, SEXP v_) {
		Rcpp::IntegerVector v(v_);
		lbRegion reg = solver->lattice->region;
		size_t size = reg.size();
		{
			flag_t * NodeType = new flag_t[size];
			solver->lattice->GetFlags(reg, NodeType);
			<?R
			i = !duplicated(NodeTypes$group)
			for (n in rows(NodeTypes[i,])) {
			?>
			if (name == "<?%s n$group ?>") {
				bool some_na = false;
				for (size_t i=0;i<size;i++) {
					if (Rcpp::IntegerVector::is_na(v[i])) {
						some_na = true;
					} else {
						NodeType[i] = (NodeType[i] - (NodeType[i] & NODE_<?%s n$group ?>)) + ((v[i] - 1) << <?%d n$shift ?>);
					}
				}
				if (some_na) {
					ERROR("Some NA in Geometry (<?%s n$group ?>) assignment");
				}
			}
			<?R } ?>
			solver->lattice->FlagOverwrite(NodeType, reg);
			delete[] NodeType;
		}
		return;
	}

SEXP Dollar(std::string name) {
	lbRegion reg = solver->lattice->region;
	size_t size = reg.size();
	if (name == "dx") return SingleInteger(reg.dx);
	if (name == "dy") return SingleInteger(reg.dy);
	if (name == "dz") return SingleInteger(reg.dz);
	if (name == "size") return SingleInteger(reg.size());
	Rcpp::IntegerVector retdim(3);
	retdim[0] = reg.nx;
	retdim[1] = reg.ny;
	retdim[2] = reg.nz;
	if (name == "dim") return retdim;
	{ // Geometry components
		flag_t * NodeType = new flag_t[size];
		solver->lattice->GetFlags(reg, NodeType);
		Rcpp::IntegerVector small(size);
		small.attr("dim") = retdim;
		<?R
		i = !duplicated(NodeTypes$group)
		for (n in rows(NodeTypes[i,])) {
		?>
		if (name == "<?%s n$group ?>") {
			for (size_t i=0;i<size;i++) {
				small[i] = 1 + ((NodeType[i] & NODE_<?%s n$group ?>) >> <?%d n$shift ?>);
			}
			Rcpp::CharacterVector levels;
			levels.push_back("None"); <?R
			for (m in rows(NodeTypes[NodeTypes$group == n$group,])) { ?>
				levels.push_back("<?%s m$name ?>"); <?R
			} ?>
			small.attr("levels") = levels;
			small.attr("class") = "factor";
			return small;
		}
		<?R } ?>
		delete[] NodeType;
	}
	ERROR("[R] Unknown component of Geometry");
	return Rcpp::IntegerVector(0);
}

};


class rSolver : public rWrapper {
public:
	std::string print() { return "Solver"; }

	SEXP Dollar(std::string name) {
	  if (name == "Settings") {  
	    return rWrap(new rSettings());
	  } else if (name == "Parameters") {  
	    return rWrap(new rParameters());
	  } else if (name == "Actions") {  
	    return rWrap(new rActions());
	  } else if (name == "Geometry") {  
	    return rWrap(new rGeometry());
	  }
	  return rNull;
	}
};


SEXP CLBFunctionCall(Rcpp::XPtr< rWrapper > obj, Rcpp::List args) {
	notice("[R] Calling %s",obj->print().c_str());
	return obj->Call(args);
}


SEXP CLBDollar(SEXP fobj_, std::string name) {
	Rcpp::Function fobj = fobj_;
	Rcpp::XPtr< rWrapper > obj = fobj.attr("xptr");
	notice("[R] Getting %s from %s",name.c_str(),obj->print().c_str());
	return obj->Dollar(name);
}

SEXP CLBPrint(SEXP fobj_) {
	Rcpp::Function fobj = fobj_;
	Rcpp::XPtr< rWrapper > obj = fobj.attr("xptr");
	std::string s = obj->print();
	notice("[R] Printing %s",s.c_str());
	return Rcpp::CharacterVector(s);
}

SEXP CLBDollarAssign(SEXP fobj_, std::string name, SEXP v) {
	Rcpp::Function fobj = fobj_;
	Rcpp::XPtr< rWrapper > obj = fobj.attr("xptr");
	notice("[R] Setting %s from %s",name.c_str(),obj->print().c_str());
	obj->DollarAssign(name,v);
	return fobj_;
}


int RunR::Init() {
	Callback::Init();
	notice("[R] Initializing R environment ...");
	R["CLBFunctionCall"] = Rcpp::InternalFunction( &CLBFunctionCall );
	R["$.CLB"]           = Rcpp::InternalFunction( &CLBDollar );
	R["$<-.CLB"]         = Rcpp::InternalFunction( &CLBDollarAssign );
	R["print.CLB"]       = Rcpp::InternalFunction( &CLBPrint );
	R.parseEval("'CLBFunctionWrap' <- function(obj) { function(...) CLBFunctionCall(obj, list(...)); }");

	rWrapper base;
	base.solver = solver;
	R["Solver"]          = base.rWrap(new  rSolver ());
	
	return 0;
}


int RunR::DoIt() {
	output("[R] Running R ...");
	try {
		R.parseEval(node.child_value());
	} catch (...) {
		return -1;
	}
	return 0;
}


#endif // WITH_R

// Function created only to check to create Handler for specific conditions
vHandler * Ask_For_RunR(const pugi::xml_node& node) {
  std::string name = node.name();
  if (name == "RunR") {
#ifdef WITH_R
    return new RunR;
#else
    ERROR("No R support. configure with --enable-rinside\n");
    exit(-1);  
#endif
  }
  return NULL;
}

// Register this function in the Handler Factory
template class HandlerFactory::Register< Ask_For_RunR >;


