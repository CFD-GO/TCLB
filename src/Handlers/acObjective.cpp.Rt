<?R
#include "../HandlerFactory.h"
source("conf.R")
	c_header()
?>

#include "acObjective.h"
std::string acObjective::xmlname = "Objective";

int acObjective::Init () {
	int zone_number = 0;
	double glob[ GLOBALS ];
	for (size_t i = 0; i < GLOBALS; i++) glob[i] = solver->lattice->globals[i];
	MPI_Bcast(glob, GLOBALS, MPI_DOUBLE, 0, solver->mpi_comm);
	pugi::xml_attribute attr;
<?R
	for (g in rows(Globals)) if (! g$adjoint) { ?>
	#define <?%s g$name ?> glob[<?%s g$Index ?>] <?R
	}
	sel = which(paste0(Globals$name,"InObj") %in% ZoneSettings$name)
	Comp = Globals$name[sel]
	v = PV("val");
	for (c in Comp) { ?>
	double <?%s c ?>InObj = 0.0; <?R
	} ?>
	Objective = 0; <?R
	for (objname in names(Objectives)) {
		obj = Objectives[[objname]] ?>
	attr = node.attribute("<?%s objname ?>");
	if (attr) {
		double val = solver->units.alt(attr.value());
		Objective += <?%s ToC(obj*v) ?>; <?R
		for (c in Comp) {
			der = deriv(obj, c)
			if (! is.zero(der)) { ?>
		<?%s c ?>InObj += <?R C(der*v) ?>; <?R }
		} ?>
	} <?R
	}
	for (c in Comp) {
                i = which(ZoneSettings$name == paste(c,"InObj",sep=""));
                s = ZoneSettings[i,,drop=FALSE];
?>
	output("<?%s s$Index?> in zone_number = %lg\n", <?%s c ?>InObj);
        solver->lattice->zSet.set(<?%s s$Index?>, zone_number, <?%s c ?>InObj); <?R
        }
?>
	solver->lattice->globals[ GLOBALS_Objective ] = Objective;
		return 0;
	}


// Register the handler (basing on xmlname) in the Handler Factory
template class HandlerFactory::Register< GenericAsk< acObjective > >;
