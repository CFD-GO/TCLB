<?R
#include "../HandlerFactory.h"
source("conf.R")
	c_header()
?>

#include "cbPID.h"
std::string cbPID::xmlname = "PID";

int cbPID::Init () {
		Callback::Init();
		double stop;
		pugi::xml_attribute attr;
		int whats=0;
		<?R for (g in rows(Globals)) { ?>
		attr = node.attribute("<?%s g$name ?>");
		if (attr) {
			target = solver->units.alt(attr.value());
			what = <?%s g$Index ?>;
			whats++;
		} <?R
		        } ?>
		if (whats != 1) {
			error("Wrong number of Globas in %s\n", node.name());
			return -1;
		}
		whats = 0;
		attr = node.attribute("control");
		if (attr) {
			std::string par,zone;
			par = attr.value();
                        size_t i = par.find_first_of('-');
                        if (i == string::npos) {
                                zone = "";
                                zone_number = -1;
                        } else {
                                zone = par.substr(i+1);
                                par = par.substr(0,i);
                                if (solver->geometry->SettingZones.count(zone) > 0) { 
                                        zone_number = solver->geometry->SettingZones[zone];
                                } else {
                                        WARNING("Unknown zone %s (found while setting parameter %s)\n", zone.c_str(), par.c_str());
                                        zone_number = -2;
                                        zone = "";
                                }
                        }
                        if (zone_number > -2) {
			<?R for (v in rows(ZoneSettings)) { ?>
				if (par == "<?%s v$name?>") {
					setting = <?%s v$Index?>;
					whats++;
				}
			<?R } ?>
			}
			if (whats != 1) {
				error("No zonal setting supplied for control in %s\n", node.name());
				return -1;
			}
		} else {
			error("No control attribute in %s\n", node.name());
			return -1;
		}

		attr = node.attribute("IntegrationTime");
		if (attr) {
			itime = solver->units.alt(attr.value());
		} else {
		        itime = solver->units.alt("1s");
		}
		attr = node.attribute("DerivativeTime");
		if (attr) {
			dtime = solver->units.alt(attr.value());
		} else {
		        dtime = solver->units.alt("1s");
		}
		attr = node.attribute("scale");
		if (attr) {
			scale = solver->units.alt(attr.value());
		} else {
		        scale = solver->units.alt("1s");
		}
		integral = 0.0;
		old_err = 0.0;
		DT = everyIter;
                if (zone_number < 0) {
                        sval = solver->lattice->zSet.get(setting, 0, (size_t) 0);
                } else {
                        sval = solver->lattice->zSet.get(setting, zone_number, (size_t) 0);
                }
		old_iter_type = solver->iter_type;
		solver->iter_type |= ITER_LASTGLOB;
		return 0;
	}


int cbPID::DoIt () {
		Callback::DoIt();
		int ret=0;
		pugi::xml_attribute attr;
		double control, derivative;
		
                if (solver->mpi_rank == 0) {
                        double val = solver->lattice->globals[ what ];
                        double err = target - val;
                        output("PID criterium : %lg --> %lg (error: %lg)\n", val, target, err);
			
			integral = integral + (old_err + err)*DT/2.0;
			derivative = (err - old_err)/DT;
			
			control = err + integral / itime + derivative * dtime;
			old_err = err;
			
		}
                MPI_Bcast(&control, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);
                double nval;
/*                if (zone_number < 0) {
                	sval = solver->lattice->zSet.get(setting, 0, (size_t) 0);
		} else {
                	sval = solver->lattice->zSet.get(setting, zone_number, (size_t) 0);
		}*/
		nval = sval + control * scale;
                output("PID setting   : %lg --> %lg (control: %lg)", sval, nval, control);
		solver->lattice->zSet.set(setting, zone_number, nval);
		
		return ret;
	}


int cbPID::Finish () {
		solver->iter_type = old_iter_type;
		return Callback::Finish();
	}


// Register the handler (basing on xmlname) in the Handler Factory
template class HandlerFactory::Register< GenericAsk< cbPID > >;
