<?R
#include "../HandlerFactory.h"
source("conf.R")
	c_header()
?>

#include "cbFailcheck.h"
std::string cbFailcheck::xmlname = "Failcheck";

int cbFailcheck::Init () {
		Callback::Init();
		reg.dx = solver->region.dx;
		reg.dy = solver->region.dy;
		reg.dz = solver->region.dz;
	


        pugi::xml_attribute attr = node.attribute("dx");
        if (attr) {
            reg.dx = solver->units.alt(attr.value());
        }
        attr = node.attribute("dy");
        if (attr) {
            reg.dy = solver->units.alt(attr.value());
        }
        attr = node.attribute("dz");
        if (attr) {
            reg.dz = solver->units.alt(attr.value());
        }


        attr = node.attribute("nx");
        if (attr) {
            reg.nx = solver->units.alt(attr.value());
        }
        attr = node.attribute("ny");
        if (attr) {
            reg.ny = solver->units.alt(attr.value());
        }
        attr = node.attribute("nz");
        if (attr) {
            reg.nz = solver->units.alt(attr.value());
        }

		rkept = 1;
		return 0;
	}


int cbFailcheck::DoIt () {
		Callback::DoIt();
       	int ret = 0;
		int cond,fin;
		fin = false;
		cond = false;

        pugi::xml_attribute comp = node.attribute("what");
 
        name_set components;
        if(comp){
            components.add_from_string(comp.value(),',');
        } else {
            components.add_from_string("all",',');
        }

		<?R for (q in rows(Quantities)) { ifdef(q$adjoint); ?>
        
		if (!cond) {
            if (components.in("<?%s q$name ?>")) {
	    	    <?R if (q$vector) { ?>
	                if (reg.size() == 0) {
                        //  I dont think we need to check vectors in area, to expensive
                        <?%s q$type ?> tmp;
    	                solver->lattice->Get<?%s q$name ?>(reg,&tmp);
                        cond = ((std::isnan(tmp.x)) || (std::isnan(tmp.y)) || (std::isnan(tmp.z))); 
                    }
    	    	<?R } else { ?> 
                    <?%s q$type ?>* tmp = new <?%s q$type ?>[reg.size()];
        	    	solver->lattice->Get<?%s q$name ?>(reg,tmp);

                    cond = std::isnan(tmp[0]); // for single point
                    
                    for (int k = 0; k < reg.size(); k++){  
    	       		    cond = cond || (std::isnan(tmp[k]));
                    }
    
        		<?R } ?>
                if(cond ){ notice("Checking <?%s q$name ?> discovered NaN"); }
            }
		}
		<?R }; ifdef(); ?>

		MPI_Allreduce(&cond,&fin,1,MPI_INT,MPI_LOR,MPI_COMM_WORLD);

	    if ((fin) && (rkept)) {
            rkept = 0;
			notice("NaN value discovered. Executing final actions from the Failcheck element before full stop...\n");
            for (pugi::xml_node par = node.first_child(); par; par = par.next_sibling()) {
                Handler hand(par, solver);
                if (hand) hand.DoIt();
            }
            notice("Stopping due to Nan value\n");
            ret = ITERATION_STOP;
        }
		return ret;
	}	


int cbFailcheck::Finish () {
		return Callback::Finish();
	}


// Register the handler (basing on xmlname) in the Handler Factory
template class HandlerFactory::Register< GenericAsk< cbFailcheck > >;
