<?R
	source("conf.R")
	c_header();
?>
#include <stdio.h>
#include <assert.h>
#include <mpi.h>
#include "cross.h"
#include "hdf5Lattice.h"
#include "Global.h"

#ifdef WITH_HDF5
	#include <hdf5.h>
#endif


int hdf5WriteLattice(const char * nm, Solver * solver, name_set * what)
{
#ifdef WITH_HDF5
	Lattice * lattice = solver->lattice;
	UnitEnv * units = &solver->units;

	solver->print("writing hdf5");
	char filename[2*STRING_LEN];
	solver->outIterCollectiveFile(nm, ".h5", filename);

	size_t size;
	lbRegion reg = lattice->region;
	lbRegion totalreg = lattice->mpi.totalregion;
	size = reg.size();

    hid_t       file_id, dset_id;         /* file and dataset identifiers */
    hsize_t     totaldim[4];                 /* dataset dimensions */
    hsize_t     dim[4];            /* chunk dimensions */
    hsize_t	offset[4];
    int         *data;                    /* pointer to data buffer to write */
    hsize_t	ones[4];	         
    int         i;
    herr_t	status;
    hid_t plist_id;

	ones[0] = 1;
	ones[1] = 1;
	ones[2] = 1;
	ones[3] = 1;

    totaldim[0] = totalreg.nz;
    totaldim[1] = totalreg.ny;
    totaldim[2] = totalreg.nx;
    totaldim[3] = 3;
    dim[0] = reg.nz;   
    dim[1] = reg.ny;   
    dim[2] = reg.nx;
    dim[3] = 3;
    offset[0] = reg.dz;
    offset[1] = reg.dy;
    offset[2] = reg.dx;
    offset[3] = 0;

	debug1("[%2d] %s dim: %lldx%lldx%lld (%lldx%lldx%lld+%lld,%lld,%lld)\n", lattice->mpi.rank,
		filename,
		totaldim[0], totaldim[1], totaldim[2],
		dim[0], dim[1], dim[2],
		offset[0], offset[1], offset[2]);

    MPI_Comm comm  = MPMD.local;
    MPI_Info info  = MPI_INFO_NULL;

	plist_id = H5Pcreate(H5P_FILE_ACCESS);
		H5Pset_fapl_mpio(plist_id, comm, info);
	    	file_id = H5Fcreate(filename, H5F_ACC_TRUNC, H5P_DEFAULT, plist_id);
    	H5Pclose(plist_id);

	<?R for (q in rows(Quantities)) { ifdef(q$adjoint); ?>
	{
		if (what->in("<?%s q$name ?>")) {
			hid_t       filespace, memspace;
			bool vector = <?%s ifelse(q$vector, "true", "false") ?>;
#ifndef CALC_DOUBLE_PRECISION
			hid_t type = H5T_NATIVE_FLOAT;
#else
			hid_t type = H5T_NATIVE_DOUBLE;
#endif
			int rank = 3;
			if (vector) rank = 4;
			filespace = H5Screate_simple(rank, totaldim, NULL); 
			memspace  = H5Screate_simple(rank, dim, NULL); 
			plist_id = H5Pcreate(H5P_DATASET_CREATE);
	                    	dset_id = H5Dcreate(file_id, "<?%s q$name ?>", H5T_NATIVE_DOUBLE, filespace, H5P_DEFAULT, plist_id, H5P_DEFAULT);
			H5Pclose(plist_id);

                    	status = H5Sselect_hyperslab(filespace, H5S_SELECT_SET, offset, ones, ones, dim);
                    	if (status < 0) return H5Eprint1(stderr);

			double v = units->alt("<?%s q$unit ?>");
	                <?%s q$type ?>* tmp = new <?%s q$type ?>[size];
                        lattice->Get<?%s q$name ?>(reg, tmp, 1/v);

			debug0("filespace: %lld memsize: %lld\n", H5Sget_select_npoints(filespace), H5Sget_select_npoints(memspace));
			plist_id = H5Pcreate(H5P_DATASET_XFER);
				H5Pset_dxpl_mpio(plist_id, H5FD_MPIO_COLLECTIVE);
				status = H5Dwrite(dset_id, H5T_NATIVE_DOUBLE, memspace, filespace, plist_id, tmp);
			
			H5Pclose(plist_id);
			H5Sclose(filespace);
			H5Sclose(memspace);
			H5Dclose(dset_id);

			delete[] tmp;
		}
	}
	<?R }; ifdef(); ?>

    H5Fclose(file_id);
	return 0;
#else
	return -1;
#endif
}