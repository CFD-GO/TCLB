<?R
	source("conf.R")
	c_header()
?>
/**
	\file Global.cpp
	Implementation of global functions
*/

#include "Consts.h"
#include "cross.h"
#include "Global.h"

int D_MPI_RANK;
/*
void initSettings() {
	real_t val = 0;
<?R for (v in rows(Settings)) {
	if (is.na(v$derived)) { ?>
			CudaCopyToConstant("<?%s v$name ?>", <?%s v$name ?>, &val, sizeof(real_t)); <?R
	}} ?>
}
*/

/// Generate the connectivity information
/*
	Generate the connectivity information for a 3D torus MPI topology
	\param mpi MPI information table to fill
	\param nx Number of segments in X direction
	\param ny Number of segments in Y direction
	\param nz Number of segments in Z direction
*/
void fillSides(MPIInfo mpi, int nx, int ny, int nz)
{
	int x, y, z, k, j;
<?R
	sides = function(name, dx, dy, dz) {
?>
		j = ((nx + x + <?%d dx ?>) % nx) + ((ny + y + <?%d dy ?>) % ny) * nx + ((nz + z + <?%d dz ?>) % nz) * nx * ny;
		mpi.node[k].<?%s name ?> = j;
//		printf("[%d] <?%d dx ?> <?%d dy ?> <?%d dz ?>: %d <?%s name ?> %d\n", D_MPI_RANK, k, j);
<?R
	}
?>
	for (x=0; x<nx; x++)
	for (y=0; y<ny; y++)
	for (z=0; z<nz; z++) {
		k = x + y * nx + z * nx * ny;
<?R
	for (m in NonEmptyMargin) {
		sides(m$side, m$dx, m$dy, m$dz);
	}
?>
	}
}

