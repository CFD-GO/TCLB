<?R
        source("conf.R")
	c_header()
?>
/**
    \file Global.h
    Declaration of global variables and functions. Including MPI connectivity info.
*/
#include "Consts.h"
#include "types.h"
#include <string>

#ifdef _WIN32
  #define isatty(...) 1
#else
  #include <unistd.h>
#endif

#ifndef GLOBAL_H
    #define BOUNDARY_UX UX_mid
    #define NUMBER_OF_DENSITIES <?%d nrow(DensityAll) ?>
#define GLOBAL_H 1
#endif

#ifndef INFO_H
    #include "cross.h"
    #include "Region.h"
    typedef struct {
        float x;
        float y;
    } vector_t_b;

/// Information on connectivity of a processor
    struct NodeInfo {
        lbRegion region; ///< Local Lattice region
        int rank; ///< MPI rank of the processor <?R
for (m in Margin) { ?>
        int <?%s m$side ?>; ///< MPI rank of the processor on [<?%2d m$dx ?>,<?%2d m$dy?>,<?%2d m$dz?>] side <?R
} ?>
    };

/// Gathered connectivity info
    struct MPIInfo {
        NodeInfo * node; ///< Table of all processors info
        lbRegion totalregion; ///< Global Lattice region
        int size; ///< MPI size
        int rank; ///< (My) MPI rank
        int gpu; ///< (My) GPU selected
    };

    void fillSides(MPIInfo, int, int, int);

/// Main data structure for the lattice
/**
    Main data structure for storing solution (Snapshots)
    in the lattice. It stores the internal part of the fields
    and margins.
*/
    struct FTabs { <?R
    for (m in NonEmptyMargin) { ?>
        real_t* <?%s m$name ?>; ///< Data on [<?%2d m$dx ?>,<?%2d m$dy?>,<?%2d m$dz?>] margin<?R
    } ?>
        void Alloc(int,int,int);
        void Clear(int,int,int);
        void PreAlloc(int,int,int);
        void Free();
/// Assign operator (no alloc)
        inline FTabs & operator=(const FTabs & in) { <?R
    for (m in NonEmptyMargin) { ?>
            <?%s m$name ?> = in. <?%s m$name ?>; <?R
    } ?>
	    return *this;
        }
    };

#define INFO_H 1
#endif
/*
#ifndef SETTINGS_H
<?R
	for (v in rows(Settings)) { ?>
    CudaExternConstantMemory(real_t <?%s v$name ?>); <?R
	} ?>
    void initSettings();

#define SETTINGS_H 1
#endif
*/
#ifndef DEBUG_H   
    #include <ctime>
    extern std::clock_t global_start;

    inline double get_walltime() {
       return (std::clock() - global_start) / (double)CLOCKS_PER_SEC;
    }

    extern int D_MPI_RANK;
    extern int D_TERMINAL;

    int myprint(int level, const char *fmt, ...);
    int InitPrint(int print_level, int only_root_level, int error_level);
    #define dprint(x, ...) myprint(x, __VA_ARGS__)
    #define debug0(...) DEBUG0(myprint(0, __VA_ARGS__)) // 0-level Debug
    #define debug1(...) DEBUG1(myprint(1, __VA_ARGS__)) // 1-level Debug
    #define debug2(...) DEBUG2(myprint(2, __VA_ARGS__)) // 2-level Debug
    #define debug3(...) DEBUG3(myprint(3, __VA_ARGS__)) // Output
    #define debug4(...) myprint(4, __VA_ARGS__) // Notice
    #define debug5(...) myprint(5, __VA_ARGS__) // Important Notice
    #define debug6(...) myprint(6, __VA_ARGS__) // Warning
    #define debug7(...) myprint(7, __VA_ARGS__) // Important Warning
    #define debug8(...) myprint(8, __VA_ARGS__) // Error
    #define debug9(...) myprint(9, __VA_ARGS__) // Fatal Error
    
    #define output(...) debug3(__VA_ARGS__)    
    #define notice(...) debug4(__VA_ARGS__)    
    #define NOTICE(...) debug5(__VA_ARGS__)    
    #define warning(...) debug6(__VA_ARGS__)    
    #define WARNING(...) debug7(__VA_ARGS__)    
    #define error(...) debug8(__VA_ARGS__)    
    #define ERROR(...) debug9(__VA_ARGS__)    
    

    #define DEBUG_SETRANK(x) {D_MPI_RANK = x; D_TERMINAL = isatty(1); }
#if DEBUG_LEVEL < 1
    #define DEBUG0(x) x; fflush(stdout);
    #define DEBUG1(x) x; fflush(stdout);
    #define DEBUG2(x) x; fflush(stdout);
    #define DEBUG3(x) x; fflush(stdout);
#elif DEBUG_LEVEL < 2
    #define DEBUG0(x)
    #define DEBUG1(x) x
    #define DEBUG2(x) x
    #define DEBUG3(x) x
#elif DEBUG_LEVEL < 3
    #define DEBUG0(x)
    #define DEBUG1(x)
    #define DEBUG2(x) x
    #define DEBUG3(x) x
#elif DEBUG_LEVEL < 4
    #define DEBUG0(x)
    #define DEBUG1(x)
    #define DEBUG2(x)
    #define DEBUG3(x) x
#else
    #define DEBUG0(x)
    #define DEBUG1(x)
    #define DEBUG2(x)
    #define DEBUG3(x)
#endif
    #define DEBUG_M debug0("%s(%d)\n", __FILE__, __LINE__ )
	
#define DEBUG_H 1
#endif


#ifndef D2Q9_w_and_e

CudaConstantMemory const  real_t 	wt[5] = {2./6., 	1./6., 1./6., 1./6., 1./6.};
CudaConstantMemory const  real_t 	wf[9] = {4./9., 	1./9., 1./9., 1./9., 1./9., 	1./36., 1./36., 1./36., 1./36.};

	<?R source("lib/lattice.R") ?>
	
	CudaConstantMemory real_t const  d2q9_ex[9] = {<?R cat(d2q9[,1],sep=",") ?>};
	CudaConstantMemory real_t const  d2q9_ey[9] = {<?R cat(d2q9[,2],sep=",") ?>};
	CudaConstantMemory real_t const  d2q5_ex[5] = {<?R cat(d2q9[1:5,1],sep=",") ?>};
	CudaConstantMemory real_t const  d2q5_ey[5] = {<?R cat(d2q9[1:5,2],sep=",") ?>};


#endif
#define D2Q9_w_and_e

